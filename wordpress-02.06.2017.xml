<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2017-06-02 13:02"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Scalera</title>
<link>https://scalerablog.wordpress.com</link>
<description>Step by step</description>
<pubDate>Fri, 02 Jun 2017 13:02:51 +0000</pubDate>
<language>es-ES</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>https://scalerablog.wordpress.com</wp:base_blog_url>
<wp:author>
  <wp:author_login>scalerablog</wp:author_login>
  <wp:author_email>scalera.blog@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[Scalera staff]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:author>
  <wp:author_login>jpaniego</wp:author_login>
  <wp:author_email>javiersantospaniego@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[Javier S. Paniego]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:author>
  <wp:author_login>dvallejonava</wp:author_login>
  <wp:author_email>d.vallejo.nava@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[dvallejonava]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:author>
  <wp:author_login>javifdev</wp:author_login>
  <wp:author_email>javierfs.89@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[javifdev]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:author>
  <wp:author_login>pfcoperez</wp:author_login>
  <wp:author_email>contact@pablofranciscoperez.info</wp:author_email>
  <wp:author_display_name><![CDATA[pfcoperez]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:author>
  <wp:author_login>carlopolo</wp:author_login>
  <wp:author_email>carlopolo@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[carlopolo]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:category>
  <wp:term_id>167975</wp:term_id>
  <wp:category_nicename>castellano</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Castellano]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>3205</wp:term_id>
  <wp:category_nicename>english</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[English]]></wp:cat_name>
</wp:category>
<wp:tag>
  <wp:term_id>1030</wp:term_id>
  <wp:tag_slug>action</wp:tag_slug>
  <wp:tag_name><![CDATA[action]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>28776</wp:term_id>
  <wp:tag_slug>actor</wp:tag_slug>
  <wp:tag_name><![CDATA[actor]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>51410740</wp:term_id>
  <wp:tag_slug>actorof</wp:tag_slug>
  <wp:tag_name><![CDATA[actorof]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1258</wp:term_id>
  <wp:tag_slug>actors</wp:tag_slug>
  <wp:tag_name><![CDATA[actors]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>58600</wp:term_id>
  <wp:tag_slug>ad-hoc</wp:tag_slug>
  <wp:tag_name><![CDATA[ad-hoc]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>23942</wp:term_id>
  <wp:tag_slug>add</wp:tag_slug>
  <wp:tag_name><![CDATA[add]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>268559</wp:term_id>
  <wp:tag_slug>adt</wp:tag_slug>
  <wp:tag_name><![CDATA[ADT]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>63898</wp:term_id>
  <wp:tag_slug>advanced</wp:tag_slug>
  <wp:tag_name><![CDATA[advanced]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>702939</wp:term_id>
  <wp:tag_slug>akka</wp:tag_slug>
  <wp:tag_name><![CDATA[akka]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>17236</wp:term_id>
  <wp:tag_slug>algebra</wp:tag_slug>
  <wp:tag_name><![CDATA[algebra]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>27395</wp:term_id>
  <wp:tag_slug>alias</wp:tag_slug>
  <wp:tag_name><![CDATA[alias]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>211850</wp:term_id>
  <wp:tag_slug>alis</wp:tag_slug>
  <wp:tag_name><![CDATA[alis]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>25228</wp:term_id>
  <wp:tag_slug>ambiguity</wp:tag_slug>
  <wp:tag_name><![CDATA[ambiguity]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>11453</wp:term_id>
  <wp:tag_slug>analytics</wp:tag_slug>
  <wp:tag_name><![CDATA[analytics]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>290</wp:term_id>
  <wp:tag_slug>announcement</wp:tag_slug>
  <wp:tag_name><![CDATA[announcement]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>17835</wp:term_id>
  <wp:tag_slug>anonymous</wp:tag_slug>
  <wp:tag_name><![CDATA[anonymous]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>64199</wp:term_id>
  <wp:tag_slug>anuncio</wp:tag_slug>
  <wp:tag_name><![CDATA[anuncio]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>23263</wp:term_id>
  <wp:tag_slug>any</wp:tag_slug>
  <wp:tag_name><![CDATA[any]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4276</wp:term_id>
  <wp:tag_slug>api</wp:tag_slug>
  <wp:tag_name><![CDATA[API]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>232047</wp:term_id>
  <wp:tag_slug>app</wp:tag_slug>
  <wp:tag_name><![CDATA[app]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>193583</wp:term_id>
  <wp:tag_slug>apply</wp:tag_slug>
  <wp:tag_name><![CDATA[apply]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>438055767</wp:term_id>
  <wp:tag_slug>applydinamic</wp:tag_slug>
  <wp:tag_name><![CDATA[applyDinamic]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>439490561</wp:term_id>
  <wp:tag_slug>applydynamic</wp:tag_slug>
  <wp:tag_name><![CDATA[applyDynamic]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8783</wp:term_id>
  <wp:tag_slug>ask</wp:tag_slug>
  <wp:tag_name><![CDATA[ask]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>916019</wp:term_id>
  <wp:tag_slug>ast</wp:tag_slug>
  <wp:tag_name><![CDATA[ast]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2128715</wp:term_id>
  <wp:tag_slug>async</wp:tag_slug>
  <wp:tag_name><![CDATA[async]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>33937</wp:term_id>
  <wp:tag_slug>at</wp:tag_slug>
  <wp:tag_name><![CDATA[at]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7223</wp:term_id>
  <wp:tag_slug>author</wp:tag_slug>
  <wp:tag_name><![CDATA[author]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>206459</wp:term_id>
  <wp:tag_slug>babel</wp:tag_slug>
  <wp:tag_name><![CDATA[babel]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>831689</wp:term_id>
  <wp:tag_slug>based</wp:tag_slug>
  <wp:tag_name><![CDATA[based]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>831704</wp:term_id>
  <wp:tag_slug>become</wp:tag_slug>
  <wp:tag_name><![CDATA[become]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>64655</wp:term_id>
  <wp:tag_slug>beginner</wp:tag_slug>
  <wp:tag_name><![CDATA[beginner]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>86165</wp:term_id>
  <wp:tag_slug>bienvenidos</wp:tag_slug>
  <wp:tag_name><![CDATA[bienvenidos]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>15968671</wp:term_id>
  <wp:tag_slug>bigdata</wp:tag_slug>
  <wp:tag_name><![CDATA[BigData]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>273</wp:term_id>
  <wp:tag_slug>blog</wp:tag_slug>
  <wp:tag_name><![CDATA[blog]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>460</wp:term_id>
  <wp:tag_slug>blogs</wp:tag_slug>
  <wp:tag_name><![CDATA[blogs]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>935096</wp:term_id>
  <wp:tag_slug>bound</wp:tag_slug>
  <wp:tag_name><![CDATA[bound]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4199637</wp:term_id>
  <wp:tag_slug>by-name</wp:tag_slug>
  <wp:tag_name><![CDATA[by-name]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2775745</wp:term_id>
  <wp:tag_slug>by-value</wp:tag_slug>
  <wp:tag_name><![CDATA[by-value]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>53176</wp:term_id>
  <wp:tag_slug>canvas</wp:tag_slug>
  <wp:tag_name><![CDATA[canvas]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>9012</wp:term_id>
  <wp:tag_slug>car</wp:tag_slug>
  <wp:tag_name><![CDATA[car]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>431310981</wp:term_id>
  <wp:tag_slug>carlopolo</wp:tag_slug>
  <wp:tag_name><![CDATA[carlopolo]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>211721</wp:term_id>
  <wp:tag_slug>case</wp:tag_slug>
  <wp:tag_name><![CDATA[case]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>37318569</wp:term_id>
  <wp:tag_slug>castellano-2</wp:tag_slug>
  <wp:tag_name><![CDATA[castellano]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1058980</wp:term_id>
  <wp:tag_slug>castilian</wp:tag_slug>
  <wp:tag_name><![CDATA[castilian]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>82413</wp:term_id>
  <wp:tag_slug>catch</wp:tag_slug>
  <wp:tag_name><![CDATA[catch]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>39372821</wp:term_id>
  <wp:tag_slug>cathegory</wp:tag_slug>
  <wp:tag_name><![CDATA[cathegory]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>19867</wp:term_id>
  <wp:tag_slug>challenge</wp:tag_slug>
  <wp:tag_name><![CDATA[challenge]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6376</wp:term_id>
  <wp:tag_slug>class</wp:tag_slug>
  <wp:tag_name><![CDATA[class]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>429802325</wp:term_id>
  <wp:tag_slug>classtag</wp:tag_slug>
  <wp:tag_name><![CDATA[classtag]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>20099</wp:term_id>
  <wp:tag_slug>clustering</wp:tag_slug>
  <wp:tag_name><![CDATA[clustering]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>656</wp:term_id>
  <wp:tag_slug>code</wp:tag_slug>
  <wp:tag_name><![CDATA[code]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>179970</wp:term_id>
  <wp:tag_slug>colaboration</wp:tag_slug>
  <wp:tag_name><![CDATA[colaboration]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>15888</wp:term_id>
  <wp:tag_slug>collaboration</wp:tag_slug>
  <wp:tag_name><![CDATA[collaboration]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>328733</wp:term_id>
  <wp:tag_slug>collect</wp:tag_slug>
  <wp:tag_name><![CDATA[collect]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6747</wp:term_id>
  <wp:tag_slug>collection</wp:tag_slug>
  <wp:tag_name><![CDATA[collection]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5336515</wp:term_id>
  <wp:tag_slug>combinators</wp:tag_slug>
  <wp:tag_name><![CDATA[combinators]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>14292</wp:term_id>
  <wp:tag_slug>command</wp:tag_slug>
  <wp:tag_name><![CDATA[command]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>9565</wp:term_id>
  <wp:tag_slug>compiler</wp:tag_slug>
  <wp:tag_name><![CDATA[compiler]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>214618</wp:term_id>
  <wp:tag_slug>concurrency</wp:tag_slug>
  <wp:tag_name><![CDATA[concurrency]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>11707</wp:term_id>
  <wp:tag_slug>context</wp:tag_slug>
  <wp:tag_name><![CDATA[context]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>12000702</wp:term_id>
  <wp:tag_slug>contravariance</wp:tag_slug>
  <wp:tag_name><![CDATA[contravariance]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>639907</wp:term_id>
  <wp:tag_slug>count</wp:tag_slug>
  <wp:tag_name><![CDATA[count]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5337649</wp:term_id>
  <wp:tag_slug>covariance</wp:tag_slug>
  <wp:tag_name><![CDATA[covariance]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>415025741</wp:term_id>
  <wp:tag_slug>currify</wp:tag_slug>
  <wp:tag_name><![CDATA[currify]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>662</wp:term_id>
  <wp:tag_slug>default</wp:tag_slug>
  <wp:tag_name><![CDATA[default]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>91648</wp:term_id>
  <wp:tag_slug>defined</wp:tag_slug>
  <wp:tag_name><![CDATA[defined]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>285940</wp:term_id>
  <wp:tag_slug>descanso</wp:tag_slug>
  <wp:tag_name><![CDATA[descanso]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>36769</wp:term_id>
  <wp:tag_slug>design-pattern</wp:tag_slug>
  <wp:tag_name><![CDATA[design-pattern]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>72849</wp:term_id>
  <wp:tag_slug>difference</wp:tag_slug>
  <wp:tag_name><![CDATA[difference]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2106765</wp:term_id>
  <wp:tag_slug>discard</wp:tag_slug>
  <wp:tag_name><![CDATA[discard]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>131459</wp:term_id>
  <wp:tag_slug>distributed</wp:tag_slug>
  <wp:tag_name><![CDATA[distributed]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8076</wp:term_id>
  <wp:tag_slug>dom</wp:tag_slug>
  <wp:tag_name><![CDATA[dom]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>35411465</wp:term_id>
  <wp:tag_slug>dropwhile</wp:tag_slug>
  <wp:tag_name><![CDATA[dropwhile]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>58204</wp:term_id>
  <wp:tag_slug>dsl</wp:tag_slug>
  <wp:tag_name><![CDATA[dsl]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>196306</wp:term_id>
  <wp:tag_slug>duck</wp:tag_slug>
  <wp:tag_name><![CDATA[duck]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>214633</wp:term_id>
  <wp:tag_slug>dynamic</wp:tag_slug>
  <wp:tag_name><![CDATA[dynamic]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>112096</wp:term_id>
  <wp:tag_slug>english-2</wp:tag_slug>
  <wp:tag_name><![CDATA[english]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>28582</wp:term_id>
  <wp:tag_slug>esa</wp:tag_slug>
  <wp:tag_name><![CDATA[esa]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1077117</wp:term_id>
  <wp:tag_slug>eval</wp:tag_slug>
  <wp:tag_name><![CDATA[eval]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>27515</wp:term_id>
  <wp:tag_slug>evidence</wp:tag_slug>
  <wp:tag_name><![CDATA[evidence]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>81569</wp:term_id>
  <wp:tag_slug>existential</wp:tag_slug>
  <wp:tag_name><![CDATA[existential]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>43231</wp:term_id>
  <wp:tag_slug>export</wp:tag_slug>
  <wp:tag_name><![CDATA[export]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2759089</wp:term_id>
  <wp:tag_slug>expr</wp:tag_slug>
  <wp:tag_name><![CDATA[expr]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>12185</wp:term_id>
  <wp:tag_slug>faq</wp:tag_slug>
  <wp:tag_name><![CDATA[faq]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>425552783</wp:term_id>
  <wp:tag_slug>fastoptjs</wp:tag_slug>
  <wp:tag_name><![CDATA[fastoptjs]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>213321</wp:term_id>
  <wp:tag_slug>filter</wp:tag_slug>
  <wp:tag_name><![CDATA[filter]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>108279</wp:term_id>
  <wp:tag_slug>finally</wp:tag_slug>
  <wp:tag_name><![CDATA[finally]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>23115595</wp:term_id>
  <wp:tag_slug>flatmap</wp:tag_slug>
  <wp:tag_name><![CDATA[flatmap]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>371311905</wp:term_id>
  <wp:tag_slug>flatspec</wp:tag_slug>
  <wp:tag_name><![CDATA[flatspec]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>173274</wp:term_id>
  <wp:tag_slug>flatten</wp:tag_slug>
  <wp:tag_name><![CDATA[flatten]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>61994</wp:term_id>
  <wp:tag_slug>fold</wp:tag_slug>
  <wp:tag_name><![CDATA[fold]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>22615219</wp:term_id>
  <wp:tag_slug>foldleft</wp:tag_slug>
  <wp:tag_name><![CDATA[foldleft]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>22615220</wp:term_id>
  <wp:tag_slug>foldright</wp:tag_slug>
  <wp:tag_name><![CDATA[foldright]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>309817</wp:term_id>
  <wp:tag_slug>for</wp:tag_slug>
  <wp:tag_name><![CDATA[for]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7136</wp:term_id>
  <wp:tag_slug>framework</wp:tag_slug>
  <wp:tag_name><![CDATA[framework]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>188922</wp:term_id>
  <wp:tag_slug>function</wp:tag_slug>
  <wp:tag_name><![CDATA[function]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>543559590</wp:term_id>
  <wp:tag_slug>function0</wp:tag_slug>
  <wp:tag_name><![CDATA[function0]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>188921</wp:term_id>
  <wp:tag_slug>functional</wp:tag_slug>
  <wp:tag_name><![CDATA[functional]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2850</wp:term_id>
  <wp:tag_slug>future</wp:tag_slug>
  <wp:tag_name><![CDATA[future]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>13871</wp:term_id>
  <wp:tag_slug>gen</wp:tag_slug>
  <wp:tag_name><![CDATA[gen]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>89667</wp:term_id>
  <wp:tag_slug>generation</wp:tag_slug>
  <wp:tag_name><![CDATA[generation]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>160120</wp:term_id>
  <wp:tag_slug>generator</wp:tag_slug>
  <wp:tag_name><![CDATA[generator]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>99</wp:term_id>
  <wp:tag_slug>generic</wp:tag_slug>
  <wp:tag_name><![CDATA[generic]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>18369</wp:term_id>
  <wp:tag_slug>generics</wp:tag_slug>
  <wp:tag_name><![CDATA[generics]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>488118871</wp:term_id>
  <wp:tag_slug>gentraversable</wp:tag_slug>
  <wp:tag_name><![CDATA[gentraversable]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>878771</wp:term_id>
  <wp:tag_slug>getter</wp:tag_slug>
  <wp:tag_name><![CDATA[getter]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>714</wp:term_id>
  <wp:tag_slug>goto</wp:tag_slug>
  <wp:tag_name><![CDATA[goto]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>30335</wp:term_id>
  <wp:tag_slug>greet</wp:tag_slug>
  <wp:tag_name><![CDATA[greet]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>108081</wp:term_id>
  <wp:tag_slug>haters</wp:tag_slug>
  <wp:tag_name><![CDATA[haters]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>3733</wp:term_id>
  <wp:tag_slug>hello</wp:tag_slug>
  <wp:tag_name><![CDATA[hello]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>575629</wp:term_id>
  <wp:tag_slug>heterogeneous</wp:tag_slug>
  <wp:tag_name><![CDATA[heterogeneous]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>12612024</wp:term_id>
  <wp:tag_slug>hlist</wp:tag_slug>
  <wp:tag_name><![CDATA[hlist]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>10679</wp:term_id>
  <wp:tag_slug>identity</wp:tag_slug>
  <wp:tag_name><![CDATA[identity]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1668847</wp:term_id>
  <wp:tag_slug>immutable</wp:tag_slug>
  <wp:tag_name><![CDATA[immutable]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>233006</wp:term_id>
  <wp:tag_slug>implicit</wp:tag_slug>
  <wp:tag_name><![CDATA[implicit]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4231278</wp:term_id>
  <wp:tag_slug>implode</wp:tag_slug>
  <wp:tag_name><![CDATA[implode]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>410192</wp:term_id>
  <wp:tag_slug>inference</wp:tag_slug>
  <wp:tag_name><![CDATA[inference]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>84839</wp:term_id>
  <wp:tag_slug>inheritance</wp:tag_slug>
  <wp:tag_name><![CDATA[inheritance]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>323274</wp:term_id>
  <wp:tag_slug>inicial</wp:tag_slug>
  <wp:tag_name><![CDATA[inicial]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>185861</wp:term_id>
  <wp:tag_slug>initial</wp:tag_slug>
  <wp:tag_name><![CDATA[initial]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>21292</wp:term_id>
  <wp:tag_slug>inner</wp:tag_slug>
  <wp:tag_name><![CDATA[inner]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>145809</wp:term_id>
  <wp:tag_slug>interpreter</wp:tag_slug>
  <wp:tag_name><![CDATA[interpreter]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>17504834</wp:term_id>
  <wp:tag_slug>invariance</wp:tag_slug>
  <wp:tag_name><![CDATA[invariance]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2609383</wp:term_id>
  <wp:tag_slug>iterable</wp:tag_slug>
  <wp:tag_name><![CDATA[iterable]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2609382</wp:term_id>
  <wp:tag_slug>iterator</wp:tag_slug>
  <wp:tag_name><![CDATA[iterator]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>457</wp:term_id>
  <wp:tag_slug>javascript</wp:tag_slug>
  <wp:tag_name><![CDATA[javascript]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>57799</wp:term_id>
  <wp:tag_slug>jet</wp:tag_slug>
  <wp:tag_name><![CDATA[jet]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>286941</wp:term_id>
  <wp:tag_slug>jets</wp:tag_slug>
  <wp:tag_name><![CDATA[jets]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>72721</wp:term_id>
  <wp:tag_slug>json</wp:tag_slug>
  <wp:tag_name><![CDATA[json]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>37799</wp:term_id>
  <wp:tag_slug>key</wp:tag_slug>
  <wp:tag_name><![CDATA[key]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>738159</wp:term_id>
  <wp:tag_slug>klang</wp:tag_slug>
  <wp:tag_name><![CDATA[klang]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>172054</wp:term_id>
  <wp:tag_slug>lambda</wp:tag_slug>
  <wp:tag_name><![CDATA[lambda]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1934</wp:term_id>
  <wp:tag_slug>language</wp:tag_slug>
  <wp:tag_name><![CDATA[language]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>24291</wp:term_id>
  <wp:tag_slug>laziness</wp:tag_slug>
  <wp:tag_name><![CDATA[laziness]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>12538</wp:term_id>
  <wp:tag_slug>lazy</wp:tag_slug>
  <wp:tag_name><![CDATA[lazy]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>14608</wp:term_id>
  <wp:tag_slug>list</wp:tag_slug>
  <wp:tag_name><![CDATA[list]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>82701</wp:term_id>
  <wp:tag_slug>macros</wp:tag_slug>
  <wp:tag_name><![CDATA[macros]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5950</wp:term_id>
  <wp:tag_slug>making</wp:tag_slug>
  <wp:tag_name><![CDATA[making]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>40477</wp:term_id>
  <wp:tag_slug>map</wp:tag_slug>
  <wp:tag_name><![CDATA[map]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>30701942</wp:term_id>
  <wp:tag_slug>matchers</wp:tag_slug>
  <wp:tag_name><![CDATA[matchers]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>21686</wp:term_id>
  <wp:tag_slug>medium</wp:tag_slug>
  <wp:tag_name><![CDATA[medium]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>70842</wp:term_id>
  <wp:tag_slug>method</wp:tag_slug>
  <wp:tag_name><![CDATA[method]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>38240</wp:term_id>
  <wp:tag_slug>miles</wp:tag_slug>
  <wp:tag_name><![CDATA[Miles]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>75140</wp:term_id>
  <wp:tag_slug>monad</wp:tag_slug>
  <wp:tag_name><![CDATA[monad]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4779577</wp:term_id>
  <wp:tag_slug>monoid</wp:tag_slug>
  <wp:tag_name><![CDATA[monoid]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4701</wp:term_id>
  <wp:tag_slug>moon</wp:tag_slug>
  <wp:tag_name><![CDATA[moon]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>17894015</wp:term_id>
  <wp:tag_slug>moonrover</wp:tag_slug>
  <wp:tag_name><![CDATA[moonrover]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>113795</wp:term_id>
  <wp:tag_slug>move</wp:tag_slug>
  <wp:tag_name><![CDATA[move]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>87329</wp:term_id>
  <wp:tag_slug>multiple</wp:tag_slug>
  <wp:tag_name><![CDATA[multiple]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>132239</wp:term_id>
  <wp:tag_slug>must</wp:tag_slug>
  <wp:tag_name><![CDATA[must]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5658804</wp:term_id>
  <wp:tag_slug>mutable</wp:tag_slug>
  <wp:tag_name><![CDATA[mutable]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>15130</wp:term_id>
  <wp:tag_slug>neutral</wp:tag_slug>
  <wp:tag_name><![CDATA[neutral]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>103</wp:term_id>
  <wp:tag_slug>news</wp:tag_slug>
  <wp:tag_name><![CDATA[news]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>170788</wp:term_id>
  <wp:tag_slug>nil</wp:tag_slug>
  <wp:tag_name><![CDATA[nil]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4537</wp:term_id>
  <wp:tag_slug>none</wp:tag_slug>
  <wp:tag_name><![CDATA[none]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>32622</wp:term_id>
  <wp:tag_slug>nop</wp:tag_slug>
  <wp:tag_name><![CDATA[nop]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8406</wp:term_id>
  <wp:tag_slug>nothing</wp:tag_slug>
  <wp:tag_name><![CDATA[nothing]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2547</wp:term_id>
  <wp:tag_slug>novedades</wp:tag_slug>
  <wp:tag_name><![CDATA[novedades]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>53983</wp:term_id>
  <wp:tag_slug>null</wp:tag_slug>
  <wp:tag_name><![CDATA[null]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>15792</wp:term_id>
  <wp:tag_slug>object</wp:tag_slug>
  <wp:tag_name><![CDATA[object]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>86909</wp:term_id>
  <wp:tag_slug>off</wp:tag_slug>
  <wp:tag_name><![CDATA[off]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>283374</wp:term_id>
  <wp:tag_slug>operator</wp:tag_slug>
  <wp:tag_name><![CDATA[operator]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>200685</wp:term_id>
  <wp:tag_slug>ops</wp:tag_slug>
  <wp:tag_name><![CDATA[ops]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>209994</wp:term_id>
  <wp:tag_slug>option</wp:tag_slug>
  <wp:tag_name><![CDATA[option]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>94612</wp:term_id>
  <wp:tag_slug>overload</wp:tag_slug>
  <wp:tag_name><![CDATA[overload]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>111500</wp:term_id>
  <wp:tag_slug>paradise</wp:tag_slug>
  <wp:tag_name><![CDATA[paradise]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1076292</wp:term_id>
  <wp:tag_slug>parameter</wp:tag_slug>
  <wp:tag_name><![CDATA[parameter]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5437976</wp:term_id>
  <wp:tag_slug>parametric</wp:tag_slug>
  <wp:tag_name><![CDATA[parametric]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>47812</wp:term_id>
  <wp:tag_slug>parser</wp:tag_slug>
  <wp:tag_name><![CDATA[parser]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1029805</wp:term_id>
  <wp:tag_slug>parsing</wp:tag_slug>
  <wp:tag_name><![CDATA[parsing]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>974729</wp:term_id>
  <wp:tag_slug>partial</wp:tag_slug>
  <wp:tag_name><![CDATA[partial]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>72929</wp:term_id>
  <wp:tag_slug>partition</wp:tag_slug>
  <wp:tag_name><![CDATA[partition]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>40208</wp:term_id>
  <wp:tag_slug>pattern</wp:tag_slug>
  <wp:tag_name><![CDATA[pattern]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8795997</wp:term_id>
  <wp:tag_slug>polymorphic</wp:tag_slug>
  <wp:tag_name><![CDATA[polymorphic]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1187</wp:term_id>
  <wp:tag_slug>post</wp:tag_slug>
  <wp:tag_name><![CDATA[post]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>19</wp:term_id>
  <wp:tag_slug>private</wp:tag_slug>
  <wp:tag_name><![CDATA[private]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>168316</wp:term_id>
  <wp:tag_slug>prize</wp:tag_slug>
  <wp:tag_name><![CDATA[prize]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4897</wp:term_id>
  <wp:tag_slug>product</wp:tag_slug>
  <wp:tag_name><![CDATA[product]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>19956</wp:term_id>
  <wp:tag_slug>property</wp:tag_slug>
  <wp:tag_name><![CDATA[property]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>49774</wp:term_id>
  <wp:tag_slug>props</wp:tag_slug>
  <wp:tag_name><![CDATA[props]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5438112</wp:term_id>
  <wp:tag_slug>rdd</wp:tag_slug>
  <wp:tag_name><![CDATA[rdd]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>847825</wp:term_id>
  <wp:tag_slug>reactive</wp:tag_slug>
  <wp:tag_name><![CDATA[reactive]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5369</wp:term_id>
  <wp:tag_slug>reader</wp:tag_slug>
  <wp:tag_name><![CDATA[reader]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>532575</wp:term_id>
  <wp:tag_slug>receive</wp:tag_slug>
  <wp:tag_name><![CDATA[receive]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>147109</wp:term_id>
  <wp:tag_slug>recover</wp:tag_slug>
  <wp:tag_name><![CDATA[recover]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>39653</wp:term_id>
  <wp:tag_slug>recruitment</wp:tag_slug>
  <wp:tag_name><![CDATA[recruitment]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>40181</wp:term_id>
  <wp:tag_slug>recursive</wp:tag_slug>
  <wp:tag_name><![CDATA[recursive]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2356700</wp:term_id>
  <wp:tag_slug>referential-transparency</wp:tag_slug>
  <wp:tag_name><![CDATA[referential transparency]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>128612</wp:term_id>
  <wp:tag_slug>reflect</wp:tag_slug>
  <wp:tag_name><![CDATA[reflect]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8408</wp:term_id>
  <wp:tag_slug>reflection</wp:tag_slug>
  <wp:tag_name><![CDATA[reflection]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>51535</wp:term_id>
  <wp:tag_slug>registry</wp:tag_slug>
  <wp:tag_name><![CDATA[registry]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6778612</wp:term_id>
  <wp:tag_slug>reify</wp:tag_slug>
  <wp:tag_name><![CDATA[reify]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1784</wp:term_id>
  <wp:tag_slug>resources</wp:tag_slug>
  <wp:tag_name><![CDATA[resources]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>15314</wp:term_id>
  <wp:tag_slug>rest</wp:tag_slug>
  <wp:tag_name><![CDATA[rest]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>90436</wp:term_id>
  <wp:tag_slug>robot</wp:tag_slug>
  <wp:tag_name><![CDATA[robot]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>273788105</wp:term_id>
  <wp:tag_slug>roclas</wp:tag_slug>
  <wp:tag_name><![CDATA[roclas]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>406752</wp:term_id>
  <wp:tag_slug>rover</wp:tag_slug>
  <wp:tag_name><![CDATA[rover]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1094432</wp:term_id>
  <wp:tag_slug>runtime</wp:tag_slug>
  <wp:tag_name><![CDATA[runtime]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>108740</wp:term_id>
  <wp:tag_slug>rx</wp:tag_slug>
  <wp:tag_name><![CDATA[rx]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2755722</wp:term_id>
  <wp:tag_slug>sabin</wp:tag_slug>
  <wp:tag_name><![CDATA[Sabin]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>88391</wp:term_id>
  <wp:tag_slug>satan</wp:tag_slug>
  <wp:tag_name><![CDATA[satan]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>130460</wp:term_id>
  <wp:tag_slug>sbt</wp:tag_slug>
  <wp:tag_name><![CDATA[sbt]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>312256</wp:term_id>
  <wp:tag_slug>scala</wp:tag_slug>
  <wp:tag_name><![CDATA[scala]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7206110</wp:term_id>
  <wp:tag_slug>scalacheck</wp:tag_slug>
  <wp:tag_name><![CDATA[scalacheck]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>279265922</wp:term_id>
  <wp:tag_slug>scalajs</wp:tag_slug>
  <wp:tag_name><![CDATA[scalajs]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>21112530</wp:term_id>
  <wp:tag_slug>scalatest</wp:tag_slug>
  <wp:tag_name><![CDATA[scalatest]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>20470622</wp:term_id>
  <wp:tag_slug>scalaz</wp:tag_slug>
  <wp:tag_name><![CDATA[scalaz]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4356061</wp:term_id>
  <wp:tag_slug>scalera</wp:tag_slug>
  <wp:tag_name><![CDATA[scalera]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>778497</wp:term_id>
  <wp:tag_slug>schema</wp:tag_slug>
  <wp:tag_name><![CDATA[schema]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>15710</wp:term_id>
  <wp:tag_slug>scope</wp:tag_slug>
  <wp:tag_name><![CDATA[scope]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1097</wp:term_id>
  <wp:tag_slug>self</wp:tag_slug>
  <wp:tag_name><![CDATA[self]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5655</wp:term_id>
  <wp:tag_slug>semantic</wp:tag_slug>
  <wp:tag_name><![CDATA[semantic]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1053156</wp:term_id>
  <wp:tag_slug>serializer</wp:tag_slug>
  <wp:tag_name><![CDATA[serializer]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>919494</wp:term_id>
  <wp:tag_slug>setter</wp:tag_slug>
  <wp:tag_name><![CDATA[setter]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>248546</wp:term_id>
  <wp:tag_slug>shapeless</wp:tag_slug>
  <wp:tag_name><![CDATA[shapeless]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>799458</wp:term_id>
  <wp:tag_slug>should</wp:tag_slug>
  <wp:tag_name><![CDATA[should]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>153353721</wp:term_id>
  <wp:tag_slug>showraw</wp:tag_slug>
  <wp:tag_name><![CDATA[showraw]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1209276</wp:term_id>
  <wp:tag_slug>side-effect</wp:tag_slug>
  <wp:tag_name><![CDATA[side effect]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>593055</wp:term_id>
  <wp:tag_slug>simulator</wp:tag_slug>
  <wp:tag_name><![CDATA[simulator]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>32527</wp:term_id>
  <wp:tag_slug>sip</wp:tag_slug>
  <wp:tag_name><![CDATA[sip]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>174</wp:term_id>
  <wp:tag_slug>space</wp:tag_slug>
  <wp:tag_name><![CDATA[space]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>391249</wp:term_id>
  <wp:tag_slug>span</wp:tag_slug>
  <wp:tag_name><![CDATA[span]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>63429</wp:term_id>
  <wp:tag_slug>spark</wp:tag_slug>
  <wp:tag_name><![CDATA[spark]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>439031</wp:term_id>
  <wp:tag_slug>spec</wp:tag_slug>
  <wp:tag_name><![CDATA[spec]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>751848</wp:term_id>
  <wp:tag_slug>spray</wp:tag_slug>
  <wp:tag_name><![CDATA[spray]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>251553</wp:term_id>
  <wp:tag_slug>stack</wp:tag_slug>
  <wp:tag_name><![CDATA[stack]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6553131</wp:term_id>
  <wp:tag_slug>stackoverflow</wp:tag_slug>
  <wp:tag_name><![CDATA[stackoverflow]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>12751</wp:term_id>
  <wp:tag_slug>staff</wp:tag_slug>
  <wp:tag_name><![CDATA[staff]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5562</wp:term_id>
  <wp:tag_slug>state</wp:tag_slug>
  <wp:tag_name><![CDATA[state]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7533944</wp:term_id>
  <wp:tag_slug>stateful</wp:tag_slug>
  <wp:tag_name><![CDATA[stateful]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6724680</wp:term_id>
  <wp:tag_slug>statefull</wp:tag_slug>
  <wp:tag_name><![CDATA[statefull]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>44776735</wp:term_id>
  <wp:tag_slug>statet</wp:tag_slug>
  <wp:tag_name><![CDATA[statet]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>50318</wp:term_id>
  <wp:tag_slug>static</wp:tag_slug>
  <wp:tag_name><![CDATA[static]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>156815</wp:term_id>
  <wp:tag_slug>step</wp:tag_slug>
  <wp:tag_name><![CDATA[step]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>94039</wp:term_id>
  <wp:tag_slug>stream</wp:tag_slug>
  <wp:tag_name><![CDATA[stream]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>45141</wp:term_id>
  <wp:tag_slug>streaming</wp:tag_slug>
  <wp:tag_name><![CDATA[streaming]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>57341728</wp:term_id>
  <wp:tag_slug>structtype</wp:tag_slug>
  <wp:tag_name><![CDATA[StructType]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>113060</wp:term_id>
  <wp:tag_slug>structural</wp:tag_slug>
  <wp:tag_name><![CDATA[structural]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>3522828</wp:term_id>
  <wp:tag_slug>subtype</wp:tag_slug>
  <wp:tag_name><![CDATA[subtype]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>428866</wp:term_id>
  <wp:tag_slug>sum</wp:tag_slug>
  <wp:tag_name><![CDATA[sum]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>22302</wp:term_id>
  <wp:tag_slug>summer</wp:tag_slug>
  <wp:tag_name><![CDATA[summer]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>37440</wp:term_id>
  <wp:tag_slug>super</wp:tag_slug>
  <wp:tag_name><![CDATA[super]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1721018</wp:term_id>
  <wp:tag_slug>syntactic</wp:tag_slug>
  <wp:tag_name><![CDATA[syntactic]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>93280</wp:term_id>
  <wp:tag_slug>syntax</wp:tag_slug>
  <wp:tag_name><![CDATA[syntax]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>753406</wp:term_id>
  <wp:tag_slug>tad</wp:tag_slug>
  <wp:tag_name><![CDATA[TAD]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2500</wp:term_id>
  <wp:tag_slug>tag</wp:tag_slug>
  <wp:tag_name><![CDATA[tag]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>24686602</wp:term_id>
  <wp:tag_slug>takewhile</wp:tag_slug>
  <wp:tag_name><![CDATA[takewhile]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>973174</wp:term_id>
  <wp:tag_slug>tda</wp:tag_slug>
  <wp:tag_name><![CDATA[TDA]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8</wp:term_id>
  <wp:tag_slug>test</wp:tag_slug>
  <wp:tag_name><![CDATA[test]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>3549</wp:term_id>
  <wp:tag_slug>theory</wp:tag_slug>
  <wp:tag_name><![CDATA[theory]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>30930</wp:term_id>
  <wp:tag_slug>tip</wp:tag_slug>
  <wp:tag_name><![CDATA[tip]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>83046</wp:term_id>
  <wp:tag_slug>toolbox</wp:tag_slug>
  <wp:tag_name><![CDATA[toolbox]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>398729</wp:term_id>
  <wp:tag_slug>torre</wp:tag_slug>
  <wp:tag_name><![CDATA[torre]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>48380</wp:term_id>
  <wp:tag_slug>tower</wp:tag_slug>
  <wp:tag_name><![CDATA[tower]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1729</wp:term_id>
  <wp:tag_slug>traduccion</wp:tag_slug>
  <wp:tag_name><![CDATA[traduccion]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>334984</wp:term_id>
  <wp:tag_slug>trait</wp:tag_slug>
  <wp:tag_name><![CDATA[trait]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>86178</wp:term_id>
  <wp:tag_slug>transformation</wp:tag_slug>
  <wp:tag_name><![CDATA[transformation]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>13231</wp:term_id>
  <wp:tag_slug>transition</wp:tag_slug>
  <wp:tag_name><![CDATA[transition]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8349</wp:term_id>
  <wp:tag_slug>translation</wp:tag_slug>
  <wp:tag_name><![CDATA[translation]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5692431</wp:term_id>
  <wp:tag_slug>traversable</wp:tag_slug>
  <wp:tag_name><![CDATA[traversable]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>176028</wp:term_id>
  <wp:tag_slug>tree</wp:tag_slug>
  <wp:tag_name><![CDATA[tree]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>146508</wp:term_id>
  <wp:tag_slug>try</wp:tag_slug>
  <wp:tag_name><![CDATA[try]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2932</wp:term_id>
  <wp:tag_slug>tutorial</wp:tag_slug>
  <wp:tag_name><![CDATA[tutorial]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>599182</wp:term_id>
  <wp:tag_slug>twitter</wp:tag_slug>
  <wp:tag_name><![CDATA[twitter]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>16792</wp:term_id>
  <wp:tag_slug>type</wp:tag_slug>
  <wp:tag_name><![CDATA[type]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2573830</wp:term_id>
  <wp:tag_slug>type-classes</wp:tag_slug>
  <wp:tag_name><![CDATA[type-classes]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1079503</wp:term_id>
  <wp:tag_slug>typed</wp:tag_slug>
  <wp:tag_name><![CDATA[typed]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>125161</wp:term_id>
  <wp:tag_slug>types</wp:tag_slug>
  <wp:tag_name><![CDATA[types]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>278872803</wp:term_id>
  <wp:tag_slug>typetag</wp:tag_slug>
  <wp:tag_name><![CDATA[typetag]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>14785</wp:term_id>
  <wp:tag_slug>typing</wp:tag_slug>
  <wp:tag_name><![CDATA[typing]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5131</wp:term_id>
  <wp:tag_slug>union</wp:tag_slug>
  <wp:tag_name><![CDATA[union]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>3251</wp:term_id>
  <wp:tag_slug>update</wp:tag_slug>
  <wp:tag_name><![CDATA[update]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>478856993</wp:term_id>
  <wp:tag_slug>updatebykey</wp:tag_slug>
  <wp:tag_name><![CDATA[updateByKey]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>185069</wp:term_id>
  <wp:tag_slug>val</wp:tag_slug>
  <wp:tag_name><![CDATA[val]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6636</wp:term_id>
  <wp:tag_slug>value</wp:tag_slug>
  <wp:tag_name><![CDATA[value]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>14387</wp:term_id>
  <wp:tag_slug>values</wp:tag_slug>
  <wp:tag_name><![CDATA[values]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>39749</wp:term_id>
  <wp:tag_slug>var</wp:tag_slug>
  <wp:tag_name><![CDATA[var]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>966214</wp:term_id>
  <wp:tag_slug>variance</wp:tag_slug>
  <wp:tag_name><![CDATA[variance]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>168354</wp:term_id>
  <wp:tag_slug>verano</wp:tag_slug>
  <wp:tag_name><![CDATA[verano]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>10487</wp:term_id>
  <wp:tag_slug>view</wp:tag_slug>
  <wp:tag_name><![CDATA[view]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>326335</wp:term_id>
  <wp:tag_slug>viktor</wp:tag_slug>
  <wp:tag_name><![CDATA[viktor]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4494</wp:term_id>
  <wp:tag_slug>weather</wp:tag_slug>
  <wp:tag_name><![CDATA[weather]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>103446</wp:term_id>
  <wp:tag_slug>welcom</wp:tag_slug>
  <wp:tag_name><![CDATA[welcom]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>603010</wp:term_id>
  <wp:tag_slug>wildcard</wp:tag_slug>
  <wp:tag_name><![CDATA[wildcard]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>19557</wp:term_id>
  <wp:tag_slug>workshop</wp:tag_slug>
  <wp:tag_name><![CDATA[workshop]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1857</wp:term_id>
  <wp:tag_slug>world</wp:tag_slug>
  <wp:tag_name><![CDATA[world]]></wp:tag_name>
</wp:tag>
<wp:term>
  <wp:term_id>23117612</wp:term_id>
  <wp:term_taxonomy>nav_menu</wp:term_taxonomy>
  <wp:term_slug>idioma</wp:term_slug>
  <wp:term_name><![CDATA[Idioma]]></wp:term_name>
</wp:term>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://secure.gravatar.com/blavatar/d02dde0b7a98c9d087d68f2128b25cda?s=96&#038;d=https%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</url>
		<title>Scalera</title>
		<link>https://scalerablog.wordpress.com</link>
	</image>
	<item>
  <title>1236090148868_f</title>
  <link>https://scalerablog.wordpress.com/2015/03/02/bienvenidos/1236090148868_f/#main</link>
  <pubDate>Fri, 27 Feb 2015 23:16:32 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/02/1236090148868_f.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>26</wp:post_id>
  <wp:post_date>2015-02-27 23:16:32</wp:post_date>
  <wp:post_date_gmt>2015-02-27 23:16:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>1236090148868_f</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>25</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/02/1236090148868_f.jpg</wp:attachment_url>
</item>
<item>
  <title>937</title>
  <link>https://scalerablog.wordpress.com/2015/03/02/bienvenidos/attachment/937/#main</link>
  <pubDate>Fri, 27 Feb 2015 23:22:59 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/02/937.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>27</wp:post_id>
  <wp:post_date>2015-02-27 23:22:59</wp:post_date>
  <wp:post_date_gmt>2015-02-27 23:22:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>937</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>25</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/02/937.gif</wp:attachment_url>
</item>
<item>
  <title>cropped-full_scalera-01.png</title>
  <link>https://scalerablog.wordpress.com/cropped-full_scalera-01-png/</link>
  <pubDate>Mon, 02 Mar 2015 20:10:52 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/03/cropped-full_scalera-01.png</guid>
  <description/>
  <content:encoded><![CDATA[http://scalerablog.files.wordpress.com/2015/03/cropped-full_scalera-01.png]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>52</wp:post_id>
  <wp:post_date>2015-03-02 20:10:52</wp:post_date>
  <wp:post_date_gmt>2015-03-02 20:10:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cropped-full_scalera-01-png</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/03/cropped-full_scalera-01.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_context</wp:meta_key>
    <wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_custom_header_last_used_premium/alto</wp:meta_key>
    <wp:meta_value><![CDATA[1425327794]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_custom_header_last_used_pub/twentythirteen</wp:meta_key>
    <wp:meta_value><![CDATA[1432911778]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_custom_header_last_used_pub/cols</wp:meta_key>
    <wp:meta_value><![CDATA[1432911702]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
    <wp:meta_value><![CDATA[pub/twentythirteen]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_custom_header_last_used_pub/kelly</wp:meta_key>
    <wp:meta_value><![CDATA[1432911741]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>KWgharD</title>
  <link>https://scalerablog.wordpress.com/2015/03/10/traversable-ops-fold/kwghard/#main</link>
  <pubDate>Tue, 03 Mar 2015 23:40:29 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/03/kwghard.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>71</wp:post_id>
  <wp:post_date>2015-03-03 23:40:29</wp:post_date>
  <wp:post_date_gmt>2015-03-03 23:40:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>kwghard</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>70</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/03/kwghard.gif</wp:attachment_url>
</item>
<item>
  <title>40HYLZX</title>
  <link>https://scalerablog.wordpress.com/2015/03/10/traversable-ops-fold/40hylzx/#main</link>
  <pubDate>Tue, 03 Mar 2015 23:48:29 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/03/40hylzx.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>72</wp:post_id>
  <wp:post_date>2015-03-03 23:48:29</wp:post_date>
  <wp:post_date_gmt>2015-03-03 23:48:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>40hylzx</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>70</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/03/40hylzx.gif</wp:attachment_url>
</item>
<item>
  <title>nlY1Wxv</title>
  <link>https://scalerablog.wordpress.com/2015/03/10/traversable-ops-fold/nly1wxv/#main</link>
  <pubDate>Wed, 04 Mar 2015 21:29:41 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/03/nly1wxv.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>91</wp:post_id>
  <wp:post_date>2015-03-04 21:29:41</wp:post_date>
  <wp:post_date_gmt>2015-03-04 21:29:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>nly1wxv</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>70</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/03/nly1wxv.gif</wp:attachment_url>
</item>
<item>
  <title>e4tvwy</title>
  <link>https://scalerablog.wordpress.com/2015/03/05/hello-world-3/e4tvwy/#main</link>
  <pubDate>Thu, 05 Mar 2015 22:23:21 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/03/e4tvwy.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>100</wp:post_id>
  <wp:post_date>2015-03-05 22:23:21</wp:post_date>
  <wp:post_date_gmt>2015-03-05 22:23:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>e4tvwy</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>32</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/03/e4tvwy.jpg</wp:attachment_url>
</item>
<item>
  <title>mourinho?</title>
  <link>https://scalerablog.wordpress.com/mourinho/</link>
  <pubDate>Fri, 13 Mar 2015 19:10:44 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/03/mourinho.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>117</wp:post_id>
  <wp:post_date>2015-03-13 19:10:44</wp:post_date>
  <wp:post_date_gmt>2015-03-13 19:10:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>mourinho</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/03/mourinho.gif</wp:attachment_url>
</item>
<item>
  <title>mourinhoOH</title>
  <link>https://scalerablog.wordpress.com/mourinhooh/</link>
  <pubDate>Fri, 13 Mar 2015 19:10:46 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/03/mourinhooh.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>118</wp:post_id>
  <wp:post_date>2015-03-13 19:10:46</wp:post_date>
  <wp:post_date_gmt>2015-03-13 19:10:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>mourinhooh</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/03/mourinhooh.jpg</wp:attachment_url>
</item>
<item>
  <title>mourinhoOK</title>
  <link>https://scalerablog.wordpress.com/mourinhook/</link>
  <pubDate>Fri, 13 Mar 2015 19:10:47 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/03/mourinhook.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>119</wp:post_id>
  <wp:post_date>2015-03-13 19:10:47</wp:post_date>
  <wp:post_date_gmt>2015-03-13 19:10:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>mourinhook</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/03/mourinhook.jpg</wp:attachment_url>
</item>
<item>
  <title>KqsQlDV</title>
  <link>https://scalerablog.wordpress.com/2015/03/25/vals-and-vars/kqsqldv/#main</link>
  <pubDate>Sun, 22 Mar 2015 20:59:06 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/03/kqsqldv.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>140</wp:post_id>
  <wp:post_date>2015-03-22 20:59:06</wp:post_date>
  <wp:post_date_gmt>2015-03-22 20:59:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>kqsqldv</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>75</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/03/kqsqldv.gif</wp:attachment_url>
</item>
<item>
  <title>what-does-the-fox-say-1378489657</title>
  <link>https://scalerablog.wordpress.com/what-does-the-fox-say-1378489657/</link>
  <pubDate>Wed, 25 Mar 2015 19:16:45 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/03/what-does-the-fox-say-1378489657.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>154</wp:post_id>
  <wp:post_date>2015-03-25 19:16:45</wp:post_date>
  <wp:post_date_gmt>2015-03-25 19:16:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>what-does-the-fox-say-1378489657</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/03/what-does-the-fox-say-1378489657.jpg</wp:attachment_url>
</item>
<item>
  <title>superman</title>
  <link>https://scalerablog.wordpress.com/og6kv6/</link>
  <pubDate>Wed, 25 Mar 2015 19:39:26 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/03/og6kv6.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>160</wp:post_id>
  <wp:post_date>2015-03-25 19:39:26</wp:post_date>
  <wp:post_date_gmt>2015-03-25 19:39:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>og6kv6</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/03/og6kv6.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[81583895]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>tGWoYYo</title>
  <link>https://scalerablog.wordpress.com/2015/04/08/tipos-estructurales/tgwoyyo/#main</link>
  <pubDate>Mon, 06 Apr 2015 22:11:05 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/04/tgwoyyo.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>196</wp:post_id>
  <wp:post_date>2015-04-06 22:11:05</wp:post_date>
  <wp:post_date_gmt>2015-04-06 22:11:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tgwoyyo</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>183</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/04/tgwoyyo.gif</wp:attachment_url>
</item>
<item>
  <title>1zltyts</title>
  <link>https://scalerablog.wordpress.com/2015/04/22/traversable-ops-map-flatten-flatmap/1zltyts/#main</link>
  <pubDate>Thu, 09 Apr 2015 14:05:36 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/04/1zltyts.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>210</wp:post_id>
  <wp:post_date>2015-04-09 14:05:36</wp:post_date>
  <wp:post_date_gmt>2015-04-09 14:05:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>1zltyts</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>185</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/04/1zltyts.gif</wp:attachment_url>
</item>
<item>
  <title>wtf</title>
  <link>https://scalerablog.wordpress.com/wtf/</link>
  <pubDate>Tue, 14 Apr 2015 18:00:16 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/04/wtf.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>224</wp:post_id>
  <wp:post_date>2015-04-14 18:00:16</wp:post_date>
  <wp:post_date_gmt>2015-04-14 18:00:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>wtf</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/04/wtf.jpg</wp:attachment_url>
</item>
<item>
  <title>understand</title>
  <link>https://scalerablog.wordpress.com/understand/</link>
  <pubDate>Tue, 14 Apr 2015 18:05:24 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/04/understand.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>226</wp:post_id>
  <wp:post_date>2015-04-14 18:05:24</wp:post_date>
  <wp:post_date_gmt>2015-04-14 18:05:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>understand</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/04/understand.gif</wp:attachment_url>
</item>
<item>
  <title>briconsejo</title>
  <link>https://scalerablog.wordpress.com/2015/04/29/hello-world-en-akka-parte-i/briconsejo/#main</link>
  <pubDate>Thu, 16 Apr 2015 13:39:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/04/briconsejo.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>240</wp:post_id>
  <wp:post_date>2015-04-16 13:39:00</wp:post_date>
  <wp:post_date_gmt>2015-04-16 13:39:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>briconsejo</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>235</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/04/briconsejo.jpg</wp:attachment_url>
</item>
<item>
  <title>wtfshit</title>
  <link>https://scalerablog.wordpress.com/2015/05/06/hello-world-en-akka-parte-ii-la-venganza/wtfshit/#main</link>
  <pubDate>Mon, 04 May 2015 09:35:48 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/05/wtfshit.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>279</wp:post_id>
  <wp:post_date>2015-05-04 09:35:48</wp:post_date>
  <wp:post_date_gmt>2015-05-04 09:35:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>wtfshit</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>266</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/05/wtfshit.jpg</wp:attachment_url>
</item>
<item>
  <title>tellExampleSender</title>
  <link>https://scalerablog.wordpress.com/2015/05/06/hello-world-en-akka-parte-ii-la-venganza/tellexamplesender/#main</link>
  <pubDate>Mon, 04 May 2015 15:56:52 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/05/tellexamplesender.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>289</wp:post_id>
  <wp:post_date>2015-05-04 15:56:52</wp:post_date>
  <wp:post_date_gmt>2015-05-04 15:56:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tellexamplesender</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>266</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/05/tellexamplesender.png</wp:attachment_url>
</item>
<item>
  <title>60965939</title>
  <link>https://scalerablog.wordpress.com/2015/05/13/nothing-else-matters/attachment/60965939/#main</link>
  <pubDate>Tue, 12 May 2015 21:12:29 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/05/60965939.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>293</wp:post_id>
  <wp:post_date>2015-05-12 21:12:29</wp:post_date>
  <wp:post_date_gmt>2015-05-12 21:12:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>60965939</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>203</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/05/60965939.jpg</wp:attachment_url>
</item>
<item>
  <title>scala-hierarchy</title>
  <link>https://scalerablog.wordpress.com/2015/05/13/nothing-else-matters/scala-hierarchy/#main</link>
  <pubDate>Tue, 12 May 2015 21:12:31 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/05/scala-hierarchy.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>294</wp:post_id>
  <wp:post_date>2015-05-12 21:12:31</wp:post_date>
  <wp:post_date_gmt>2015-05-12 21:12:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scala-hierarchy</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>203</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/05/scala-hierarchy.png</wp:attachment_url>
</item>
<item>
  <title>satan</title>
  <link>https://scalerablog.wordpress.com/2015/05/20/implicito-lisa-o-ilicito/satan/#main</link>
  <pubDate>Sun, 17 May 2015 12:25:22 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/05/satan.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>316</wp:post_id>
  <wp:post_date>2015-05-17 14:25:22</wp:post_date>
  <wp:post_date_gmt>2015-05-17 12:25:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>satan</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>313</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/05/satan.jpg</wp:attachment_url>
</item>
<item>
  <title>giphy</title>
  <link>https://scalerablog.wordpress.com/2015/05/20/implicito-lisa-o-ilicito/giphy/#main</link>
  <pubDate>Sun, 17 May 2015 13:18:42 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/05/giphy.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>320</wp:post_id>
  <wp:post_date>2015-05-17 15:18:42</wp:post_date>
  <wp:post_date_gmt>2015-05-17 13:18:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>giphy</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>313</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/05/giphy.gif</wp:attachment_url>
</item>
<item>
  <title>tumblr_inline_nn0gciK58f1qbhmtm_500</title>
  <link>https://scalerablog.wordpress.com/2015/05/29/torre-de-babel/tumblr_inline_nn0gcik58f1qbhmtm_500/#main</link>
  <pubDate>Mon, 18 May 2015 16:29:18 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/05/tumblr_inline_nn0gcik58f1qbhmtm_500.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>329</wp:post_id>
  <wp:post_date>2015-05-18 18:29:18</wp:post_date>
  <wp:post_date_gmt>2015-05-18 16:29:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tumblr_inline_nn0gcik58f1qbhmtm_500</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>328</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/05/tumblr_inline_nn0gcik58f1qbhmtm_500.gif</wp:attachment_url>
</item>
<item>
  <title>tumblr_mgf4arKIkk1rfq0ndo1_500</title>
  <link>https://scalerablog.wordpress.com/2015/06/03/tipos-existenciales-a-que-huelen-las-nubes/tumblr_mgf4arkikk1rfq0ndo1_500/#main</link>
  <pubDate>Fri, 22 May 2015 19:05:57 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/05/tumblr_mgf4arkikk1rfq0ndo1_500.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>387</wp:post_id>
  <wp:post_date>2015-05-22 21:05:57</wp:post_date>
  <wp:post_date_gmt>2015-05-22 19:05:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tumblr_mgf4arkikk1rfq0ndo1_500</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>201</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/05/tumblr_mgf4arkikk1rfq0ndo1_500.jpg</wp:attachment_url>
</item>
<item>
  <title>91662</title>
  <link>https://scalerablog.wordpress.com/2015/06/03/tipos-existenciales-a-que-huelen-las-nubes/attachment/91662/#main</link>
  <pubDate>Fri, 22 May 2015 19:16:04 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/05/91662.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>388</wp:post_id>
  <wp:post_date>2015-05-22 21:16:04</wp:post_date>
  <wp:post_date_gmt>2015-05-22 19:16:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>91662</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>201</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/05/91662.jpg</wp:attachment_url>
</item>
<item>
  <title>982aad317c237d9fa918138b1c7bd020_1024</title>
  <link>https://scalerablog.wordpress.com/2015/06/03/tipos-existenciales-a-que-huelen-las-nubes/982aad317c237d9fa918138b1c7bd020_1024/#main</link>
  <pubDate>Fri, 22 May 2015 19:17:56 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/05/982aad317c237d9fa918138b1c7bd020_1024.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>389</wp:post_id>
  <wp:post_date>2015-05-22 21:17:56</wp:post_date>
  <wp:post_date_gmt>2015-05-22 19:17:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>982aad317c237d9fa918138b1c7bd020_1024</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>201</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/05/982aad317c237d9fa918138b1c7bd020_1024.jpg</wp:attachment_url>
</item>
<item>
  <title>my-eyes-messed-up_o_386883</title>
  <link>https://scalerablog.wordpress.com/2015/06/03/tipos-existenciales-a-que-huelen-las-nubes/my-eyes-messed-up_o_386883/#main</link>
  <pubDate>Fri, 22 May 2015 19:27:48 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/05/my-eyes-messed-up_o_386883.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>390</wp:post_id>
  <wp:post_date>2015-05-22 21:27:48</wp:post_date>
  <wp:post_date_gmt>2015-05-22 19:27:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>my-eyes-messed-up_o_386883</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>201</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/05/my-eyes-messed-up_o_386883.gif</wp:attachment_url>
</item>
<item>
  <title>meme-functions</title>
  <link>https://scalerablog.wordpress.com/2015/05/27/expresiones-lambda-a-cholon/meme-functions/#main</link>
  <pubDate>Sat, 23 May 2015 11:33:18 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/05/meme-functions.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>400</wp:post_id>
  <wp:post_date>2015-05-23 13:33:18</wp:post_date>
  <wp:post_date_gmt>2015-05-23 11:33:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>meme-functions</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>245</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/05/meme-functions.jpg</wp:attachment_url>
</item>
<item>
  <title>desk_flip</title>
  <link>https://scalerablog.wordpress.com/2015/06/10/los-7-pecados-capitales-de-las-expresiones-lambda/desk_flip/#main</link>
  <pubDate>Tue, 26 May 2015 13:14:41 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/05/desk_flip.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>419</wp:post_id>
  <wp:post_date>2015-05-26 15:14:41</wp:post_date>
  <wp:post_date_gmt>2015-05-26 13:14:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>desk_flip</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>416</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/05/desk_flip.jpg</wp:attachment_url>
</item>
<item>
  <title>Flag_of_United_Kingdom</title>
  <link>https://scalerablog.wordpress.com/flag_of_united_kingdom/</link>
  <pubDate>Tue, 26 May 2015 13:45:45 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/05/flag_of_united_kingdom.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>421</wp:post_id>
  <wp:post_date>2015-05-26 15:45:45</wp:post_date>
  <wp:post_date_gmt>2015-05-26 13:45:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>flag_of_united_kingdom</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/05/flag_of_united_kingdom.png</wp:attachment_url>
</item>
<item>
  <title>Spain Flag</title>
  <link>https://scalerablog.wordpress.com/spain-flag/</link>
  <pubDate>Tue, 26 May 2015 13:46:16 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/05/spain-flag.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>423</wp:post_id>
  <wp:post_date>2015-05-26 15:46:16</wp:post_date>
  <wp:post_date_gmt>2015-05-26 13:46:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>spain-flag</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/05/spain-flag.png</wp:attachment_url>
</item>
<item>
  <title>timallen</title>
  <link>https://scalerablog.wordpress.com/2015/05/29/hello-world-in-akka-part-i/timallen/#main</link>
  <pubDate>Fri, 29 May 2015 07:41:58 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/05/timallen.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>447</wp:post_id>
  <wp:post_date>2015-05-29 09:41:58</wp:post_date>
  <wp:post_date_gmt>2015-05-29 07:41:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>timallen</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>371</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/05/timallen.jpg</wp:attachment_url>
</item>
<item>
  <title>scalera_logo</title>
  <link>https://scalerablog.wordpress.com/scalera_logo/</link>
  <pubDate>Fri, 29 May 2015 15:26:27 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/05/scalera_logo1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>454</wp:post_id>
  <wp:post_date>2015-05-29 17:26:27</wp:post_date>
  <wp:post_date_gmt>2015-05-29 15:26:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scalera_logo</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/05/scalera_logo1.png</wp:attachment_url>
</item>
<item>
  <title>I-know-that-feel (1)</title>
  <link>https://scalerablog.wordpress.com/2015/06/17/bounds-a-view-over-your-context/i-know-that-feel-1/#main</link>
  <pubDate>Thu, 04 Jun 2015 17:17:17 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/06/i-know-that-feel-1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>465</wp:post_id>
  <wp:post_date>2015-06-04 19:17:17</wp:post_date>
  <wp:post_date_gmt>2015-06-04 17:17:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>i-know-that-feel-1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>322</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/06/i-know-that-feel-1.jpg</wp:attachment_url>
</item>
<item>
  <title>post-28553-Steve-Jobs-mind-blown-gif-HD-T-pVbd</title>
  <link>https://scalerablog.wordpress.com/2015/06/17/bounds-a-view-over-your-context/post-28553-steve-jobs-mind-blown-gif-hd-t-pvbd/#main</link>
  <pubDate>Thu, 04 Jun 2015 17:26:43 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/06/post-28553-steve-jobs-mind-blown-gif-hd-t-pvbd.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>466</wp:post_id>
  <wp:post_date>2015-06-04 19:26:43</wp:post_date>
  <wp:post_date_gmt>2015-06-04 17:26:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>post-28553-steve-jobs-mind-blown-gif-hd-t-pvbd</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>322</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/06/post-28553-steve-jobs-mind-blown-gif-hd-t-pvbd.gif</wp:attachment_url>
</item>
<item>
  <title>56248419</title>
  <link>https://scalerablog.wordpress.com/2015/06/24/capturando-excepciones-en-scala-el-tipo-try/attachment/56248419/#main</link>
  <pubDate>Fri, 19 Jun 2015 09:26:59 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/06/56248419.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>490</wp:post_id>
  <wp:post_date>2015-06-19 11:26:59</wp:post_date>
  <wp:post_date_gmt>2015-06-19 09:26:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>56248419</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>488</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/06/56248419.jpg</wp:attachment_url>
</item>
<item>
  <title>b784c8abf46a00e87ee8365535645ba0</title>
  <link>https://scalerablog.wordpress.com/2015/07/01/testing-en-scala/b784c8abf46a00e87ee8365535645ba0/#main</link>
  <pubDate>Tue, 30 Jun 2015 19:02:57 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/07/b784c8abf46a00e87ee8365535645ba0.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>514</wp:post_id>
  <wp:post_date>2015-06-30 21:02:57</wp:post_date>
  <wp:post_date_gmt>2015-06-30 19:02:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>b784c8abf46a00e87ee8365535645ba0</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>497</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/07/b784c8abf46a00e87ee8365535645ba0.gif</wp:attachment_url>
</item>
<item>
  <title>t4ilmu</title>
  <link>https://scalerablog.wordpress.com/2015/07/08/tarta-de-scala-al-estilo-tradicional/t4ilmu/#main</link>
  <pubDate>Tue, 07 Jul 2015 14:38:25 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/07/t4ilmu.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>527</wp:post_id>
  <wp:post_date>2015-07-07 16:38:25</wp:post_date>
  <wp:post_date_gmt>2015-07-07 14:38:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>t4ilmu</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>523</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/07/t4ilmu.jpg</wp:attachment_url>
</item>
<item>
  <title>o7azz</title>
  <link>https://scalerablog.wordpress.com/2015/07/15/testing-en-scala-ii-scalacheck/o7azz/#main</link>
  <pubDate>Tue, 14 Jul 2015 18:37:44 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/07/o7azz.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>545</wp:post_id>
  <wp:post_date>2015-07-14 20:37:44</wp:post_date>
  <wp:post_date_gmt>2015-07-14 18:37:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>o7azz</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>540</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/07/o7azz.jpg</wp:attachment_url>
</item>
<item>
  <title>msJ7n5l</title>
  <link>https://scalerablog.wordpress.com/2015/07/29/granizado-de-scala/msj7n5l/#main</link>
  <pubDate>Tue, 28 Jul 2015 18:22:07 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/07/msj7n5l.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>588</wp:post_id>
  <wp:post_date>2015-07-28 20:22:07</wp:post_date>
  <wp:post_date_gmt>2015-07-28 18:22:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>msj7n5l</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>558</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/07/msj7n5l.gif</wp:attachment_url>
</item>
<item>
  <title>ME23N9T</title>
  <link>https://scalerablog.wordpress.com/2015/07/29/granizado-de-scala/me23n9t/#main</link>
  <pubDate>Tue, 28 Jul 2015 18:23:05 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/07/me23n9t.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>589</wp:post_id>
  <wp:post_date>2015-07-28 20:23:05</wp:post_date>
  <wp:post_date_gmt>2015-07-28 18:23:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>me23n9t</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>558</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/07/me23n9t.gif</wp:attachment_url>
</item>
<item>
  <title>odtUdEE</title>
  <link>https://scalerablog.wordpress.com/2015/07/29/granizado-de-scala/odtudee/#main</link>
  <pubDate>Tue, 28 Jul 2015 18:23:55 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/07/odtudee.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>590</wp:post_id>
  <wp:post_date>2015-07-28 20:23:55</wp:post_date>
  <wp:post_date_gmt>2015-07-28 18:23:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>odtudee</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>558</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/07/odtudee.gif</wp:attachment_url>
</item>
<item>
  <title>i-dont-understand</title>
  <link>https://scalerablog.wordpress.com/2015/09/09/teoria-de-cate-movidas-monoides/i-dont-understand/#main</link>
  <pubDate>Sun, 06 Sep 2015 19:19:32 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/09/i-dont-understand.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>608</wp:post_id>
  <wp:post_date>2015-09-06 21:19:32</wp:post_date>
  <wp:post_date_gmt>2015-09-06 19:19:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>i-dont-understand</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>598</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/09/i-dont-understand.jpg</wp:attachment_url>
</item>
<item>
  <title>jesse-pinkman-yeah-bitch-science</title>
  <link>https://scalerablog.wordpress.com/2015/09/09/teoria-de-cate-movidas-monoides/jesse-pinkman-yeah-bitch-science/#main</link>
  <pubDate>Sun, 06 Sep 2015 19:21:02 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/09/jesse-pinkman-yeah-bitch-science.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>609</wp:post_id>
  <wp:post_date>2015-09-06 21:21:02</wp:post_date>
  <wp:post_date_gmt>2015-09-06 19:21:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>jesse-pinkman-yeah-bitch-science</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>598</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/09/jesse-pinkman-yeah-bitch-science.jpg</wp:attachment_url>
</item>
<item>
  <title>46196561</title>
  <link>https://scalerablog.wordpress.com/2015/09/09/teoria-de-cate-movidas-monoides/attachment/46196561/#main</link>
  <pubDate>Sun, 06 Sep 2015 19:26:54 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/09/46196561.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>612</wp:post_id>
  <wp:post_date>2015-09-06 21:26:54</wp:post_date>
  <wp:post_date_gmt>2015-09-06 19:26:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>46196561</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>598</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/09/46196561.jpg</wp:attachment_url>
</item>
<item>
  <title>scalavarianceinheritance</title>
  <link>https://scalerablog.wordpress.com/2015/09/16/variance-in-scala-luke-he-is-your-father-too/scalavarianceinheritance/#main</link>
  <pubDate>Mon, 07 Sep 2015 13:35:03 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/09/scalavarianceinheritance.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>622</wp:post_id>
  <wp:post_date>2015-09-07 15:35:03</wp:post_date>
  <wp:post_date_gmt>2015-09-07 13:35:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>scalavarianceinheritance</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>621</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/09/scalavarianceinheritance.png</wp:attachment_url>
</item>
<item>
  <title>35dunb</title>
  <link>https://scalerablog.wordpress.com/2015/09/23/for-comprehension-y-la-importancia-de-la-belleza/35dunb/#main</link>
  <pubDate>Sat, 19 Sep 2015 11:35:14 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/09/35dunb.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>685</wp:post_id>
  <wp:post_date>2015-09-19 13:35:14</wp:post_date>
  <wp:post_date_gmt>2015-09-19 11:35:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>35dunb</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>676</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/09/35dunb.jpg</wp:attachment_url>
</item>
<item>
  <title>44b0bd758f8ee5c81362923f0d5c8e017c9ddf623925e60c29a4c015b89fbb45</title>
  <link>https://scalerablog.wordpress.com/2015/10/07/teoria-de-cate-movidas-monadas/44b0bd758f8ee5c81362923f0d5c8e017c9ddf623925e60c29a4c015b89fbb45/#main</link>
  <pubDate>Sun, 04 Oct 2015 17:50:14 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/10/44b0bd758f8ee5c81362923f0d5c8e017c9ddf623925e60c29a4c015b89fbb45.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>712</wp:post_id>
  <wp:post_date>2015-10-04 19:50:14</wp:post_date>
  <wp:post_date_gmt>2015-10-04 17:50:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>44b0bd758f8ee5c81362923f0d5c8e017c9ddf623925e60c29a4c015b89fbb45</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>711</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/10/44b0bd758f8ee5c81362923f0d5c8e017c9ddf623925e60c29a4c015b89fbb45.jpg</wp:attachment_url>
</item>
<item>
  <title>Bdu68sACYAAfkkr</title>
  <link>https://scalerablog.wordpress.com/2015/10/07/teoria-de-cate-movidas-monadas/bdu68sacyaafkkr/#main</link>
  <pubDate>Sun, 04 Oct 2015 18:10:41 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/10/bdu68sacyaafkkr.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>714</wp:post_id>
  <wp:post_date>2015-10-04 20:10:41</wp:post_date>
  <wp:post_date_gmt>2015-10-04 18:10:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>bdu68sacyaafkkr</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>711</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/10/bdu68sacyaafkkr.jpg</wp:attachment_url>
</item>
<item>
  <title>942</title>
  <link>https://scalerablog.wordpress.com/2015/10/14/traversable-ops-partition-span-y-otras-chicas-del-monton/attachment/942/#main</link>
  <pubDate>Tue, 13 Oct 2015 21:55:07 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/10/942.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>754</wp:post_id>
  <wp:post_date>2015-10-13 23:55:07</wp:post_date>
  <wp:post_date_gmt>2015-10-13 21:55:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>942</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>750</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/10/942.jpg</wp:attachment_url>
</item>
<item>
  <title>2395690</title>
  <link>https://scalerablog.wordpress.com/2015/10/14/traversable-ops-partition-span-y-otras-chicas-del-monton/attachment/2395690/#main</link>
  <pubDate>Tue, 13 Oct 2015 22:10:25 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/10/2395690.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>757</wp:post_id>
  <wp:post_date>2015-10-14 00:10:25</wp:post_date>
  <wp:post_date_gmt>2015-10-13 22:10:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>2395690</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>750</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/10/2395690.jpg</wp:attachment_url>
</item>
<item>
  <title>Elluch-alguien-volo-sobre-el-nido-del-cuco</title>
  <link>https://scalerablog.wordpress.com/2015/10/28/codemotion-2015-akka-volo-sobre-el-nido-del-future/elluch-alguien-volo-sobre-el-nido-del-cuco/#main</link>
  <pubDate>Tue, 13 Oct 2015 22:27:45 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/10/elluch-alguien-volo-sobre-el-nido-del-cuco.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>762</wp:post_id>
  <wp:post_date>2015-10-14 00:27:45</wp:post_date>
  <wp:post_date_gmt>2015-10-13 22:27:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>elluch-alguien-volo-sobre-el-nido-del-cuco</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>761</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/10/elluch-alguien-volo-sobre-el-nido-del-cuco.jpg</wp:attachment_url>
</item>
<item>
  <title>6400b4d28d122bfa1876eda6a27d169e</title>
  <link>https://scalerablog.wordpress.com/2015/10/21/teoria-de-cate-movidas-monada-reader/6400b4d28d122bfa1876eda6a27d169e/#main</link>
  <pubDate>Sat, 17 Oct 2015 16:54:57 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/10/6400b4d28d122bfa1876eda6a27d169e.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>776</wp:post_id>
  <wp:post_date>2015-10-17 18:54:57</wp:post_date>
  <wp:post_date_gmt>2015-10-17 16:54:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>6400b4d28d122bfa1876eda6a27d169e</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>773</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/10/6400b4d28d122bfa1876eda6a27d169e.jpg</wp:attachment_url>
</item>
<item>
  <title>4252082-curry</title>
  <link>https://scalerablog.wordpress.com/2015/11/04/curry-por-favor/4252082-curry/#main</link>
  <pubDate>Mon, 02 Nov 2015 22:54:58 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/11/4252082-curry.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>805</wp:post_id>
  <wp:post_date>2015-11-03 00:54:58</wp:post_date>
  <wp:post_date_gmt>2015-11-02 22:54:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>4252082-curry</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>796</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/11/4252082-curry.jpg</wp:attachment_url>
</item>
<item>
  <title>17c8f21e452c8161a7f19b8fc3f7d1a5</title>
  <link>https://scalerablog.wordpress.com/2015/11/11/varias-formas-de-matar-a-un-actor/17c8f21e452c8161a7f19b8fc3f7d1a5/#main</link>
  <pubDate>Sun, 08 Nov 2015 17:23:49 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/11/17c8f21e452c8161a7f19b8fc3f7d1a5.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>817</wp:post_id>
  <wp:post_date>2015-11-08 19:23:49</wp:post_date>
  <wp:post_date_gmt>2015-11-08 17:23:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>17c8f21e452c8161a7f19b8fc3f7d1a5</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>815</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/11/17c8f21e452c8161a7f19b8fc3f7d1a5.jpg</wp:attachment_url>
</item>
<item>
  <title>tumblr_mk2nondHhx1qasthro1_r1_500</title>
  <link>https://scalerablog.wordpress.com/2015/11/11/varias-formas-de-matar-a-un-actor/tumblr_mk2nondhhx1qasthro1_r1_500/#main</link>
  <pubDate>Sun, 08 Nov 2015 17:30:30 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/11/tumblr_mk2nondhhx1qasthro1_r1_500.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>819</wp:post_id>
  <wp:post_date>2015-11-08 19:30:30</wp:post_date>
  <wp:post_date_gmt>2015-11-08 17:30:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tumblr_mk2nondhhx1qasthro1_r1_500</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>815</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/11/tumblr_mk2nondhhx1qasthro1_r1_500.gif</wp:attachment_url>
</item>
<item>
  <title>jack-30-rock-heart-attack-study</title>
  <link>https://scalerablog.wordpress.com/2015/11/11/varias-formas-de-matar-a-un-actor/jack-30-rock-heart-attack-study/#main</link>
  <pubDate>Sun, 08 Nov 2015 17:30:40 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/11/jack-30-rock-heart-attack-study.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>820</wp:post_id>
  <wp:post_date>2015-11-08 19:30:40</wp:post_date>
  <wp:post_date_gmt>2015-11-08 17:30:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>jack-30-rock-heart-attack-study</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>815</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/11/jack-30-rock-heart-attack-study.gif</wp:attachment_url>
</item>
<item>
  <title>tumblr_n6da8xJdLi1t4x1pbo1_500</title>
  <link>https://scalerablog.wordpress.com/2015/11/11/varias-formas-de-matar-a-un-actor/tumblr_n6da8xjdli1t4x1pbo1_500/#main</link>
  <pubDate>Sun, 08 Nov 2015 17:30:49 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/11/tumblr_n6da8xjdli1t4x1pbo1_500.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>821</wp:post_id>
  <wp:post_date>2015-11-08 19:30:49</wp:post_date>
  <wp:post_date_gmt>2015-11-08 17:30:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tumblr_n6da8xjdli1t4x1pbo1_500</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>815</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/11/tumblr_n6da8xjdli1t4x1pbo1_500.gif</wp:attachment_url>
</item>
<item>
  <title>scalerawantsyou</title>
  <link>https://scalerablog.wordpress.com/2015/11/25/scalera-wants-you/scalerawantsyou/#main</link>
  <pubDate>Fri, 13 Nov 2015 17:46:02 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/11/scalerawantsyou.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>836</wp:post_id>
  <wp:post_date>2015-11-13 19:46:02</wp:post_date>
  <wp:post_date_gmt>2015-11-13 17:46:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>scalerawantsyou</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>832</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/11/scalerawantsyou.png</wp:attachment_url>
</item>
<item>
  <title>tshirt_proposals-02</title>
  <link>https://scalerablog.wordpress.com/2015/11/25/scalera-wants-you/tshirt_proposals-02/#main</link>
  <pubDate>Fri, 13 Nov 2015 17:56:14 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/11/tshirt_proposals-02.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>839</wp:post_id>
  <wp:post_date>2015-11-13 19:56:14</wp:post_date>
  <wp:post_date_gmt>2015-11-13 17:56:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tshirt_proposals-02</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>832</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/11/tshirt_proposals-02.png</wp:attachment_url>
</item>
<item>
  <title>post3_sp</title>
  <link>https://scalerablog.wordpress.com/2015/11/18/shapeless-introduccion-y-hlists-parte-1/post3_sp/#main</link>
  <pubDate>Wed, 18 Nov 2015 09:23:34 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/11/post3_sp.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>881</wp:post_id>
  <wp:post_date>2015-11-18 11:23:34</wp:post_date>
  <wp:post_date_gmt>2015-11-18 09:23:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>post3_sp</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>858</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/11/post3_sp.jpg</wp:attachment_url>
</item>
<item>
  <title>post3_en</title>
  <link>https://scalerablog.wordpress.com/2015/11/23/shapeless-introduction-and-hlists-part-1/post3_en/#main</link>
  <pubDate>Mon, 23 Nov 2015 10:12:28 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/11/post3_en.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>941</wp:post_id>
  <wp:post_date>2015-11-23 12:12:28</wp:post_date>
  <wp:post_date_gmt>2015-11-23 10:12:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>post3_en</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>895</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/11/post3_en.jpg</wp:attachment_url>
</item>
<item>
  <title>post3_en</title>
  <link>https://scalerablog.wordpress.com/2015/11/23/shapeless-introduction-and-hlists-part-1/post3_en-2/#main</link>
  <pubDate>Mon, 23 Nov 2015 10:13:10 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/11/post3_en1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>942</wp:post_id>
  <wp:post_date>2015-11-23 12:13:10</wp:post_date>
  <wp:post_date_gmt>2015-11-23 10:13:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>post3_en-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>895</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/11/post3_en1.jpg</wp:attachment_url>
</item>
<item>
  <title>iZcUNxH</title>
  <link>https://scalerablog.wordpress.com/2015/12/02/scalajs-javascript-para-paganos-backend-parte-i/izcunxh/#main</link>
  <pubDate>Tue, 01 Dec 2015 10:10:09 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/12/izcunxh.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>944</wp:post_id>
  <wp:post_date>2015-12-01 12:10:09</wp:post_date>
  <wp:post_date_gmt>2015-12-01 10:10:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>izcunxh</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>720</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/12/izcunxh.gif</wp:attachment_url>
</item>
<item>
  <title>49775773</title>
  <link>https://scalerablog.wordpress.com/2015/12/02/scalajs-javascript-para-paganos-backend-parte-i/attachment/49775773/#main</link>
  <pubDate>Tue, 01 Dec 2015 10:16:26 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/12/49775773.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>945</wp:post_id>
  <wp:post_date>2015-12-01 12:16:26</wp:post_date>
  <wp:post_date_gmt>2015-12-01 10:16:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>49775773</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>720</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/12/49775773.jpg</wp:attachment_url>
</item>
<item>
  <title>a7cae161ea16b893de40b46acadedad9b57373e6ebacfe9cd4bb57a32686517a</title>
  <link>https://scalerablog.wordpress.com/2015/12/09/leyendo-el-futuro-en-scala/a7cae161ea16b893de40b46acadedad9b57373e6ebacfe9cd4bb57a32686517a/#main</link>
  <pubDate>Mon, 07 Dec 2015 11:15:22 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/12/a7cae161ea16b893de40b46acadedad9b57373e6ebacfe9cd4bb57a32686517a.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>971</wp:post_id>
  <wp:post_date>2015-12-07 13:15:22</wp:post_date>
  <wp:post_date_gmt>2015-12-07 11:15:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>a7cae161ea16b893de40b46acadedad9b57373e6ebacfe9cd4bb57a32686517a</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>970</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/12/a7cae161ea16b893de40b46acadedad9b57373e6ebacfe9cd4bb57a32686517a.jpg</wp:attachment_url>
</item>
<item>
  <title>crystal-ball-failure_300px</title>
  <link>https://scalerablog.wordpress.com/2015/12/09/leyendo-el-futuro-en-scala/crystal-ball-failure_300px/#main</link>
  <pubDate>Mon, 07 Dec 2015 11:15:31 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/12/crystal-ball-failure_300px.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>972</wp:post_id>
  <wp:post_date>2015-12-07 13:15:31</wp:post_date>
  <wp:post_date_gmt>2015-12-07 11:15:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>crystal-ball-failure_300px</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>970</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/12/crystal-ball-failure_300px.jpg</wp:attachment_url>
</item>
<item>
  <title>62517760</title>
  <link>https://scalerablog.wordpress.com/2015/12/16/classtag-class-y-batallitas-de-la-mili/attachment/62517760/#main</link>
  <pubDate>Wed, 16 Dec 2015 09:23:33 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/12/62517760.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1179</wp:post_id>
  <wp:post_date>2015-12-16 11:23:33</wp:post_date>
  <wp:post_date_gmt>2015-12-16 09:23:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>62517760</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1170</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/12/62517760.jpg</wp:attachment_url>
</item>
<item>
  <title>137134463824621</title>
  <link>https://scalerablog.wordpress.com/2015/12/16/classtag-class-y-batallitas-de-la-mili/attachment/137134463824621/#main</link>
  <pubDate>Wed, 16 Dec 2015 09:28:13 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/12/137134463824621.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1182</wp:post_id>
  <wp:post_date>2015-12-16 11:28:13</wp:post_date>
  <wp:post_date_gmt>2015-12-16 09:28:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>137134463824621</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1170</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/12/137134463824621.png</wp:attachment_url>
</item>
<item>
  <title>7KpyLAZ</title>
  <link>https://scalerablog.wordpress.com/2015/12/23/y-prospero-ano-nuevo/7kpylaz/#main</link>
  <pubDate>Wed, 16 Dec 2015 16:58:22 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/12/7kpylaz.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1193</wp:post_id>
  <wp:post_date>2015-12-16 18:58:22</wp:post_date>
  <wp:post_date_gmt>2015-12-16 16:58:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>7kpylaz</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1192</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/12/7kpylaz.png</wp:attachment_url>
</item>
<item>
  <title>so-you-have-nljuav</title>
  <link>https://scalerablog.wordpress.com/2015/12/23/y-prospero-ano-nuevo/so-you-have-nljuav/#main</link>
  <pubDate>Wed, 16 Dec 2015 16:58:45 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/12/so-you-have-nljuav.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1194</wp:post_id>
  <wp:post_date>2015-12-16 18:58:45</wp:post_date>
  <wp:post_date_gmt>2015-12-16 16:58:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>so-you-have-nljuav</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1192</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/12/so-you-have-nljuav.jpg</wp:attachment_url>
</item>
<item>
  <title>7f8ee8ed1b232537580e66e4acbf0a22</title>
  <link>https://scalerablog.wordpress.com/2015/12/23/y-prospero-ano-nuevo/7f8ee8ed1b232537580e66e4acbf0a22/#main</link>
  <pubDate>Thu, 17 Dec 2015 11:56:32 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/12/7f8ee8ed1b232537580e66e4acbf0a22.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1202</wp:post_id>
  <wp:post_date>2015-12-17 13:56:32</wp:post_date>
  <wp:post_date_gmt>2015-12-17 11:56:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>7f8ee8ed1b232537580e66e4acbf0a22</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1192</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/12/7f8ee8ed1b232537580e66e4acbf0a22.jpg</wp:attachment_url>
</item>
<item>
  <title>39a0aab0c5b10c7204bc38788dfac55d02140c91f8b07ea4f036d673eec97379</title>
  <link>https://scalerablog.wordpress.com/2016/01/18/distributed-key-value-registry-with-akka-clustering/39a0aab0c5b10c7204bc38788dfac55d02140c91f8b07ea4f036d673eec97379/#main</link>
  <pubDate>Sat, 19 Dec 2015 18:04:32 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2015/12/39a0aab0c5b10c7204bc38788dfac55d02140c91f8b07ea4f036d673eec97379.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1228</wp:post_id>
  <wp:post_date>2015-12-19 20:04:32</wp:post_date>
  <wp:post_date_gmt>2015-12-19 18:04:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>39a0aab0c5b10c7204bc38788dfac55d02140c91f8b07ea4f036d673eec97379</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1215</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2015/12/39a0aab0c5b10c7204bc38788dfac55d02140c91f8b07ea4f036d673eec97379.jpg</wp:attachment_url>
</item>
<item>
  <title>akka clustering graph</title>
  <link>https://scalerablog.wordpress.com/2016/01/13/registro-clave-valor-distribuido-con-akka-clustering/akka-clustering-graph/#main</link>
  <pubDate>Sat, 19 Dec 2015 18:41:36 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/01/akka-clustering-graph.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1233</wp:post_id>
  <wp:post_date>2015-12-19 20:41:36</wp:post_date>
  <wp:post_date_gmt>2015-12-19 18:41:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>akka-clustering-graph</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1230</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/01/akka-clustering-graph.png</wp:attachment_url>
</item>
<item>
  <title>forever-alone-moon_o_1332879</title>
  <link>https://scalerablog.wordpress.com/2016/01/20/scalera-challenge-de-la-tierra-a-la-luna/forever-alone-moon_o_1332879/#main</link>
  <pubDate>Tue, 05 Jan 2016 15:57:28 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/01/forever-alone-moon_o_1332879.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1262</wp:post_id>
  <wp:post_date>2016-01-05 17:57:28</wp:post_date>
  <wp:post_date_gmt>2016-01-05 15:57:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>forever-alone-moon_o_1332879</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>893</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/01/forever-alone-moon_o_1332879.jpg</wp:attachment_url>
</item>
<item>
  <title>moonrover_example</title>
  <link>https://scalerablog.wordpress.com/2016/01/20/scalera-challenge-de-la-tierra-a-la-luna/moonrover_example/#main</link>
  <pubDate>Tue, 05 Jan 2016 16:03:29 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/01/moonrover_example.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1263</wp:post_id>
  <wp:post_date>2016-01-05 18:03:29</wp:post_date>
  <wp:post_date_gmt>2016-01-05 16:03:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>moonrover_example</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>893</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/01/moonrover_example.png</wp:attachment_url>
</item>
<item>
  <title>haters</title>
  <link>https://scalerablog.wordpress.com/2016/02/03/tipos-dinamicos/haters/#main</link>
  <pubDate>Fri, 08 Jan 2016 12:03:36 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/01/haters.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1281</wp:post_id>
  <wp:post_date>2016-01-08 14:03:36</wp:post_date>
  <wp:post_date_gmt>2016-01-08 12:03:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>haters</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1277</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/01/haters.jpg</wp:attachment_url>
</item>
<item>
  <title>star_wars_graffiti_21</title>
  <link>https://scalerablog.wordpress.com/2016/01/27/graffiti-rules-hello-word-con-spray/star_wars_graffiti_21/#main</link>
  <pubDate>Sun, 24 Jan 2016 11:01:09 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/01/star_wars_graffiti_21.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1299</wp:post_id>
  <wp:post_date>2016-01-24 13:01:09</wp:post_date>
  <wp:post_date_gmt>2016-01-24 11:01:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>star_wars_graffiti_21</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1298</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/01/star_wars_graffiti_21.jpg</wp:attachment_url>
</item>
<item>
  <title>computers20graffiti20error20technology20explorer201440x90020wallpaper_www-wallpaperfo-com_98</title>
  <link>https://scalerablog.wordpress.com/2016/01/27/graffiti-rules-hello-word-con-spray/computers20graffiti20error20technology20explorer201440x90020wallpaper_www-wallpaperfo-com_98/#main</link>
  <pubDate>Sun, 24 Jan 2016 11:08:48 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/01/computers20graffiti20error20technology20explorer201440x90020wallpaper_www-wallpaperfo-com_98.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1306</wp:post_id>
  <wp:post_date>2016-01-24 13:08:48</wp:post_date>
  <wp:post_date_gmt>2016-01-24 11:08:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>computers20graffiti20error20technology20explorer201440x90020wallpaper_www-wallpaperfo-com_98</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1298</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/01/computers20graffiti20error20technology20explorer201440x90020wallpaper_www-wallpaperfo-com_98.jpg</wp:attachment_url>
</item>
<item>
  <title>tumblr_mamiy1kp641qcp26yo1_400</title>
  <link>https://scalerablog.wordpress.com/2016/01/27/graffiti-rules-hello-word-con-spray/tumblr_mamiy1kp641qcp26yo1_400/#main</link>
  <pubDate>Sun, 24 Jan 2016 12:04:36 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/01/tumblr_mamiy1kp641qcp26yo1_400.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1378</wp:post_id>
  <wp:post_date>2016-01-24 14:04:36</wp:post_date>
  <wp:post_date_gmt>2016-01-24 12:04:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tumblr_mamiy1kp641qcp26yo1_400</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1298</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/01/tumblr_mamiy1kp641qcp26yo1_400.gif</wp:attachment_url>
</item>
<item>
  <title>giphy</title>
  <link>https://scalerablog.wordpress.com/2016/02/17/un-pequeno-paseo-por-scalarx/giphy-2/#main</link>
  <pubDate>Sat, 13 Feb 2016 11:27:52 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/02/giphy.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1466</wp:post_id>
  <wp:post_date>2016-02-13 13:27:52</wp:post_date>
  <wp:post_date_gmt>2016-02-13 11:27:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>giphy-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1435</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/02/giphy.gif</wp:attachment_url>
</item>
<item>
  <title>hqdefault</title>
  <link>https://scalerablog.wordpress.com/2016/02/17/un-pequeno-paseo-por-scalarx/hqdefault/#main</link>
  <pubDate>Sat, 13 Feb 2016 11:29:42 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/02/hqdefault.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1468</wp:post_id>
  <wp:post_date>2016-02-13 13:29:42</wp:post_date>
  <wp:post_date_gmt>2016-02-13 11:29:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>hqdefault</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1435</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/02/hqdefault.jpg</wp:attachment_url>
</item>
<item>
  <title>Lenny-Listening-The-Simpsons</title>
  <link>https://scalerablog.wordpress.com/2016/02/24/y-el-oscar-al-mejor-scalero-revelacion-es-para/lenny-listening-the-simpsons/#main</link>
  <pubDate>Sun, 14 Feb 2016 17:40:38 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/02/lenny-listening-the-simpsons.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1553</wp:post_id>
  <wp:post_date>2016-02-14 19:40:38</wp:post_date>
  <wp:post_date_gmt>2016-02-14 17:40:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>lenny-listening-the-simpsons</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1550</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/02/lenny-listening-the-simpsons.gif</wp:attachment_url>
</item>
<item>
  <title>tumblr_nqg2m1V47l1s9y3qio2_250</title>
  <link>https://scalerablog.wordpress.com/2016/02/24/y-el-oscar-al-mejor-scalero-revelacion-es-para/tumblr_nqg2m1v47l1s9y3qio2_250/#main</link>
  <pubDate>Sun, 14 Feb 2016 17:42:08 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/02/tumblr_nqg2m1v47l1s9y3qio2_250.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1554</wp:post_id>
  <wp:post_date>2016-02-14 19:42:08</wp:post_date>
  <wp:post_date_gmt>2016-02-14 17:42:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tumblr_nqg2m1v47l1s9y3qio2_250</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1550</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/02/tumblr_nqg2m1v47l1s9y3qio2_250.gif</wp:attachment_url>
</item>
<item>
  <title>austinpowers</title>
  <link>https://scalerablog.wordpress.com/2016/03/09/scalera-tips-var-inmutable-vs-val-mutable/austinpowers/#main</link>
  <pubDate>Tue, 16 Feb 2016 13:44:48 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/03/austinpowers.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1676</wp:post_id>
  <wp:post_date>2016-02-16 15:44:48</wp:post_date>
  <wp:post_date_gmt>2016-02-16 13:44:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>austinpowers</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1568</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/03/austinpowers.png</wp:attachment_url>
</item>
<item>
  <title>giphy</title>
  <link>https://scalerablog.wordpress.com/2016/03/02/un-pequeno-paseo-por-scalarx-parte-ii/giphy-3/#main</link>
  <pubDate>Mon, 29 Feb 2016 17:02:14 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/03/giphy.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1707</wp:post_id>
  <wp:post_date>2016-02-29 19:02:14</wp:post_date>
  <wp:post_date_gmt>2016-02-29 17:02:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>giphy-3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1703</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/03/giphy.gif</wp:attachment_url>
</item>
<item>
  <title>giphy1</title>
  <link>https://scalerablog.wordpress.com/2016/03/16/scalera-tips-default-parameters-and-overload/giphy1/#main</link>
  <pubDate>Fri, 11 Mar 2016 12:12:59 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/03/giphy1.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1802</wp:post_id>
  <wp:post_date>2016-03-11 14:12:59</wp:post_date>
  <wp:post_date_gmt>2016-03-11 12:12:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>giphy1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1798</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/03/giphy1.gif</wp:attachment_url>
</item>
<item>
  <title>giphy2</title>
  <link>https://scalerablog.wordpress.com/2016/03/16/scalera-tips-default-parameters-and-overload/giphy2/#main</link>
  <pubDate>Fri, 11 Mar 2016 12:13:39 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/03/giphy2.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1805</wp:post_id>
  <wp:post_date>2016-03-11 14:13:39</wp:post_date>
  <wp:post_date_gmt>2016-03-11 12:13:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>giphy2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1798</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/03/giphy2.gif</wp:attachment_url>
</item>
<item>
  <title>giphy</title>
  <link>https://scalerablog.wordpress.com/2016/03/23/scalera-tips-como-no-modificar-el-estado-de-tu-actor/giphy-4/#main</link>
  <pubDate>Thu, 17 Mar 2016 16:12:22 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/03/giphy3.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1846</wp:post_id>
  <wp:post_date>2016-03-17 18:12:22</wp:post_date>
  <wp:post_date_gmt>2016-03-17 16:12:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>giphy-4</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1566</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/03/giphy3.gif</wp:attachment_url>
</item>
<item>
  <title>bill_murray_gif_1</title>
  <link>https://scalerablog.wordpress.com/2016/03/23/scalera-tips-como-no-modificar-el-estado-de-tu-actor/bill_murray_gif_1/#main</link>
  <pubDate>Thu, 17 Mar 2016 16:12:53 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/03/bill_murray_gif_1.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1847</wp:post_id>
  <wp:post_date>2016-03-17 18:12:53</wp:post_date>
  <wp:post_date_gmt>2016-03-17 16:12:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>bill_murray_gif_1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1566</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/03/bill_murray_gif_1.gif</wp:attachment_url>
</item>
<item>
  <title>giphy (1)</title>
  <link>https://scalerablog.wordpress.com/2016/04/06/spark-streaming-twitter-analytics-al-gusto/giphy-1/#main</link>
  <pubDate>Wed, 23 Mar 2016 15:49:47 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/04/giphy-1.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1870</wp:post_id>
  <wp:post_date>2016-03-23 17:49:47</wp:post_date>
  <wp:post_date_gmt>2016-03-23 15:49:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>giphy-1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1862</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/04/giphy-1.gif</wp:attachment_url>
</item>
<item>
  <title>idwzlyrarjaylstrg8q7</title>
  <link>https://scalerablog.wordpress.com/2016/04/06/spark-streaming-twitter-analytics-al-gusto/idwzlyrarjaylstrg8q7/#main</link>
  <pubDate>Wed, 23 Mar 2016 15:50:26 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/04/idwzlyrarjaylstrg8q7.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1871</wp:post_id>
  <wp:post_date>2016-03-23 17:50:26</wp:post_date>
  <wp:post_date_gmt>2016-03-23 15:50:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>idwzlyrarjaylstrg8q7</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1862</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/04/idwzlyrarjaylstrg8q7.gif</wp:attachment_url>
</item>
<item>
  <title>funny-meme-super-lazy1</title>
  <link>https://scalerablog.wordpress.com/2016/03/30/spark-operaciones-basicas-con-rdds/funny-meme-super-lazy1/#main</link>
  <pubDate>Mon, 28 Mar 2016 13:33:52 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/03/funny-meme-super-lazy1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2003</wp:post_id>
  <wp:post_date>2016-03-28 15:33:52</wp:post_date>
  <wp:post_date_gmt>2016-03-28 13:33:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>funny-meme-super-lazy1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1968</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/03/funny-meme-super-lazy1.jpg</wp:attachment_url>
</item>
<item>
  <title>aad69873-6bcc-4a0d-84eb-abe375f34c6c</title>
  <link>https://scalerablog.wordpress.com/2016/03/30/spark-operaciones-basicas-con-rdds/aad69873-6bcc-4a0d-84eb-abe375f34c6c/#main</link>
  <pubDate>Mon, 28 Mar 2016 13:48:31 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/03/aad69873-6bcc-4a0d-84eb-abe375f34c6c.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2030</wp:post_id>
  <wp:post_date>2016-03-28 15:48:31</wp:post_date>
  <wp:post_date_gmt>2016-03-28 13:48:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>aad69873-6bcc-4a0d-84eb-abe375f34c6c</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1968</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/03/aad69873-6bcc-4a0d-84eb-abe375f34c6c.gif</wp:attachment_url>
</item>
<item>
  <title>simpliest_automaton</title>
  <link>https://scalerablog.wordpress.com/2016/04/18/scala-one-language-to-rule-them-all-i/simpliest_automaton/#main</link>
  <pubDate>Tue, 29 Mar 2016 10:10:53 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/03/simpliest_automaton.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2227</wp:post_id>
  <wp:post_date>2016-03-29 12:10:53</wp:post_date>
  <wp:post_date_gmt>2016-03-29 10:10:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>simpliest_automaton</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1043</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/03/simpliest_automaton.png</wp:attachment_url>
</item>
<item>
  <title>mutable_state</title>
  <link>https://scalerablog.wordpress.com/2016/04/18/scala-one-language-to-rule-them-all-i/mutable_state/#main</link>
  <pubDate>Tue, 29 Mar 2016 10:11:33 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/03/mutable_state.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2228</wp:post_id>
  <wp:post_date>2016-03-29 12:11:33</wp:post_date>
  <wp:post_date_gmt>2016-03-29 10:11:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>mutable_state</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1043</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/03/mutable_state.png</wp:attachment_url>
</item>
<item>
  <title>state_transition</title>
  <link>https://scalerablog.wordpress.com/2016/04/18/scala-one-language-to-rule-them-all-i/state_transition/#main</link>
  <pubDate>Tue, 29 Mar 2016 10:11:58 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/03/state_transition.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2229</wp:post_id>
  <wp:post_date>2016-03-29 12:11:58</wp:post_date>
  <wp:post_date_gmt>2016-03-29 10:11:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>state_transition</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1043</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/03/state_transition.png</wp:attachment_url>
</item>
<item>
  <title>shootfoot</title>
  <link>https://scalerablog.wordpress.com/2016/04/18/scala-one-language-to-rule-them-all-i/shootfoot/#main</link>
  <pubDate>Tue, 29 Mar 2016 10:12:43 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/03/shootfoot.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2230</wp:post_id>
  <wp:post_date>2016-03-29 12:12:43</wp:post_date>
  <wp:post_date_gmt>2016-03-29 10:12:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>shootfoot</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1043</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/03/shootfoot.gif</wp:attachment_url>
</item>
<item>
  <title>Acerca de</title>
  <link>https://scalerablog.wordpress.com/acerca-de/</link>
  <pubDate>Wed, 25 Feb 2015 14:07:50 +0000</pubDate>
  <dc:creator>scalerablog</dc:creator>
  <guid isPermaLink="false">http://scalerablog.wordpress.com/?page_id=1</guid>
  <description/>
  <content:encoded><![CDATA[This is an example of a page. Unlike posts, which are displayed on your blog’s front page in the order they’re published, pages are better suited for more timeless content that you want to be easily accessible, like your About or Contact information. Click the Edit link to make changes to this page or <a title="Direct link to Add New Page in your Dashboard" href="https://wordpress.com/page">add another page</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1</wp:post_id>
  <wp:post_date>2015-02-25 14:07:50</wp:post_date>
  <wp:post_date_gmt>2015-02-25 14:07:50</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>acerca-de</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Bienvenidos</title>
  <link>https://scalerablog.wordpress.com/2015/03/02/bienvenidos/</link>
  <pubDate>Mon, 02 Mar 2015 13:00:36 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=25</guid>
  <description/>
  <content:encoded><![CDATA[¿Otro blog de Scala ¬¬ ? Pues sí, pero en castellano.

<a href="https://scalerablog.files.wordpress.com/2015/02/1236090148868_f.jpg"><img class="alignnone  wp-image-26" src="https://scalerablog.files.wordpress.com/2015/02/1236090148868_f.jpg?w=300" alt="1236090148868_f" width="239" height="238" /></a>

Hace ya más de 3 años, cuando comenzamos a descubrir Scala en el trabajo (los valientes) nos dimos cuenta de que la documentación que había era escasa, y la poca que había manejaba un lenguaje tan frío, tan carente de amor humano....no se entendía, vaya.

Después de unos años de andadura, se han creado meetups, se organizan charlas, se invitan a desarrolladores de la jet-set del mundillo para dar conferencias ... una auténtica fiebre. Sin embargo, el mercado aún adolece de una falta de programadores duchos en el lenguaje, que no solamente sepan cambiar la sintaxis de Java por la de Scala, sino también el chip a funcional, que resulta tan necesario para poder sentirse cómodo con <del>este lenguaje del demonio</del> la criaturita.

<a href="https://scalerablog.files.wordpress.com/2015/02/937.gif"><img class="alignnone size-medium wp-image-27" src="https://scalerablog.files.wordpress.com/2015/02/937.gif?w=300" alt="937" width="300" height="180" /></a>

Retomando este mismo argumento hace unos días con mi compañero, vimos que la necesidad, aún no siendo tan urgente, sigue existiendo. Cada vez más gente quiere acercarse al lenguaje o a la programación funcional en general y sigue resultando costoso: faltan tips, faqs, errores frecuentes...

Es justo esa carencia la que pretendemos cubrir, poniendo a vuestra disposición un poco de nuestro tiempo y muchas ganas.

De modo que, ¡al turrón! :-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>25</wp:post_id>
  <wp:post_date>2015-03-02 13:00:36</wp:post_date>
  <wp:post_date_gmt>2015-03-02 13:00:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>bienvenidos</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="bienvenidos"><![CDATA[bienvenidos]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="inicial"><![CDATA[inicial]]></category>
  <category domain="post_tag" nicename="post"><![CDATA[post]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>draftfeedback_requests</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:24:"d.vallejo.nava@gmail.com";a:3:{s:3:"key";s:13:"54f0ffe4043a4";s:4:"time";s:10:"1425080292";s:7:"user_id";s:8:"59615419";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>draft_feedback</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:24:"d.vallejo.nava@gmail.com";a:1:{i:0;a:2:{s:4:"time";s:10:"1425125816";s:7:"content";s:915:"jajajajaja me meo con el O Realmente LOL

Está cojonudo!

Solo cambiaría algunas erratas de sintaxis. El resto lo dejaría tal cual. Está genial :D

Te pongo las que he visto yo (no sé si puedo editarlo yo mismo así que...):

- Hace ya más 3 años => Hace ya más de 3 años
- autentica => auténtica
- Retomando este mismo argumento hace unos días con mi compañero, vimos que la necesidad, aún no siento tan urgente, sigue existiendo: cada vez más gente quiere acercarse al lenguaje o la programación funcional en general y sigue resultando costoso: faltan tips, faqs, errores frecuentes… =>
Retomando este mismo argumento hace unos días con mi compañero, vimos que la necesidad, aún no siendo tan urgente, sigue existiendo. Cada vez más gente quiere acercarse al lenguaje o la programación funcional en general y sigue resultando costoso: faltan tips, faqs, errores frecuentes…


Y ya está :)";}}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:3064583607;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/eKzoJi4Hen]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Hello World!</title>
  <link>https://scalerablog.wordpress.com/2015/03/05/hello-world-3/</link>
  <pubDate>Thu, 05 Mar 2015 21:21:09 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=32</guid>
  <description/>
  <content:encoded><![CDATA[¿Qué es lo primero que se suele hacer cuando se empieza a utilizar un lenguaje de programación? Efectivamente, un Hello World. Para poder hacer un Hello World en Scala es necesario conocer dos conceptos fundamentales:
<ul>
	<li>¿Cómo realizar aplicaciones ejecutables?</li>
</ul>
¡Fácil! Solo tenemos que tener un objeto que herede de <strong><em>App</em></strong>. Para definir un objeto es necesario utilizar la palabra reservada <strong><em>object</em></strong>. Para aplicar herencia se usa la palabra reservada <strong>extends</strong>.
<ul>
	<li>¿Cómo puedo imprimir un mensaje por pantalla?</li>
</ul>
Podríamos usar un nombre conciso y rápido de escribir como <em>System.out.println</em>, pero desgraciadamente debemos usar la función <strong><em>println</em></strong>.

Ahora que tenemos los dos ingredientes necesarios, vamos allá:

[code language="scala"]

object HelloWorld extends App {

  println(&quot;Hello World!&quot;)

}

[/code]

Vale...y ahora, ¿cómo lo ejecuto?

Lo primero es poner extensión a nuestro maravilloso primer fichero de código. Casualmente, en un ataque de originalidad sin igual, los ficheros de código scala tienen extensión <em>.scala</em>.

Una vez tenemos el fichero, necesitamos alguna herramienta para trabajar con él. Una de las opciones para compilar y ejecutar código Scala es <strong>SBT</strong> (Simple Build Tool). Es similar a Maven o Ant. Permite agregar dependencias y definir con qué versión de Scala queremos trabajar. Algunos IDE's como Intellij lo llevan integrado.

¿Cómo instalar SBT?
<ul>
	<li><a title="MAC" href="http://www.scala-sbt.org/release/tutorial/Installing-sbt-on-Mac.html" target="_blank">MAC</a></li>
	<li><a title="LINUX" href="http://www.scala-sbt.org/release/tutorial/Installing-sbt-on-Linux.html" target="_blank">LINUX</a></li>
	<li><a title="Windows" href="http://www.scala-sbt.org/release/tutorial/Installing-sbt-on-Windows.html" target="_blank">WINDOWS</a></li>
</ul>
¿Cuáles son los comandos básicos de SBT?
<ul>
	<li><strong><em>compile</em></strong>: compila los fuentes un proyecto</li>
	<li><strong><em>test:compile</em></strong>: compila los tests de un proyecto. En caso de ser necesario, compilará los fuentes también.</li>
	<li><strong><em>run</em></strong>: ejecuta una aplicación. En caso de ser necesario, compilará los fuentes.</li>
	<li><strong><em>test</em></strong>: ejecuta los tests de un proyecto.En caso de ser necesario, compilará los fuentes y los tests.</li>
</ul>
Para ejecutar nuestro Hello World basta con lanzar sbt en el directorio donde tengamos el fichero .scala y escribir el comando "run".

Ahora esperamos

...

...

...

<a href="https://scalerablog.files.wordpress.com/2015/03/e4tvwy.jpg"><img class="alignnone size-medium wp-image-100" src="https://scalerablog.files.wordpress.com/2015/03/e4tvwy.jpg?w=300" alt="e4tvwy" width="300" height="221" /></a>

...

...

¿Hola?

Si es la primera vez que utilizas Scala, SBT se bajará todas las dependencias necesarias para ejecutar y compilar código Scala. En función de la conexión a Internet, puede tardar un rato. Pero solo será la primera vez.

Y ya está! Primer programa en Scala. Fácil ¿no?]]></content:encoded>
  <excerpt:encoded><![CDATA[Primer programa en Scala: un Hello World.]]></excerpt:encoded>
  <wp:post_id>32</wp:post_id>
  <wp:post_date>2015-03-05 21:21:09</wp:post_date>
  <wp:post_date_gmt>2015-03-05 21:21:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hello-world-3</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="app"><![CDATA[app]]></category>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="hello"><![CDATA[hello]]></category>
  <category domain="post_tag" nicename="object"><![CDATA[object]]></category>
  <category domain="post_tag" nicename="sbt"><![CDATA[sbt]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="world"><![CDATA[world]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/gZRcxNQXAP]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:3064583607;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Pattern Matching en Scala</title>
  <link>https://scalerablog.wordpress.com/?p=38</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=38</guid>
  <description/>
  <content:encoded><![CDATA[Pattern Matching es el amigo de toda la vida que has conseguido incluir en tu grupo de amigos de la universidad, que acaba siendo invitado a la boda de tu hermano y que lo mismo le ves en la ópera como en un concierto de Iron Maiden. El Pattern Matching es ese tío que siempre encaja :)

El Pattern Matching consta de dos elementos básicos: una expresión a evaluar, una serie de acciones que realizar en función de si encaa

http://www.ripley.cl/wcsstore/ripleycl_CAT_AS/Attachment/WOP/2000347154594/2000347154594-2.jpg

Vamos a ver un ejemplo sencillo:

val someValue: Int = 1

[code language="scala"]
someValue match {
  case 0 =&gt; println(&quot;It's not zero,man...&quot;)
  case 1 =&gt; println(&quot;yeah!&quot;)
  case _ =&gt; println(&quot;If other cases didn't match...&quot;)
}
[/code]

En este caso, primero es definida un valor al cual se le asocia un 1.
A continuación, se realiza un pattern matching. Existen tres distintas vías de ejecución:
<ul>
	<li>Si el valor es 0 se mostrará por pantalla "It´s not zero, man...".</li>
	<li>Si el valor es 1 se mostrará por pantalla "yeah!"</li>
	<li>En cualquier otro caso se mostrará: "If other cases didn´t match..."</li>
</ul>
En este caso, el código devolverá un "yeah!" molón como una casa.

Para las personas que vengan de Java esto les recordará mucho a un switch. Sin embargo, el pattern matching permite mucho más. Vamos a ver unos ejemplos más complejos:

case class Wheel(inch: Float)

case class Car(brand: String, wheelType: Wheel)

val mySundaysCar: Car = Car("Tiaf Fanda", Wheel(28))

[code language="scala"]
mySundaysCar match {
  case Car(&quot;Ferrari&quot;, _) =&gt; println(&quot;You wish it was a Ferrari&quot;)
  case Car(_, Wheel(35)) =&gt; println(&quot;Of course it's not a tractor...&quot;)
  case Car(_, Wheel(size)) if size &gt; 10 =&gt; println(&quot;Maybe a tank?&quot;)
  case Car(_, Wheel(size)) =&gt; println(&quot;Actual wheel size is &quot; + size)
  case car: Car =&gt; println(&quot;Ok, we were assuming this was a car...&quot;)
  case `mySundaysCar` =&gt; println(&quot;... oh, wait! We were assuming this was my sunday's car!&quot;)
  case _ =&gt; println(&quot;Don't know what to do with this car&quot;)
}
[/code]

http://blog.originate.com/images/scala_pattern_match_meme.jpg
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>38</wp:post_id>
  <wp:post_date>2015-03-01 18:47:48</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Usar nulls no es una Option</title>
  <link>https://scalerablog.wordpress.com/2015/03/16/usar-nulls-no-es-una-option/</link>
  <pubDate>Mon, 16 Mar 2015 20:08:20 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=48</guid>
  <description/>
  <content:encoded><![CDATA[Este blog va dedicado a todas aquellas personas que odian los nulls.
¿Por qué existen los NullsPointerException? ¿Por qué tenemos que trabajar con nulls?
¿Por qué? O como diría Mou: ¿Pug qué?

<a href="https://scalerablog.files.wordpress.com/2015/03/mourinho.gif"><img class="  wp-image-91 aligncenter" src="https://scalerablog.files.wordpress.com/2015/03/mourinho.gif" alt="nlY1Wxv" width="268" height="201" /></a>
Señores, los programadores de Scala somos unos haters de los nulls. Nosotros trabajamos con el tipo <em>Option</em> :)

<strong>¿Qué es un Option?</strong>

Un <em>Option</em> es un tipo parametrizado que puede tener dos posibles valores:
<ul>
	<li>Some(T)</li>
	<li>None</li>
</ul>
Por ejemplo, un <em>Option[Int]</em> puede ser <em>Some(1),</em> <em>Some(123456),</em> <em>None...</em>

<strong>¿Y qué tiene que ver esto con los nulls?</strong>

Podemos encapsular los <em>nulls</em> en <em>Option</em>, de manera que en vez de trabajar directamente con <em>nulls</em>, trabajamos con un tipo preparado para devolver valor nulos.

[code language="scala"]
Option(null) === None
[/code]

No más explosiones de punteros a null o comprobaciones del tipo <em>if myValue == null.</em>

<a href="https://scalerablog.files.wordpress.com/2015/03/mourinhooh.jpg"><img class="  wp-image-91 aligncenter" src="https://scalerablog.files.wordpress.com/2015/03/mourinhooh.jpg" alt="nlY1Wxv" width="248" height="248" /></a>

Imaginemos el típico método que devuelve un valor de un mapa:

[code language="scala"]
val m = 
  Map(
    1 -&gt; &quot;el breikin dance&quot;, 
    2 -&gt; &quot;el crusaito&quot;, 
    3 -&gt; &quot;el maikel jacson&quot;, 
    4 -&gt; &quot;el robocó&quot;
  )
[/code]

Si no trabajasemos con Option tendríamos que comprobar si una clave existe antes de pedir su valor.

[code language="scala"]
if(m.contains(1))
  println(&quot;El paso de baile es: &quot; + m(1))
else
  println(&quot;No existe ese paso de baile&quot;)
[/code]

Sin embargo, podemos pedirle al mapa que nos devuelva el valor directamente en un <em>Option</em>, y en caso de que no exista, este <em>Option</em> será <em>None</em>.

[code language="scala"]
m.get(1) //Devolverá Some(&quot;el breikin dance&quot;)
m.get(5) //Devolverá None
[/code]

<strong>¿Cómo se trabaja con el tipo <em>Option</em>?</strong>

Existen varias formas de trabajar con esta estructura tan maja.

Existe el método <em>getOrElse</em>. Este método devolverá el valor del <em>Option</em> (en caso de ser un <em>Some</em>) o bien devolverá lo que le pasemos como argumento a este método.
Un ejemplos sencillo:

[code language="scala"]
m.get(1).getOrElse(&quot;Paquito el chocolatero&quot;)
[/code]

Otra posibilidad es utilizar <em>Pattern Matching</em>:

[code language="scala"]
m.get(1) match {
  case Some(danceStep) =&gt; 
    println(&quot;Soy el amo de la pista bailando: &quot; + danceStep)
  case None =&gt;
    println(&quot;Soy de los que me quedo mirando en la barra&quot;)
}
[/code]

También es posible utilizar el método <em>fold</em>. El método <em>fold</em>, a diferencia del método <em>getOrElse</em> (y al igual que el pattern matching), permite aplicar alguna función al método devuelto. El primer argumento de la función (llamado <em>ifEmpty</em>) recibirá el resultado que se devolverá en caso de que el <em>Option</em> sea <em>None</em>. El segundo argumento recibe una función, la cual definiremos para saber que resultado devolver en caso de que el <em>Option</em> tenga un valor.

[code language="scala"]
m.get(1).fold(
  ifEmpty = println(&quot;A mi lo de bailar no me va mucho&quot;)){
  step =&gt; println(s&quot;Me rompí la cadera bailando $step&quot;)
}
[/code]

Y para los functional lovers (un saludo para ellos), no hay que olvidar que un <em>Option</em> es una mónada y podemos hacer transformaciones, por ejemplo con <em>map</em>, <em>flatmaps</em> o, aplicando un poco de azucar sintáctico, <em>for comprehension</em>:

[code language="scala"]
for {
  first &lt;- m.get(1)
  second &lt;- m.get(2)
} yield s&quot;Empiezo con $first y termino con $second&quot;
[/code]

Existen otras estructuras parecidas de las que hablaremos en futuros posts: <em>Either</em>, <em>Try</em> ... pero tiempo al tiempo.

Así que, recuerda: Si usas <em>Option</em> los niños sonríen, los pajarillos cantan y los nulls desaparecen :)

<a href="https://scalerablog.files.wordpress.com/2015/03/mourinhook.jpg"><img class="  wp-image-91 aligncenter" src="https://scalerablog.files.wordpress.com/2015/03/mourinhook.jpg" alt="nlY1Wxv" width="350" height="208" /></a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>48</wp:post_id>
  <wp:post_date>2015-03-16 20:08:20</wp:post_date>
  <wp:post_date_gmt>2015-03-16 20:08:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>usar-nulls-no-es-una-option</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="option"><![CDATA[option]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_facebook</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/uYAxIRXaxO]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:3064583607;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>1</wp:comment_id>
    <wp:comment_author><![CDATA[mapman]]></wp:comment_author>
    <wp:comment_author_email>mapman@mapman.map</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>83.34.238.31</wp:comment_author_IP>
    <wp:comment_date>2015-03-22 10:58:37</wp:comment_date>
    <wp:comment_date_gmt>2015-03-22 10:58:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Los mapas también tienen su propio getOrElse, que uno pensando en options siempre se olvida!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1427021917.1543920040130615234375;s:7:"message";s:30:"Akismet borró este comentario";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1427056678</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1427056678</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1427026159.4228570461273193359375;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1427056678.92156696319580078125;s:7:"message";s:55:"jpaniego ha cambiado su estado de comentario a approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-03-22 10:58:37</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>2</wp:comment_id>
    <wp:comment_author><![CDATA[Traversable ops &#8211; Map + Flatten = Flatmap | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/04/22/traversable-ops-map-flatten-flatmap/</wp:comment_author_url>
    <wp:comment_author_IP>66.135.48.138</wp:comment_author_IP>
    <wp:comment_date>2015-04-22 15:07:03</wp:comment_date>
    <wp:comment_date_gmt>2015-04-22 15:07:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] como dijo David, usar nulls no es una Option, de manera que podríamos cambiarlo [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1429715223.8982059955596923828125;s:7:"message";s:30:"Akismet borró este comentario";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1429919754</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1429719553.5840198993682861328125;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1429919754.8581130504608154296875;s:7:"message";s:55:"jpaniego ha cambiado su estado de comentario a approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-04-22 15:07:03</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9</wp:comment_id>
    <wp:comment_author><![CDATA[Capturando excepciones en Scala: el tipo Try | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/06/24/capturando-excepciones-en-scala-el-tipo-try/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.105</wp:comment_author_IP>
    <wp:comment_date>2015-06-24 17:12:06</wp:comment_date>
    <wp:comment_date_gmt>2015-06-24 15:12:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] En el anterior código lo que estamos haciendo es codificar el email en caso de que se obtenga satisfactoriamente. En caso de que se produzca alguna excepción, no se realizará ninguna transformación. El comportamiento es idéntico al que vimos cuando se aplicaba al tipo Option. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1435158927</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1435158927.4510428905487060546875;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1435158726.087503910064697265625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-06-24 15:12:06</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Traversable ops - Fold</title>
  <link>https://scalerablog.wordpress.com/2015/03/10/traversable-ops-fold/</link>
  <pubDate>Tue, 10 Mar 2015 17:00:45 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=70</guid>
  <description/>
  <content:encoded><![CDATA[Esta es la primera de una serie de entradas relacionadas con las operaciones más comunes en el mundo de la programación funcional con Scala: las operaciones pertenecientes a la API de Traversable.

<strong>Traversable</strong> se considera la base para todas las colecciones de Scala y se caracteriza principalmente por dos rasgos:
<ul>
	<li><em>Strictness</em>: Todos los elementos tienen que ser computados previamente para poder manejarlos como valores.</li>
	<li><em>Orderness</em>: Los elementos mantienen una relación de orden entre ellos</li>
</ul>
Hay otro tipo de colecciones como los Streams, de evaluación perezosa, pero no perdamos el foco. Hoy hablaremos sobre el fold...sin ponernos nerviosos, ni colapsar.

<a href="https://scalerablog.files.wordpress.com/2015/03/nly1wxv.gif"><img class="alignnone size-full wp-image-91" src="https://scalerablog.files.wordpress.com/2015/03/nly1wxv.gif" alt="nlY1Wxv" width="227" height="158" /></a>

Supongamos que queremos concatenar los números del 1 al 5 en una cadena de texto, obteniendo el resultado "My numbers are: 12345", ¿cuál sería la primera aproximación? Podría ser algo del estilo

[sourcecode language="scala"]
var initial: String = &quot;My numbers are: &quot;
for(i &lt;- 1 to 10){
  initial = initial + i.toString
}
[/sourcecode]

Funcionaría. Pero os podéis imaginar lo feas que quedan las variables.

<a href="https://scalerablog.files.wordpress.com/2015/03/40hylzx.gif"><img class="alignnone size-medium wp-image-72" src="https://scalerablog.files.wordpress.com/2015/03/40hylzx.gif?w=300" alt="40HYLZX" width="300" height="214" /></a>

No os preocupéis. La operación que os proponemos para sustituir el bucle anterior es fold, que tiene dos variantes: <strong>foldLeft</strong> y <strong>foldRight</strong>. Mientras que la primera operación ejecuta elemento a elemento del Traversable de manera iterativa, la segunda lo hace de manera recursiva, por tanto se recomienda evitarla si la colección sobre la que ejecutamos el foldRight tiene un tamaño considerable. Nos centraremos pues en la primera operación.

La notación del <strong>foldLeft</strong> para un cierto Traversable[T] es

[sourcecode language="scala"]
def foldLeft[U](zero: U)(f: (U,T) =&gt; U): U
[/sourcecode]

dicho así puede parecer dificil de ver. Apliquemos la operación al ejemplo anterior:

El elemento 'zero' en este caso, sería la cadena inicial de tipo String "My numbers are: "
Y la función a aplicar para cada par de String, Int sería la concatenación.

Por tanto seríamos capaz de expresar el primer snippet de código, sin hacer uso de variables, de la siguiente forma:

[sourcecode language="scala"]
(1 to 5).foldLeft(&quot;My numbers are: &quot;)(
  (accumulator,iterator) =&gt; accumulator + iterator.toString)
[/sourcecode]

Para aquellos que creais que esta sintaxis es demasiado mainstream, hay una notación alternativa que permite realizar la misma operación de la siguiente forma:

[sourcecode language="scala"]
(&quot;My numbers are: &quot; /: (1 to 5))((accumulator,iterator) =&gt;
  accumulator + iterator.toString)
[/sourcecode]

Fácil, sencillo y para toda la familia :-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>70</wp:post_id>
  <wp:post_date>2015-03-10 17:00:45</wp:post_date>
  <wp:post_date_gmt>2015-03-10 17:00:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>traversable-ops-fold</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="fold"><![CDATA[fold]]></category>
  <category domain="post_tag" nicename="foldleft"><![CDATA[foldleft]]></category>
  <category domain="post_tag" nicename="foldright"><![CDATA[foldright]]></category>
  <category domain="post_tag" nicename="ops"><![CDATA[ops]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="traversable"><![CDATA[traversable]]></category>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>draftfeedback_requests</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:24:"d.vallejo.nava@gmail.com";a:3:{s:3:"key";s:13:"54f64db8a57be";s:4:"time";s:10:"1425427896";s:7:"user_id";s:8:"59615419";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/f1xDy1V2Jw]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:3064583607;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Vals and Vars</title>
  <link>https://scalerablog.wordpress.com/2015/03/25/vals-and-vars/</link>
  <pubDate>Wed, 25 Mar 2015 10:05:20 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=75</guid>
  <description/>
  <content:encoded><![CDATA[<h2>Inmutable vs mutable</h2>
Una de las primeras lecciones con las que nos congratula el mundo de lo funcional es que, los valores que declaramos (<strong>val</strong>), son inmutables, es decir, solo se asignan una vez y no pueden ser modificados (luego veremos que esto tiene matices). Por tanto, si declarásemos:

[code language="scala"]
val myNumber: Int = 2
myNumber = 3 //Compile-time error
[/code]

No podríamos modificar su valor. Puede resultar extraño al principio, pero las variables (<strong>var</strong>) de uso común en otros lenguajes de programación como Java, están totalmente desaconsejadas en Scala.

[code language="scala"]
var myNumber: Int = 2
myNumber = 3
println(myNumber) //Prints out '3'
[/code]

¿Qué sentido tiene esto? Si pensamos que toda función pura no debe mantener estado, es obvio que no tienen cabida las variables dentro de ellas. Por otra parte, podéis pensar: "Pero el mundo no es funcional: el I/O, por ejemplo, es necesario para configurar la ejecución de un programa". ...Pues tenéis toda la razón. Por eso se recomienda, en el caso de necesitar introducir una variable, comprobar si es realmente necesario, y en caso de que así sea, tratar de ponerlas en el punto más cercano a la entrada de la aplicación. Para todo lo demás....<em>masterVal</em>.
<h1>Matices: Stateful objects.</h1>
Decíamos antes que el hecho de que un valor se defina como val, implica que no puede modificarse. Del mismo modo también dijimos, que esto tiene matices. Supongamos el siguiente fragmento de código.

[code language="scala"]
class Foo {
  private var initialized: boolean = false
  def initialize(): Unit = {
    initialized = true
  }
  def isInitialized(): Boolean = initialized
}
[/code]

Si ahora instanciaramos un objeto de tipo Foo

[code language="scala"]
val immutableFoo = new Foo
immutableFoo.isInitialized() // false
immutableFoo = new Foo //Compile-time error
[/code]

Si intentamos reasignar el valor, obtendremos un error de compilación (hasta aquí nada nuevo). Pero si invocamos a su método initialize...

[code language="scala"]
immutableFoo.isInitialzed() // false
immutableFoo.initialize()
immutableFoo.isInitialized() // true
[/code]

...habremos modificado su estado interno. Nuestro Foo es lo que se denomina un 'Stateful object': un objeto con estado. En Scala se procura rehusar de este comportamiento, pero no olvidemos que esto es lo habitual en código proveniente de Java, y dado que una de las facilidades que aporta Scala es la integración con Java, es muy común utilizar librerías y frameworks escritos en Java. Por tanto, de cara a nuevos desarrollos en Scala, es preferible evitar este tipo de patrón, aun siendo conscientes que es probable que al integrar con otras herramientas, podemos encontrárnoslo.
<h1>Lo mejor de los dos mundos...</h1>
Una de las virtudes que tiene Scala (la gente de scalaz nos mata), es la existencia de los var. <a href="https://scalerablog.files.wordpress.com/2015/03/kqsqldv.gif"><img class="alignnone  wp-image-140 aligncenter" src="https://scalerablog.files.wordpress.com/2015/03/kqsqldv.gif?w=300" alt="KqsQlDV" width="215" height="124" /></a>

¿Pero no habías dicho antes que <strong>var=<del>caca</del></strong>? Cierto. Pero precisamente el permitir este tipo de expresiones facilita la adopción de Scala a la gente que viene de otros lenguajes como Java. Una transición puede ser menos traumática si, en principio, usando la sintaxis de Scala, utilizas las mismas construcciones del lenguaje de donde provienes para, más adelante, acabar adoptando un estilo más funcional.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>75</wp:post_id>
  <wp:post_date>2015-03-25 10:05:20</wp:post_date>
  <wp:post_date_gmt>2015-03-25 10:05:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>vals-and-vars</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="object"><![CDATA[object]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="stateful"><![CDATA[stateful]]></category>
  <category domain="post_tag" nicename="val"><![CDATA[val]]></category>
  <category domain="post_tag" nicename="var"><![CDATA[var]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:3064583607;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/x6r2kjXoNU]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Herencia Múltiple: jugando a ser Dios</title>
  <link>https://scalerablog.wordpress.com/2015/04/01/herencia-multiple-jugando-a-ser-dios/</link>
  <pubDate>Wed, 01 Apr 2015 12:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=127</guid>
  <description/>
  <content:encoded><![CDATA[Una de las características de Scala más importantes es la posibilidad de hacer mixin. Mediante <strong>mixin</strong> podemos tener herencia múltiple de varios <strong>traits</strong>. ¿Traits? ¿Mixin? ¿Lo qué? Bueno, vamos a empezar poco a poco :)
<h2>¿Qué son los traits?</h2>
&nbsp;
Los <strong>Traits</strong> (o<em> rasgos</em> en la lengua de Cervantes) son un aglutinamiento de atributos y métodos propios de un rasgo o característica. Son similares a las interfaces de Java con la salvedad de que se pueden implementar parcialmente, es decir, solo algunos de sus métodos o valores.

Sirve para añadir comportamientos a otras entidades. Por ejemplo, vamos a implementar el trait <em>CanFly</em> en el que definiremos los valores y métodos necesarios para cualquier criatura voladora:

[code language="scala"]

trait CanFly {

  val altitude: Float

  def fly() = println(&quot;I'm flying!!!&quot;)
}

[/code]

Como se puede observar, en este trait existe una variable <em>altitude</em> que está sin definir, y un método <em>fly</em> que sí está definido. Podemos instanciar un trait utilizando una clase anónima de la siguiente forma:

[code language="scala"]

val myFlyingAnimal = new CanFly {}

[/code]

Sin embargo, como la variable <em>altitude</em> no está definida, este trozo de código provocará un <strong>error de compilación</strong>. Para poder instanciar un trait, es necesario implementar todos sus valores y métodos:

[code language="scala"]

val myFlyingAnimal = new CanFly { val altitude = 100.0f }

[/code]

&nbsp;
<h2>¿Cómo podemos utilizar los traits?</h2>
&nbsp;
A pesar de que ya sabemos como instanciar traits mediante clases anónimas, no es uno de sus usos más comunes.

Los traits se usan para añadir comportamientos a nuestras entidades. Para ello podemos, mediante composición, hacer mixin de uno o varios traits a la hora de definir otro trait, una clase, una case class ...

Para ello, se utilizan dos palabras reservadas: <strong><em>extends</em></strong> y <strong><em>with</em></strong>. El primer trait tendrá como predecesor la palabra <em>extends</em>, el resto se irán incluyendo con <em>with</em>.

[code language="scala"]

case class Pigeon extends CanFly

case class Superman extends Superhero with CanFly

[/code]

&nbsp;

<img class="  https://scalerablog.files.wordpress.com/2015/03/og6kv6.jpg aligncenter" src="https://scalerablog.files.wordpress.com/2015/03/og6kv6.jpg" alt="nlY1Wxv" width="422" height="246" />

A esto es a lo que llamamos Mixin. ¿A que ahora todo tiene más sentido?
<h2>¿Y cómo trabajan los mixin con el problema del diamante?</h2>
&nbsp;
Primero vamos a crear un escenario con el problema. Tenemos un trait <em>Animal</em> que tiene un método sin implementar que devuelve el sonido del animal.

[code language="scala"]

trait Animal {
  def sound: String
}

[/code]

Por otro lado, tenemos dos especificaciones del animal: un gato y un perro.

[code language="scala"]

trait Cat extends Animal {
  override def sound = &quot;Miau&quot;
}

trait Dog extends Animal {
  override def sound = &quot;Guau&quot;
}

[/code]

Haciendo un esfuerzo de imaginación sin igual, vamos a imaginar que un zorro es la mezcla entre un gato y un perro.

[code language="scala"]

case class Fox extends Cat with Dog

[/code]

Pero, si intentamos imprimir el sonido del zorro....

[code language="scala"]

val myFox = Fox()
println(myFox.sound)

[/code]

&nbsp;

<img class="  wp-image-91 aligncenter" src="https://scalerablog.files.wordpress.com/2015/03/what-does-the-fox-say-1378489657.jpg" alt="nlY1Wxv" width="422" height="246" />

&nbsp;

Pues en este caso, nuestro zorro ladrará. ¿Por qué? Por que el último trait con el que se ha hecho mixin es <em>Dog</em>. Primer se utiliza la implementación de <em>Cat</em>, pero más tarde es sobrescrita por el siguiente trait definido, es decir, <em>Dog</em>. Por tanto podemos decir, que los traits se van instanciando en el orden en el que se han declarado.

¡Y ya está! ¿Qué hemos aprendido hoy? Que los traits y los mixins son bastante útiles....y que los zorros, en ocasiones, ladran.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>127</wp:post_id>
  <wp:post_date>2015-04-01 12:00:00</wp:post_date>
  <wp:post_date_gmt>2015-04-01 12:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>herencia-multiple-jugando-a-ser-dios</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="trait"><![CDATA[trait]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[154]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/uxUGKBNqdx]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:3064583607;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>14</wp:comment_id>
    <wp:comment_author><![CDATA[Type classes en Scala | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/07/22/561/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.100.204</wp:comment_author_IP>
    <wp:comment_date>2015-07-22 17:01:10</wp:comment_date>
    <wp:comment_date_gmt>2015-07-22 15:01:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] de unas cuantos meses con el blog ya hemos podido saber donde podemos usar traits, para qué sirven los implícitos o qué narices son eso de los tipos genéricos. Hoy vamos a [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1437577271.559505939483642578125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1437581035.253962993621826171875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1437674136</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1437674137.0666658878326416015625;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-07-22 15:01:10</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Tipos estructurales</title>
  <link>https://scalerablog.wordpress.com/2015/04/08/tipos-estructurales/</link>
  <pubDate>Wed, 08 Apr 2015 15:00:56 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=183</guid>
  <description/>
  <content:encoded><![CDATA[Se denomina en programación <strong>Ducktyping</strong> a la definición de tipos que viene dada por los atributos y métodos que lo componen, y no por la herencia. Por ejemplo, en Scala podemos definir el siguiente <strong>tipo estructural</strong>:

[code language="scala"]
type Animal = {
  val legs: Int
  def noise(): String
}

def animalDescription(a: Animal): String =
  s&quot;My animal has ${a.legs} legs and says ${a.noise()}&quot;
[/code]

En este caso, podemos afirmar que toda clase que posea un atributo llamado <code>legs</code> de tipo entero y un método <code>noise</code> que devuelve un <code>String</code>, se puede denominar <code>Animal</code>.

Ahora bien, ¿qué diferencia hay entre esto y la herencia clásica?

[code language="scala"]
trait Animal {
  val legs: Int
  def noise(): String
}
class Dog extends Animal{
  val legs = 4
  def noise() = &quot;woof&quot;
}
[/code]

A priori puede parecer que ninguna. De hecho hay que tener en cuenta que en Scala, cuando utilizamos tipos estructurales sufrimos cierto overhead en compile-time dado que es preciso inferir si el tipo que le pasamos cumple con las restricciones que impone el tipo estructural.

<strong>¿Entonces qué <del datetime="2015-04-06T21:37:42+00:00">demonios</del> aporta el tipo estructural?</strong>

Muy sencillo: hasta ahora veníamos suponiendo que la implementación que estamos haciendo es 100% <em>home-made</em>. Pero, ¿qué ocurre si estamos usando un framework o librería de terceros y resulta que los autores son tan majos de declarar las clases finales o de definir sealed traits (o incluso privados a cierto ámbito)?

<a href="https://scalerablog.files.wordpress.com/2015/04/tgwoyyo.gif"><img class=" size-medium wp-image-196 aligncenter" src="https://scalerablog.files.wordpress.com/2015/04/tgwoyyo.gif?w=300" alt="tGWoYYo" width="300" height="170" /></a>

Pues ocurre que, aparte de estar en todo su derecho, nosotros no podríamos hacer nada del estilo:

[code language="scala"]
package some.private.library {

  sealed trait TraitIWantToExtend {
    val member1: Int
    def method2(): Boolean
  }

  private[some.private] class ClassIMaybeWantToMock extends TraitIWantToExtend {
    val member1 = 2
    def method2() = true
  }

}

package my.package {

  class MyClass extends TraitIWantToExtend {// nuke-explosion in scalac!
    val member1 = 3
    def method2() = false
  }

  def methodToRun[T&lt;:TraitIWantToExtend](obj: T) {
    println(obj.member1)
    println(obj.method2())
  }

}
[/code]

Sin embargo, con lo aprendido anteriormente, podríamos extraer del siguiente modo la esencia de los rasgos comunes <strong>que nos interesan</strong> entre nuestra clase y la clase que proviene de la librería de terceros:

[code language="scala"]
package my.package {

  type CommonFeatures = {
    val member1: Int
    def method2(): Boolean
  }

  class MyClass {// no nuke explosion now ^^
    val member1 = 3
    def method2() = false
  }

  def methodToRun[T&lt;:CommonFeatures](obj: T) {
    println(obj.member1)
    println(obj.method2())
  }

}
[/code]

Así que, como casi todo, no recomendamos un abuso de esta característica.
No obstante, en circunstancias similares a las expuestas, puede resultar muy útil.

¡Yogur,amigos!:)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>183</wp:post_id>
  <wp:post_date>2015-04-08 15:00:56</wp:post_date>
  <wp:post_date_gmt>2015-04-08 15:00:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tipos-estructurales</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="duck"><![CDATA[duck]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="structural"><![CDATA[structural]]></category>
  <category domain="post_tag" nicename="types"><![CDATA[types]]></category>
  <category domain="post_tag" nicename="typing"><![CDATA[typing]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/tbU6wjg7oE]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:3064583607;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Traversable ops - Map + Flatten = Flatmap</title>
  <link>https://scalerablog.wordpress.com/2015/04/22/traversable-ops-map-flatten-flatmap/</link>
  <pubDate>Wed, 22 Apr 2015 10:15:53 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=185</guid>
  <description/>
  <content:encoded><![CDATA[Una de las dudas más comunes, y que, por lo general, suele llevar a confusión a la gente que se inicia en Scala es:

<strong>¿Qué diferencia hay entre map y flatMap?</strong>
<h2>Map</h2>
La función <code>map</code> es el conversor por excelencia. Se encarga de transformar los elementos que componen el Traversable en otros elementos del mismo o distinto tipo.
Su notación es, para un <code>T[A]</code> :

[code language="scala"]
def map[B](f: A =&gt; B):T[B]
[/code]

Si lo vemos con un ejemplo,

[code language="scala"]
val myList: List[Int] = List(1,2,3)
val anotherList: List[String] =
  myList.map((n:Int) =&gt; n.toString) //List(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;)
[/code]

tenemos que dada una lista de enteros, se aplica la función de transformación <code>(n:Int) =&gt; n.toString</code> a cada uno de los miembros de la lista, generando una nueva lista pero del tipo resultante de la función de transformación, es decir, de tipo <code>String</code>.

Aunque no atañe exclusivamente a la función <code>map</code>, cabe recordar que hay otras formas abreviadas para definir la función de transformación:

[code language="scala"]
val f: Int =&gt; String = (n: Int) =&gt; n.toString
val f: Int =&gt; String = n =&gt; n.toString
val f: Int =&gt; String = _.toString
[/code]

<h2>flatMap</h2>
Vale, el <code>map</code> es asumible, se puede entender, pero entonces....¿qué demonios es un <code>flatMap</code>? Para entenderlo es necesario que nos desviemos un tanto para conocer a nuestra función amiga <code>flatten</code>.
<h2>flatten</h2>
Esta operación, con la siguiente signatura:

[code language="scala"]
def flatten[B](implicit asTraversable: (A) =&gt; GenTraversableOnce[B]): Traversable[B]
[/code]

nos permite aplanar un traversable de traversables. Es decir, aplanamos las colecciones que componen esta colección. Por ejemplo:

[code language="scala"]
val l: List[List[Int]] = List(List(1,2,3),List(),List(4),List(5))
require(l.flatten==List(1,2,3,4,5)
[/code]

El tipo contenido no tiene por qué ser del mismo que el tipo contenedor (<code>List[List[Int]]</code>), también aplica sobre otros traversables muy interesantes, como el tipo <code>Option[T]</code>:

[code language="scala"]
val l: List[Option[Int]] = List(Option(1),None,None,Option(2),Option(3))
require(l.flatten==List(1,2,3)
[/code]

<h2>flatMap (ahora enserio...)</h2>
Entonces, ¿qué es un <code>flatMap</code>? Ahora os podréis hacer una idea ;-)
Es justamente eso, aplicar una operación de <code>map</code> y posteriormente una de <code>flatten</code>.

Pongamos un ejemplo práctico:
<blockquote>Tenemos una función que recibe un cierto objeto en JSON y una función que lo deserializa convirtiéndolo en un mapa. Es posible, que en el objeto JSON vengan algunos campos con valor null. ¿Como devolvemos una lista con los valores obviando los que son nulos?</blockquote>
Una primera aproximación, podría ser...

[code language="scala"]
type KeyValueMap = Map[String,String]
type ValueList = List[String]
def fieldValues(obj: String, fieldDeser: String =&gt; KeyValueMap): ValueList = {
  fieldDeser(obj).filter{
    case (key,value) =&gt; value != null
  }.values.toList
}
[/code]

Pero como dijo David, <a title="Usar nulls no es una Option" href="https://scalerablog.wordpress.com/2015/03/16/usar-nulls-no-es-una-option/">usar nulls no es una Option</a>, de manera que podríamos cambiarlo por

[code language="scala"]
type KeyValueMap = Map[String,String]
type ValueList = List[String]
def fieldValues(obj: String, fieldDeser: String =&gt; KeyValueMap): ValueList = {
  fieldDeser(obj).values.flatMap(Option(_)).toList
}
[/code]

¿Qué ha pasado aquí? Para verlo en detalle, si la misma operación la realizamos en dos pasos simulando el input, tenemos que:

[code language="scala"]
val it: List[String] =
  List(&quot;value1&quot;,null,&quot;value3&quot;)//Simulating 'fieldDeser(ob).values'
val mapped: Iterable[Option[String]] =
  it.map(Option(_)) //Remember Option(null)==None
require(mapped==List(Option(&quot;value1&quot;),None,Option(&quot;value3&quot;)))
require(mapped.flatten==List(&quot;value1&quot;,&quot;value3&quot;))
[/code]

Ahora sí, creo que respondimos a la pregunta del millón

<a href="https://scalerablog.files.wordpress.com/2015/04/1zltyts.gif"><img class=" size-full wp-image-210 aligncenter" src="https://scalerablog.files.wordpress.com/2015/04/1zltyts.gif" alt="1zltyts" width="264" height="216" /></a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>185</wp:post_id>
  <wp:post_date>2015-04-22 10:15:53</wp:post_date>
  <wp:post_date_gmt>2015-04-22 10:15:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>traversable-ops-map-flatten-flatmap</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="difference"><![CDATA[difference]]></category>
  <category domain="post_tag" nicename="faq"><![CDATA[faq]]></category>
  <category domain="post_tag" nicename="flatmap"><![CDATA[flatmap]]></category>
  <category domain="post_tag" nicename="map"><![CDATA[map]]></category>
  <category domain="post_tag" nicename="ops"><![CDATA[ops]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="traversable"><![CDATA[traversable]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/77NSOqPHJu]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:3064583607;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>27</wp:comment_id>
    <wp:comment_author><![CDATA[Teoría de Cate-movidas: Mónadas | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/10/07/teoria-de-cate-movidas-monadas/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.77</wp:comment_author_IP>
    <wp:comment_date>2015-10-07 17:13:08</wp:comment_date>
    <wp:comment_date_gmt>2015-10-07 15:13:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] que son estructuras algebraicas que tienen un constructor y un método flatMap que, como vimos en anteriores posts, es la concatenación de un método map y un [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1444231162</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1444231162.8187949657440185546875;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1444230788.4566519260406494140625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-10-07 15:13:08</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>"Nothing" else matters...</title>
  <link>https://scalerablog.wordpress.com/2015/05/13/nothing-else-matters/</link>
  <pubDate>Wed, 13 May 2015 16:00:15 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=203</guid>
  <description/>
  <content:encoded><![CDATA[<h2>What's Nothing, my precious?</h2>
Nothing es un tipo un poco especial dentro de la jerarquía de clases de Scala.

Para empezar <strong>no es instanciable</strong>: no podemos generar una instancia de ninguna manera.

Raro,¿no? Esto se explica un poco mejor con la segunda particularidad: <strong>es un tipo que extiende de tooooodas las clases</strong>. ¿También las definidas por el usuario? También.

<a href="https://scalerablog.files.wordpress.com/2015/05/scala-hierarchy.png"><img class="alignnone  wp-image-294" src="https://scalerablog.files.wordpress.com/2015/05/scala-hierarchy.png?w=300" alt="scala-hierarchy" width="624" height="385" /></a>

Entonces, ¿para qué sirve? El ejemplo más claro es <em><strong>None</strong></em>. Si <em><strong>Option[T]</strong></em> no fuese covariante, para cada <em><strong>T</strong></em>, habría que definir un <em><strong>None[T]</strong></em>. Y por tanto tendríamos que <strong><em>None[Int]</em></strong> sería distinto de <em><strong>None[String]</strong></em>...¡imaginaos el lío!

Pero dado que <em><strong>Option[+T]</strong></em> es covariante<strong>*</strong>, y <em><strong>Nothing</strong></em> es un subtipo de cualquier clase, no es necesario declarar un <em><strong>None</strong></em> para cada <em><strong>T</strong></em> que contuviera la lista, sino que hay un único <em><strong>None</strong></em> con la siguiente signatura:

[code language="scala"]
object None extends Option[Nothing]
  //...with Product with Serializable
[/code]

Lo mismo ocurre para <em><strong>Nil</strong></em>.
<h2>Inferencia de tipos</h2>
Cuando definimos métodos o valores en Scala, al principio y siendo puristas, definimos el tipo de los mismos:

[code language="scala"]
val myVal: String = &quot;hi&quot;
def myMethod(n: String): Boolean =
  (n % 2 == 0)
[/code]

Pero es bastante frecuente que, tras el paso del tiempo y habiendo tirado muchas líneas de código, empecemos a olvidar añadir el tipo que devuelven estas expresiones:

[code language="scala"]
val myVal = &quot;hi&quot;
def myMethod(n: String) =
  (n % 2 == 0)
[/code]

No ocurre nada, el compilador se encarga de inferir los tipos devueltos...siempre que tenga pistas suficientes para averiguarlo. Es entonces cuando surge la amenaza del coco "Nothing"
<h2>Nothing's coming</h2>
Imaginemos que tenemos un método genérico del siguiente tipo:

[code language="scala"]
def getFirstElement[T](list: List[T]): Option[T] =
  list.headOption
[/code]

Lo que hace el método es devolver el primer elemento de una lista (si lo tuviera). ¿Dónde puede empezar a complicarse todo?

Supongamos que queremos probar el método con una lista vacía. Nuestra experiencia nos indica que la mejor forma de hacerlo es empleando el método apply de List sin ningún argumento: List().
Sin embargo, si le pasamos este argumento a nuestro método:

[code language="scala"]
val first = getFirstElement(List())
[/code]

veremos que nos devuelve:

[code language="scala"]
first: Option[Nothing] = None
[/code]

No seamos malos con el compilador, reconozcamos que no le hemos dado facilidad alguna para inferir el tipo correcto. Una forma muy sencilla para hacerlo sería usando el método empty del objeto List:

[code language="scala"]
val first = getFirstElement(List.empty[Int])
first: Option[Int] = None
[/code]

aunque también podría inferirse añadiendo el parameter type en la invocación del método

[code language="scala"]
val first = getFirstElement[Int](List())
first: Option[Int] = None
[/code]

¡Y listo! Y ahora que lo pienso, el post quedó un poco soso sin memes...

<a href="https://scalerablog.files.wordpress.com/2015/05/60965939.jpg"><img class=" size-full wp-image-293 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/60965939.jpg" alt="60965939" width="250" height="250" /></a>
<p style="text-align:left;"><strong>*</strong> <em>Covarianza</em>: Se dice que <strong>C[T]</strong> es covariante en <strong>T</strong>, si dado un <strong>V&lt;:T</strong>, <strong>C[V]&lt;:C[T]</strong> . Este tema se verá más en profundidad en futuros (que no lejanos) posts :-)</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>203</wp:post_id>
  <wp:post_date>2015-05-13 16:00:15</wp:post_date>
  <wp:post_date_gmt>2015-05-13 16:00:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>nothing-else-matters</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="inference"><![CDATA[inference]]></category>
  <category domain="post_tag" nicename="medium"><![CDATA[medium]]></category>
  <category domain="post_tag" nicename="nil"><![CDATA[nil]]></category>
  <category domain="post_tag" nicename="none"><![CDATA[none]]></category>
  <category domain="post_tag" nicename="nothing"><![CDATA[nothing]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="type"><![CDATA[type]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/k3cy4pVuuT]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:3064583607;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>4</wp:comment_id>
    <wp:comment_author><![CDATA[Ignacio Navarro (@inavarromartin)]]></wp:comment_author>
    <wp:comment_author_email>inavarromartin@twitter.example.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/inavarromartin</wp:comment_author_url>
    <wp:comment_author_IP>88.21.85.76</wp:comment_author_IP>
    <wp:comment_date>2015-05-14 13:49:01</wp:comment_date>
    <wp:comment_date_gmt>2015-05-14 13:49:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Buen post!.
Otra utilidad de Nothing es indicar el parametro de devolucion de los metodos que no llegan a acabar, como System.exit()]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1431611341.6052110195159912109375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value>twitter</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value>http://pbs.twimg.com/profile_images/554768399734038528/N8W4beE4_normal.jpeg</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value>1131671724</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1431611452</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1431611452</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1431611452.393321990966796875;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-05-14 13:49:01</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Buscando el anonimato. Clases anónimas.</title>
  <link>https://scalerablog.wordpress.com/2015/04/15/buscando-el-anonimato-clases-anonimas/</link>
  <pubDate>Wed, 15 Apr 2015 17:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=213</guid>
  <description/>
  <content:encoded><![CDATA[<strong>¿Qué son las clases anónimas?</strong>

Como su propio nombre indica, las clases anónimas son clases sin nombre. Son las clases que más le gustan a los corruptos. No se declaran......BADUM, TSS!

Ahora en serio, ¿cómo puedo crear una instancia mediante una clase anónima? Muy fácil. Simplemente con la palabra reservada <em>new</em> y definiendo el cuerpo con llaves.

[code language="scala"]
val myPoint = new{ val x = 1; val y = 2 }
[/code]

De esta forma creamos una instancia que contiene dos valores enteros: <em>x</em> e <em>y</em>. Sin embargo, como se puede apreciar, no hemos dado nombre a esta clase.

<a href="https://scalerablog.files.wordpress.com/2015/04/wtf.jpg"><img class=" size-medium wp-image-196 aligncenter" src="https://scalerablog.files.wordpress.com/2015/04/wtf.jpg?w=300" alt="tGWoYYo" width="300" height="170" /></a>

<strong>Azucar sintáctico</strong>

Hace un par de semanas hablamos de los Traits, y de como podíamos crear una instancia de un trait a traves de una clase anónima.
Quizás en ese momento, un WTF del tamaño de Sebastopol apareció en tu cabeza.
Si recordamos aquel post, la sintaxis para crear una instancia desde un trait era algo así:

[code language="scala"]
  trait AnonymousHero {
    def superpower: String
  }

  val myHero = new AnonymousHero { 
    def superpower = &quot;I can compile Scala with my brain&quot;
  }
[/code]

¡Estamos creando una instancia desde un trait! ¡No hay clases por ningún lado! ¿Esto es magia negra? Pues no, es <strong>sintactic sugar</strong>.

Realmente, lo que ocurre por debajo es algo similar a esto:

[code language="scala"]
  class AnonymousHeroClass extends AnonymousHero {
    def superpower: String = &quot;I can compile Scala with my brain&quot;
  }

  val myHero = new AnonymousHeroClass

[/code]

Como se puede ver, a la hora de instanciar un trait, realmente se crea una clase que extiende de dicho trait. Después, se crea una nueva instancia de la clase creada.

De esta manera se pueden crear instancias de un trait sin generar boilerplate.

<strong>Bonus-track: Funciones anónimas</strong>

En Scala es posible utilizar <strong>expresiones lambda</strong>, es decir, funciones anónimas. Más adelante, en otros posts, veremos la importancia del uso de funciones anónimas, por ejemplo, en métodos que admiten funciones como parámetro.
Las funciones anónimas, al igual que las clases anónimas, son funciones que no es necesario declarar.
Un ejemplo de función anónima es la siguiente:

[code language="scala"]
  (x: Int) =&gt; x + 1
[/code]

En este caso, la función anónima espera un entero y devolverá ese entero sumado una unidad.

No hay que olvidar que, en Scala, las funciones realmente son objetos. Y teniendo en cuenta esto último, podemos relacionar las funciones anónimas (o expresiones lambda) con clases anónimas.

Realmente, cuando se utiliza la función anónima <em>(x: Int) =&gt; x + 1</em> lo que se está haciendo por debajo es crear una instancia de la clase anónima utilizando el trait <em>Function1</em>:

[code language="scala"]
new Function1[Int, Int] {
  def apply(x: Int): Int = x + 1
}
[/code]

¡Todo encaja!

<a href="https://scalerablog.files.wordpress.com/2015/04/understand.gif"><img class=" size-medium wp-image-196 aligncenter" src="https://scalerablog.files.wordpress.com/2015/04/understand.gif?w=300" alt="tGWoYYo" width="300" height="170" /></a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>213</wp:post_id>
  <wp:post_date>2015-04-15 17:00:00</wp:post_date>
  <wp:post_date_gmt>2015-04-15 17:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>buscando-el-anonimato-clases-anonimas</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="class"><![CDATA[class]]></category>
  <category domain="post_tag" nicename="function"><![CDATA[function]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[226]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/EcF4RRnK5H]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:3064583607;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>5</wp:comment_id>
    <wp:comment_author><![CDATA[Expresiones Lambda a cholón | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/05/27/expresiones-lambda-a-cholon/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.83.194</wp:comment_author_IP>
    <wp:comment_date>2015-05-27 17:08:16</wp:comment_date>
    <wp:comment_date_gmt>2015-05-27 15:08:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] O como les llaman los amigos: expresiones lambda. Las funciones anónimas, como ya vimos en un post anterior, son funciones que no es necesario declarar previamente. Vamos a ver un ejemplo: Una función que [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1432739296.641078948974609375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1432739525</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1432739525.6854770183563232421875;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-05-27 15:08:16</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Hello World en Akka (Parte I)</title>
  <link>https://scalerablog.wordpress.com/2015/04/29/hello-world-en-akka-parte-i/</link>
  <pubDate>Wed, 29 Apr 2015 15:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=235</guid>
  <description/>
  <content:encoded><![CDATA[Hoy vamos a cambiar un poco de tercio. Aprovechando el curso de <strong>programación reactiva</strong> que se está dando actualmente en <em>Coursera</em>, vamos a dar el primer paso para empezar a trabajar con <em><strong>Akka</strong></em>.

Akka es un toolkit del ecosistema Typesafe. Permite construir sistemas reactivos utilizando el <strong>modelo de actores</strong>. Existen dos versiones de Akka, una para Java y otra para Scala. Aquí nos centraremos, obviamente, en la segunda.

<strong>¿Qué es un actor?</strong>

Un <strong>actor</strong> es una entidad a la que se le pueden enviar mensajes. El actor reaccionará a los mensajes que le lleguen realizando acciones. Además, tiene dos peculiaridades:
<ul>
	<li>No se puede acceder al interior del actor desde fuera de él. Para interactuar con el actor solo se pueden enviar mensajes.</li>
	<li>Los mensajes que lleguen al actor se procesarán de uno en uno</li>
</ul>
Para construir un actor en Akka, haciendo un esfuerzo histórico de comprensión, simplemente hay que extender del trait <em>Actor</em>.

Si queremos tener el actor completamente definido tendremos que concretar su comportamiento. Para ello hay que implementar el método <em><strong>receive</strong></em> del actor. En él definiremos cual será la reacción del actor a los distintos mensajes que le vayan llegando.

Pero antes de continuar toca dar paso a Íñigo con un briconsejo

<a href="https://scalerablog.files.wordpress.com/2015/04/briconsejo.jpg"><img class="  wp-image-240 aligncenter" src="https://scalerablog.files.wordpress.com/2015/04/briconsejo.jpg?w=300" alt="briconsejo" width="329" height="180" /></a>

<strong>Briconsejo: Funciones parciales</strong>

Las <strong><em>PartialFunction</em></strong> (o funciones parciales), son funciones que solo están definidas para un conjunto limitado de argumentos. Desde el punto de vista matemático, podríamos decir que su dominio está acotado. Pero realmente como se entiende este concepto es viendo un ejemplo sencillo:

[code language="scala"]
def getCountry: PartialFunction[String, String] = {
  case &quot;Madrid&quot; =&gt; &quot;Spain&quot;
  case &quot;Paris&quot; =&gt; &quot;France&quot;
  case &quot;Roma&quot; =&gt; &quot;Italy&quot;
}
[/code]

En este caso, la función <em>getCountry</em> solo devolverá el país de las capitales definidas en la función parcial. En caso de utilizar otra capital como parámetro de entrada, la función devolverá un <em>MatchError</em>.

[code language="scala"]
getCountry(&quot;Madrid&quot;) //returns &quot;Spain&quot;;
getCountry(&quot;Berlin&quot;) //throws MatchError
[/code]

Además, las funciones parciales tienen un método llamado <em>isDefinedAt</em> que nos permite saber si un parámetro de entrada está contemplado en su cuerpo. En nuestro caso:

[code language="scala"]
getCountry.isDefinedAt(&quot;Madrid&quot;) //returns true
getCountry.isDefinedAt(&quot;Berlin&quot;) //returns false
[/code]

Otro truco importante es componer varias funciones parciales para crear una nueva. Para ello usaremos el método orElse:

[code language="scala"]
def getCountryEurope: PartialFunction[String, String] = {
  case &quot;Madrid&quot; =&gt; &quot;Spain&quot;
  case &quot;Paris&quot; =&gt; &quot;France&quot;
  case &quot;Roma&quot; =&gt; &quot;Italy&quot;
}

def getCountryAmerica: PartialFunction[String, String] = {
  case &quot;Brasilia&quot; =&gt; &quot;Brazil&quot;
  case &quot;Buenos Aires&quot; =&gt; &quot;Argentina&quot;
}

def getCountry = 
  getCountryEurope orElse getCountryAmerica

getCountry.isDefinedAt(&quot;Madrid&quot;) //returns true
getCountry.isDefinedAt(&quot;Brasilia&quot;) //returns true

[/code]

Y para finalizar la master class de <em>PartialFunction</em>, es importante conocer el método <em>applyOrElse</em>, con el que podremos evaluar una función parcial con un valor de entrada e incluir una función auxiliar que será utilizada en caso de que el valor de entrada no esté en el dominio. ¿Lo qué? Con un ejemplo se ve mucho mejor:

[code language="scala"]
def unhandled(capital: String) = s&quot;$capital is not defined&quot;
getCountry.applyOrElse(&quot;Foo&quot;, unhandled) //Foo is not defined

[/code]

<strong>Actor Hello World</strong>

¡Bien! Ahora que sabemos lo que son las funciones parciales, ya podríamos definir nuestro método <em>receive</em> en el actor, que es el que indicará el comportamiento de un actor. Dicho método receive, como habréis podido deducir, realmente es una función parcial.

[code language="scala"]
type Receive = PartialFunction[Any, Unit]

def receive: Receive
[/code]

Dicha función parcial espera cualquier tipo como parámetro de entrada y devuelve <em>Unit</em>. Por lo tanto, gracias al tipo de argumento <em>Any</em>, podemos enviar como mensaje a un actor cualquier cosa: un string, un entero, un objeto ...

[code language="scala"]
def receive {
  case num: Int =&gt; println(s&quot;Num $num received&quot;)
  case words: String =&gt; println(s&quot;String $words received&quot;)
  case _ =&gt; println(&quot;I've received other thing&quot;)
}
[/code]

Además, es importante saber que cuando llega un mensaje a un actor primero se intenta aplicar a la función parcial que hemos definido en el método receive y, en caso de no estar definido en el dominio, se ejecutará el método unhandled:

[code language="scala"]
def unhandled(msg: Any): Unit
[/code]

Dicho método, por defecto, imprimirá los mensajes que no han sido manejados en un log. De esta manera, si un mensaje no está contemplado en el método <em>receive</em>, en vez de causar un <strong>MatchError</strong> y hacer que nuestro programa explote por los aires, imprimirá una traza en el log de Akka. Utilizando los conocimientos de nivel supremo que ya tenemos de PartialFuncion podemos adivinar que el comportamiento de un actor para un mensaje llamado <em>msg</em> estará definido de esta forma:

[code language="scala"]
receive.applyOrElse(msg, unhandled)
[/code]

Solo queda definir el actor, que en nuestro caso, independientemente del mensaje que le llegue, imprimiremos un Hello World bello y apasionado:

[code language="scala"]
class HelloWorldActor extends Actor {
  
  def receive {
    case _ =&gt; println(&quot;Hello World!&quot;)
  }
}
[/code]

¡Voila! En el siguiente post veremos como podemos utilizar este actor y como ponerlo en funcionamiento.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>235</wp:post_id>
  <wp:post_date>2015-04-29 15:00:00</wp:post_date>
  <wp:post_date_gmt>2015-04-29 15:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hello-world-en-akka-parte-i</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="akka"><![CDATA[akka]]></category>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/rt91TTbFvs]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:3064583607;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>3</wp:comment_id>
    <wp:comment_author><![CDATA[Hello World en Akka (Parte II: La Venganza) | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/05/06/hello-world-en-akka-parte-ii-la-venganza/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.176</wp:comment_author_IP>
    <wp:comment_date>2015-05-06 13:12:37</wp:comment_date>
    <wp:comment_date_gmt>2015-05-06 13:12:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] semana pasada aprendimos que era eso del modelo de actores. Además, vimos como crear nuestro propio actor en [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1430917957.4432659149169921875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1430918281</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1430918281.244635105133056640625;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-05-06 13:12:37</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Expresiones Lambda a cholón</title>
  <link>https://scalerablog.wordpress.com/2015/05/27/expresiones-lambda-a-cholon/</link>
  <pubDate>Wed, 27 May 2015 15:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=245</guid>
  <description/>
  <content:encoded><![CDATA[De los creadores de las clases Anónimas llega.....<strong>funciones anónimas</strong>. O como les llaman los amigos: <strong>expresiones lambda</strong>. Las funciones anónimas, como ya vimos en un <a title="Buscando el anonimato. Clases anónimas." href="https://scalerablog.wordpress.com/2015/04/15/buscando-el-anonimato-clases-anonimas/">post anterior</a>, son funciones que no es necesario declarar previamente. Vamos a ver un ejemplo: Una función que devuelva la longitud de un <em>String</em> eliminando los espacios en blanco la podemos definir de la siguiente forma:

[code language="scala"]
  def length(s: String): Int = s.replaceAll(&quot; &quot;, &quot;&quot;).length
[/code]

Su equivalente en función anónima será la siguiente:

[code language="scala"]
  (s: String) =&gt; s.replaceAll(&quot; &quot;, &quot;&quot;).length
[/code]

El tipo de esta expresión será: <em>String =&gt; Int</em> 

<strong>¿Dónde podemos usar funciones anónimas?</strong> 

Lo más usual es utilizarlo en funciones que, como parámetro, aceptan otras funciones. A este tipo de funciones se les llama <strong>Funciones de Orden Superior</strong> (o <em>Higher Order Function</em>). También son funciones de orden superior aquellas que como resultado devuelven una función. ¿Pues muy bien. Mu rico....¿un ejemplo? Gracias a una imaginación desbordante, vamos a crear una calculadora de números enteros muy simple. Podemos definir una calculadora de la siguiente forma:

[code language="scala"]
  object Calculator {
    
    def sum(n1: Int, n2: Int): Int = n1 + n2

    def subtract(n1: Int, n2: Int): Int = n1 - n2

    def multiplicate(n1: Int, n2: Int): Int = n1 * n2

    def divide(n1: Int, n2: Int): Int = n1 / n2
  }
[/code]

Mmmmm, guay. Una clase con varios métodos. Funciona. Pero...¿y si probamos a darle un giro más genérico? <a href="https://scalerablog.files.wordpress.com/2015/05/meme-functions.jpg"><img class="  wp-image-400 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/meme-functions.jpg?w=300" alt="meme-functions" width="245" height="214" /></a> Realmente lo que queremos es aplicar una operación binaria. Dicha operación, dado dos enteros, devolverá un nuevo entero. Podemos decir que necesitamos un método como este:

[code language="scala"]
  def calculate(n1: Int, n2: Int)(operation:(Int, Int) =&gt; Int) =
    operation(n1, n2)
[/code]

Como se puede ver, estamos pasando realmente una función como parámetro. Estamos utilizando una función anónima. Para hacerlo más legible, podemos crear un nuevo tipo que represente la operación binaria de enteros: <em>(Int, Int) =&gt; Int</em>.

[code language="scala"]
  type Operation = (Int, Int) =&gt; Int
[/code]

Y lo aplicamos a nuestro método <em>calculate</em>:

[code language="scala"]
  def calculate(n1: Int, n2: Int)(operation: Operation) =
    operation(n1, n2)
[/code]

Este método puede ser llamado de varias formas: 
1) La facilita: le inserto una función definida anteriormente:

[code language="scala"]
  def addition(n1: Int, n2: Int) = n1 + n2

calculate(1, 2)(addition) //returns 3
[/code]

2) No tengo una función definida. Además, la función es simple y no se volverá a usar en ningún otro punto del código. Pues nada, meto una expresión lambda

[code language="scala"]
  calculate(1, 2)((n1: Int, n2: Int) =&gt; n1 + n2) //returns 3
[/code]

Como se puede observar, en este caso se utiliza una función anónima para definir la operación que queremos aplicar a los dos enteros. Es una forma ágil y rápida de definir funciones. Pero no se queda aquí. Gracias a la inferencia de tipos, nos podemos saltar marcar el tipo de los parámetros de entrada:

[code language="scala"]
  calculate(1, 2)((n1, n2) =&gt; n1 + n2) //returns 3
[/code]

Y si aplicamos un poco de sintatix sugar....

[code language="scala"]
  calculate(1, 2)(_ + _) //returns 3
[/code]

<strong>¿Qué ventajas tenemos respecto a la implementación orientada a objetos?</strong>
<ul>
	<li>Nuestro código se reduce de manera significativa:</li>
</ul>

[code language="scala"]
  object Calculator {

    type Operation = (Int, Int) =&gt; Int
    
    def calculate(n1: Int, n2: Int)(operation: Operation) =
      operation(n1, n2)
  }
[/code]

<ul>
	<li>No estamos atados a utilizar solo las operaciones que hemos definido a fuego en nuestra implementación. Podemos hacer otras operaciones más complejas al vuelo:</li>
</ul>

[code language="scala"]
  calculate(1, 2)((n1, n2) =&gt; (n1 + n2) * (n1 - n2))
[/code]

Como siempre pasa en Scala, su mal uso puede provocar problemas algo desagradables. En futuros post veremos el lado oscuro de las expresiones lambda. Mientras tanto viviremos felices.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>245</wp:post_id>
  <wp:post_date>2015-05-27 17:00:00</wp:post_date>
  <wp:post_date_gmt>2015-05-27 15:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>expresiones-lambda-a-cholon</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="anonymous"><![CDATA[anonymous]]></category>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="lambda"><![CDATA[lambda]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[400]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11065333364]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/603578460670328833";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Hello World en Akka (Parte II: La Venganza)</title>
  <link>https://scalerablog.wordpress.com/2015/05/06/hello-world-en-akka-parte-ii-la-venganza/</link>
  <pubDate>Wed, 06 May 2015 13:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=266</guid>
  <description/>
  <content:encoded><![CDATA[La <a title="Hello World en Akka (Parte I)" href="https://scalerablog.wordpress.com/2015/04/29/hello-world-en-akka-parte-i/" target="_blank">semana pasada</a> aprendimos que era eso del modelo de actores. Además, vimos como crear nuestro propio actor en Akka. Recordemos como nos quedó:

[code language="scala"]
class MyFirstActor extends Actor {

  def receive = {
    case _ =&gt; println(&quot;Hello World!&quot;)
  }

}
[/code]

Y seguro que alguno pensasteis: "Pues qué bien. ¿Y que hago yo ahora con esto?".

<a href="https://scalerablog.files.wordpress.com/2015/05/wtfshit.jpg"><img class=" size-medium wp-image-279 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/wtfshit.jpg?w=300" alt="wtfshit" width="300" height="230" /></a>

Bueno, hoy vamos a acabar este <em>Hello World</em>. Solo nos queda aprender dos conceptos importantes para terminar el ejemplo:
<ul>
	<li>Ahora que ya sabemos definir actores, ¿cómo podemos instanciarlos?</li>
	<li>Una vez que tenemos instancias de actores, ¿cómo podemos enviarle mensajes?</li>
</ul>
Una vez que tengamos claro como hacer estas dos últimas cosas, podremos tener funcionando nuestro <em>Hello World</em>.

<strong>Creación de Actores</strong>

Lo primero que tenemos que saber es que todos los actores en <em>Akka</em> se crean en un determinado contexto. Dicho contexto puede ser un sistema de actores del tipo <strong><em>ActorSystem</em></strong>. Dicho sistema será el encargado de manejar y gestionar todo el modelo de actores que montemos en él. Para crearlo basta con incluir la siguiente línea:

[code language="scala"]
val system = ActorSystem(&quot;my-first-system&quot;)
[/code]

Utilizaremos un <em>String</em> en el argumento en el <em>ActorSystem</em> para poder identificarlo mediante un nombre concreto. Este sistema será el contexto donde vivirán todos los actores de nuestro programa. Debido a que es un objeto bastante pesado, recomiendan solo tener una instancia por programa.

Otra opción posible es crear un actor dentro de otro actor. De esta manera estaríamos creando un actor dentro del contexto de otro. Esto es a lo que se le llama <strong><em>Supervision</em></strong>. Pero como nuestro objetivo es hacer un sencillo <em>Hello World</em>, no vamos a entrar en ello.

Ahora que ya tenemos un sistema, podemos crear actores en él. Lo primero que se nos ocurriría sería utilizar el constructor de un <em>Actor</em>. Pues no. No todo es tan sencillo. Para crear un actor es necesario usar un <strong><em>Props</em></strong>. El <em>Props</em> es un objeto de configuración que nos permitirá crear un actor y definir los argumentos que queremos pasarle al mismo (en caso de que los tenga). Vamos a ver un ejemplo sencillo:

[code language="scala"]
system.actorOf(Props[MyFirstActor], &quot;myFirstActor&quot;)
[/code]

Como se puede observar, el sistema tiene un método para crear actores. Dicho método (llamado <strong><em>actorOf</em></strong>) recibe como argumento un <em>Props</em> y, de forma opcional, un nombre para identificar al actor.

Es importante saber, que el método actorOf no nos devolverá una instancia de Actor. Realmente nos devolverá una referencia al actor. Nos devolverá un <strong><em>ActorRef</em></strong>. Pero no hay que preocuparse. Mediante este <em>ActorRef</em> podremos enviar mensajes al actor sin ningún problema.

<strong>Envío de mensajes</strong>

Definir actores está muy bien. Crearlos mejor aún. Pero no hay que olvidar que la naturaleza de un actor es sustancialmente reactiva. Si no sabemos enviarles mensajes para causar una reacción, un actor no sirve de mucho.
En <em>Akka</em> hay dos formas de enviar mensajes a los actores. La forma más básica es usar el método <strong><em>tell</em></strong>.

[code language="scala"]
actorRef.tell(msg: Any, sender: ActorRef): Unit
[/code]

Este método nos permite enviar un mensaje a un actor (<em>actorRef</em>) y.....ya está. No vamos a esperar a recibir una respuesta. Esa es la razón por la que el método devuelve <em>Unit</em>. Además, es importante saber que en el campo <em>sender</em> insertaremos la referencia al actor que queremos que aparezca como remitente. Para nuestro Hello World no es importante, pero más adelante veremos que mediante esta variable podemos hacer que un actor A que envía un mensaje a un actor B consiga que el actor B responda a otro actor C mediante esta variable llamada <em>sender</em>.

<a href="https://scalerablog.files.wordpress.com/2015/05/tellexamplesender.png"><img class="  wp-image-289 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/tellexamplesender.png?w=300" alt="tellExampleSender" width="421" height="237" /></a>

La signatura de <em>tell</em> parece un poco aparatosa. Por ello existe una forma abreviada, mediante sintactic sugar, de utilizar dicho método:

[code language="scala"]
actorRef ! &quot;Yeah, madafaka!&quot;
[/code]

Mediante esta linea estamos mandando un saludo muy del Bronx a un actor cuya referencia está en la variable actorRef. En este caso, siempre que utilicemos el método tell mediante '!', el remitente coincidirá con la instancia de actor que haya enviado el mensaje.

Pero quizás puede que queramos tener un feedback del actor. Puede que queramos esperar una respuesta del mismo. Don't Panic! Para ello usamos el método <strong><em>ask</em></strong>:

[code language="scala"]
import akka.pattern.ask

def ask(actorRef: ActorRef, message: Any)(implicit timeout: Timeout): Future[Any])
[/code]

Además del mensaje que queremos enviar y del actor al que enviamos el mensaje, será necesario establecer un <em>timeout</em> para no estar esperando una respuesta de forma indefinida. En este caso no es necesario establecer un <em>sender</em> (remitente) ya que que siempre será el actor que ha enviado el mensaje.

Como la respuesta la esperamos de manera asíncrona, vendrá devuelta en un futuro. ¿Un futuro? ¿Qué #$?&amp; es eso? Por ahora, sin entrar en detalles, diremos que un futuro es un contenedor en el que se generará un dato, cuando dicho dato esté listo. Más adelante, en futuros post, veremos el tipo <strong><em>Future</em></strong> con más detalle.

Como en el caso de tell, también tenemos una forma más simple de utilizar el método <em>ask </em>utilizando el símbolo '?':

[code language="scala"]
val response: Future[Any] = actorRef ? &quot;What time is it?&quot;
[/code]

<strong>Finalmente, el Hello World</strong>

Ahora que ya sabemos crear actores y enviar mensajes, utilizando el actor que definimos anteriormente podremos terminar de implementar el "<em>Hello World</em>" en Akka:

[code language="scala"]
class MyFirstActor extends Actor {

  def receive = {
    case _ =&gt; println(&quot;Hello World!&quot;)
  }

}

object HelloWorldBoot extends App {

  val system = ActorSystem(&quot;my-first-system&quot;)
  val myActor: ActorRef = 
    system.actorOf(Props[MyFirstActor],&quot;my-first-actor&quot;)

  myActor ! &quot;Start!&quot;

}
[/code]

Basta con crear un ActorSystem, un actor en el sistema y enviar un mensaje para que el actor, al recibirlo, haga un println de "Hello World".

Si todo ha ido bien, después de lanzar el programa veremos un Hello World muy hermoso por pantalla.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>266</wp:post_id>
  <wp:post_date>2015-05-06 13:00:00</wp:post_date>
  <wp:post_date_gmt>2015-05-06 13:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hello-world-en-akka-parte-ii-la-venganza</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="actors"><![CDATA[actors]]></category>
  <category domain="post_tag" nicename="akka"><![CDATA[akka]]></category>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[279]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/VYAUDt8UJ6]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:3064583607;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>¿Implícito, Lisa, o ilícito?</title>
  <link>https://scalerablog.wordpress.com/2015/05/20/implicito-lisa-o-ilicito/</link>
  <pubDate>Wed, 20 May 2015 15:00:00 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=313</guid>
  <description/>
  <content:encoded><![CDATA[Uno de los mayores temores de un iniciado a Scala es el uso de implícitos: no gustan, se evitan, dan miedo, se envían a Satán.

<a href="https://scalerablog.files.wordpress.com/2015/05/satan.jpg"><img class="  wp-image-316 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/satan.jpg?w=300" alt="satan" width="175" height="131" /></a>

Y es una pena que disponiendo de tan poderosa herramienta, por una cuestión de pánico escénico, se le relegue a un segundo plano, o no se use. Los implícitos pueden resultar una solución elegante para determinadas circunstancias que citaremos posteriormente.

Para comprender mejor a la criatura, establezcamos un marco teórico.

<h3>Valores implícitos</h3>

Imaginemos que estamos definiendo la función 'identidad' sobre las operaciones de los números enteros (Dado un entero y una operación, devolver el mismo número entero). En base al tipo de operación, el valor por el cual hay que operar (suma, multiplicación,...) es distinto. Por ejemplo, para la adición empleamos el 0 (<em><strong>0 + n = n</strong></em>) y para la multiplicación usamos 1 (<em><strong>1 * n = n</strong></em>). Para evitar pasar este elemento neutro de manera explícita podríamos hacer uso de los implícitos como sigue.

Primero nos declaramos un número entero implícito que representará nuestro elemento neutro para la suma:

[code language="scala"]
implicit val addNeutralElement: Int = 0
[/code]

Y ahora declaramos la operación identidad en la suma:

[code language="scala"]
def addIdentity(n: Int)(implicit neutral: Int): Int = 
  n + neutral
[/code]

Fijaros bien que los parámetros implícitos en el método se declaran en otro grupo de argumentos y precedidos de la palabra reservada '<em><strong>implicit</strong></em>'.
Otra observación a tener en cuenta es que lo importante no es el nombre del argumento en el método, sino el tipo: el compilador buscará en el ámbito del método, un valor implícito de tipo entero

Este mismo principio también aplica a métodos:

[code language="scala"]
implicit def generateAddIdentity():Int = 0
[/code]

...y objetos...

[code language="scala"]
abstract class NeutralElement(n: Int)
implicit case object AddNeutralElement extends NeutralElement(0)
[/code]

<h3>Implicit ambiguity / Scopes</h3>
Supongamos ahora que queremos definir la función identidad para la multiplicación. En el mismo ámbito podríamos definir otro valor implícito para el elemento neutro en la multiplicación:

[code language="scala"]
implicit val addNeutralElement: Int = 0
implicit val productNeutralElement: Int = 1
def addIdentity(n: Int)(implicit neutral: Int): Int = 
  n + neutral
def productIdentity(n: Int)(implicit neutral: Int): Int = 
  n * neutral
[/code]

Si tratamos de ejecutar cualquiera de los dos métodos...<strong>Woops</strong>! El compilador chilla algo ininteligible:

[code]
scala&gt; addIdentity(2)
&lt;console&gt;:13: error: ambiguous implicit values:
 both value addNeutralElement of type =&gt; Int
 and value productNeutralElement of type =&gt; Int
 match expected type Int
              addIdentity(2)
                         ^
[/code]

Lo que viene a querer decir es que no sabe cual de los dos valores implícitos debe tomar, es decir, existe ambigüedad de implícitos. Para evitar esto, se definen ámbitos que suelen venir dados por objetos. Algo del siguiente estilo:

[code language="scala"]
object AddStuff {
  implicit val addNeutralElement: Int = 0
  def addIdentity(n: Int)(implicit neutral: Int): Int = 
    n + neutral
}

//in your snippet...

{
  import AddStuff._
  addIdentity(2)
}
[/code]

Ya se que esto pide a gritos una type-class, pero no robemos el minuto de fama a los implícitos...

<h3>Implicit classes</h3>

También podemos declarar clases implícitas en Scala. La función principal de esta herramienta es la de extender funcionalidad de determinadas clases. Por ejemplo, supongamos que estamos usando un framework de un tercero, y una de sus clases tiene la siguiente pinta:

[code language="scala"]
class ThirdParties {
  def method1(): Int = ???
  def method2(n:Int): Boolean = ???
}
[/code]

Como no podemos modificar el código fuente de este framework, pero queremos añadir nuevos métodos a la clase 'ThirdParties' podemos definir una clase implícita como sigue:

[code language="scala"]
implicit class ExtraThirdParties(tp: ThirdParties){
  def method3(n: Int): Boolean = 
    !tp.method2(n)
  def method4(): Int = ???
  def method5(): Int = 
    tp.method1() * 2
}
[/code]

De esta manera, cuando escribamos un valo de tipo 'ThirdParties' seguido de un método que no pertenece a su clase, el compilador buscará clases y/o métodos implícitos que encajen en dicha signatura. Así podremos usar, tanto los métodos definidos originalmente por la clase 'ThirdParties', como los métodos complementarios que acabamos de definir en la clase implícita:

[code language="scala"]
val myTp = new ThirdParties
myTp.method1()
myTp.method2(5)
myTp.method3(2)
myTp.method4()
myTp.method5()
[/code]

<h3>Casos de uso</h3>

La pregunta del millón entonces es, ¿en qué casos podemos aplicar esta poderosa navaja suiza?

* Establecer contextos de ejecución
* Aportar información adicional sobre un parameter type (type classes)
* Generar DSLs
* Ampliar funcionalidad de una clase (implicit classes)

Dado que poner ejemplos de todos ellos sería muy extenso, veremos algunos de estos casos prácticos en futuros posts.

<a href="https://scalerablog.files.wordpress.com/2015/05/giphy.gif"><img class=" size-full wp-image-320 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/giphy.gif" alt="giphy" width="245" height="180" /></a>

¡Agur de limón! :-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>313</wp:post_id>
  <wp:post_date>2015-05-20 17:00:00</wp:post_date>
  <wp:post_date_gmt>2015-05-20 15:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>implicito-lisa-o-ilicito</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="ambiguity"><![CDATA[ambiguity]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="class"><![CDATA[class]]></category>
  <category domain="post_tag" nicename="identity"><![CDATA[identity]]></category>
  <category domain="post_tag" nicename="implicit"><![CDATA[implicit]]></category>
  <category domain="post_tag" nicename="implode"><![CDATA[implode]]></category>
  <category domain="post_tag" nicename="medium"><![CDATA[medium]]></category>
  <category domain="post_tag" nicename="neutral"><![CDATA[neutral]]></category>
  <category domain="post_tag" nicename="satan"><![CDATA[satan]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/jyrozPc2Et]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:3064583607;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>15</wp:comment_id>
    <wp:comment_author><![CDATA[Type classes en Scala | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/07/22/561/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.100.204</wp:comment_author_IP>
    <wp:comment_date>2015-07-22 17:01:13</wp:comment_date>
    <wp:comment_date_gmt>2015-07-22 15:01:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] cuantos meses con el blog ya hemos podido saber donde podemos usar traits, para qué sirven los implícitos o qué narices son eso de los tipos genéricos. Hoy vamos a utilizar un poco de todo para explicar [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1437577274.4783489704132080078125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1437584371</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1437581035.3686859607696533203125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1437584372.1981029510498046875;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-07-22 15:01:13</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Torre de Babel</title>
  <link>https://scalerablog.wordpress.com/2015/05/29/torre-de-babel/</link>
  <pubDate>Fri, 29 May 2015 08:00:00 +0000</pubDate>
  <dc:creator>scalerablog</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=328</guid>
  <description/>
  <content:encoded><![CDATA[Nos llena de orgullo y satisfacción poder anunciar que a partir de hoy nos volvemos un poco más políglotas :-D

Hemos revisado los posts que llevábamos hasta la fecha publicados y, tras un duro proceso de restauración, los hemos remasterizado full HD con un toque de inglés (nuestros agradecimientos a <a title="mmartinbarr" href="https://twitter.com/mmartinbarr">@mmartinbarr</a> :-D ). La idea es continuar publicando en sendos idiomas, la lengua mater castellana y el idioma de Shakespeare, ofreciendo todo nuestro <strong>extenso</strong> conocimiento sobre Scala.

....<strong>extenso</strong>....

<a href="https://scalerablog.files.wordpress.com/2015/05/tumblr_inline_nn0gcik58f1qbhmtm_500.gif"><img class=" size-full wp-image-329 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/tumblr_inline_nn0gcik58f1qbhmtm_500.gif" alt="tumblr_inline_nn0gciK58f1qbhmtm_500" width="290" height="189" /></a>

Gracias a todos

- El equipo de Scalera -]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>328</wp:post_id>
  <wp:post_date>2015-05-29 10:00:00</wp:post_date>
  <wp:post_date_gmt>2015-05-29 08:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>torre-de-babel</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="anuncio"><![CDATA[anuncio]]></category>
  <category domain="post_tag" nicename="babel"><![CDATA[babel]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="castellano-2"><![CDATA[castellano]]></category>
  <category domain="post_tag" nicename="english-2"><![CDATA[english]]></category>
  <category domain="post_format" nicename="post-format-aside"><![CDATA[Minientrada]]></category>
  <category domain="post_tag" nicename="torre"><![CDATA[torre]]></category>
  <category domain="post_tag" nicename="traduccion"><![CDATA[traduccion]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11123751333]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/604197522962186240";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Tower of Babel</title>
  <link>https://scalerablog.wordpress.com/2015/05/29/tower-of-babel/</link>
  <pubDate>Fri, 29 May 2015 08:01:00 +0000</pubDate>
  <dc:creator>scalerablog</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=332</guid>
  <description/>
  <content:encoded><![CDATA[We're really proud to announce that, from now, we're becoming a little bit more polyglots :-D

We've been having a look at all published posts so far and, after a hard restoring process, he have remastered them full HD with a spoonful of english (our thanks to <a title="mmartinbarr" href="https://twitter.com/mmartinbarr">@mmartinbarr</a> :-D ). What we have in mind is going on publishing in both languages, our mother language Castilian and Shakespeare's language, offering all of our <strong>extensive</strong> knowledge about Scala.

...<strong>extensive</strong>...

<a href="https://scalerablog.files.wordpress.com/2015/05/tumblr_inline_nn0gcik58f1qbhmtm_500.gif"><img class=" size-full wp-image-329 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/tumblr_inline_nn0gcik58f1qbhmtm_500.gif" alt="tumblr_inline_nn0gciK58f1qbhmtm_500" width="290" height="189" /></a>

Thanks everybody!

- Scalera's Staff -]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>332</wp:post_id>
  <wp:post_date>2015-05-29 10:01:00</wp:post_date>
  <wp:post_date_gmt>2015-05-29 08:01:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tower-of-babel</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="announcement"><![CDATA[announcement]]></category>
  <category domain="post_tag" nicename="babel"><![CDATA[babel]]></category>
  <category domain="post_tag" nicename="castilian"><![CDATA[castilian]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="english-2"><![CDATA[english]]></category>
  <category domain="post_format" nicename="post-format-aside"><![CDATA[Minientrada]]></category>
  <category domain="post_tag" nicename="tower"><![CDATA[tower]]></category>
  <category domain="post_tag" nicename="translation"><![CDATA[translation]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11123752576]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/604197535473774592";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Welcome, "Amigos"</title>
  <link>https://scalerablog.wordpress.com/2015/05/29/welcome-amigos/</link>
  <pubDate>Fri, 29 May 2015 08:02:29 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=344</guid>
  <description/>
  <content:encoded><![CDATA[Another Scala blog ¬¬? Well… yep, but this one’s written by funny, cool people from Spain!

<a href="https://scalerablog.files.wordpress.com/2015/02/1236090148868_f.jpg"><img class="alignnone  wp-image-26" src="https://scalerablog.files.wordpress.com/2015/02/1236090148868_f.jpg?w=300" alt="1236090148868_f" width="239" height="238" /></a>

More than 3 years ago, when we started to dive into Scala at work, we (aka the brave ones) soon found out that documentation was scarce, and the little that existed was so cold, so deprived of motherly love… in short, you couldn’t understand any of it.

Several years have gone by, meet-up groups have been created, talks have been organized, VIP Scala developers are invited to give conferences… it’s been a huge rush, indeed. However, market still lacks developers skilled in this language, capable of not only replacing Java’s syntax for Scala’s but also adopting functional’s way of thinking as their own, which is essential to get to feel comfortable with this <del>demoniac language</del> lovely creature.

<a href="https://scalerablog.files.wordpress.com/2015/02/937.gif"><img class="alignnone size-medium wp-image-27" src="https://scalerablog.files.wordpress.com/2015/02/937.gif?w=300" alt="937" width="300" height="180" /></a>

When talking about this with my mate a few days ago, we realized that, even if this need may be not as imperative as it was, it still exists. Each time, more and more people want to become close to the language or to functional programming in general and it is still tough: no tips, faqs, common mistakes…

What we will do here is to try and fill those gaps by giving you a little of our time and a lot of our will.

So, enough chitchat. Let’s go!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>344</wp:post_id>
  <wp:post_date>2015-05-29 10:02:29</wp:post_date>
  <wp:post_date_gmt>2015-05-29 08:02:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>welcome-amigos</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="initial"><![CDATA[initial]]></category>
  <category domain="post_tag" nicename="post"><![CDATA[post]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="welcom"><![CDATA[welcom]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11123753496]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/604197544067866624";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Hello World! *</title>
  <link>https://scalerablog.wordpress.com/2015/05/29/hello-world/</link>
  <pubDate>Fri, 29 May 2015 08:03:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=346</guid>
  <description/>
  <content:encoded><![CDATA[What’s the first thing that we usually do when we start learning a programming language? That’s it, a ‘Hello World’. In order to implement it in Scala, we first need to know two basics:
<ul>
	<li>How can we make executable applications?</li>
</ul>
Easy! We just need an object that inherits from <strong><em>App</em></strong>. The reserved word <strong><em>object</em></strong> is used to define an object. The reserved word <strong>extends</strong> is used to implement inheritance.
<ul>
	<li>How can we print a message on the screen?</li>
</ul>
We might want to use a brief and easy-to-type name such as <em>System.out.println</em>, but unfortunately we have to be content with <strong><em>println</em></strong> function.

So, now that we have our two main ingredients, let’s go with it:

[code language="scala"]

object HelloWorld extends App {

  println(&quot;Hello World!&quot;)

}

[/code]

Ok… and now, how do I run it?

The first thing to be done is to add an extension to our wonderful first source file. Unexpectedly, in a display of unparalleled originality, the extension of Scala source files is <em>.scala</em>.

Once we have the source file, we need some tools to work with it. The first option to build and run Scala code is <strong>SBT</strong> (Simple Build Tool). It is similar to Maven or Ant. It allows us to add dependencies and set the Scala version we want to work with. Some IDEs such as Intellij use it as a built in.

How to install SBT?
<ul>
	<li><a title="MAC" href="http://www.scala-sbt.org/release/tutorial/Installing-sbt-on-Mac.html" target="_blank">MAC</a></li>
	<li><a title="LINUX" href="http://www.scala-sbt.org/release/tutorial/Installing-sbt-on-Linux.html" target="_blank">LINUX</a></li>
	<li><a title="Windows" href="http://www.scala-sbt.org/release/tutorial/Installing-sbt-on-Windows.html" target="_blank">WINDOWS</a></li>
</ul>
Which are the basic SBT commands?
<ul>
	<li><strong><em>compile</em></strong>: compiles the source files in a project.</li>
	<li><strong><em>test:compile</em></strong>: compiles the tests in a project. If necessary, it will compile the source files too.</li>
	<li><strong><em>run</em></strong>: runs an application. If necessary, it will compile the source files.</li>
	<li><strong><em>test</em></strong>: runs the tests in a project. If necessary, it will compile the source files and the tests.</li>
</ul>
To execute our ‘Hello world’, we just launch sbt in the directory where the source file .scala is and we write the command ’run’.

Now we wait

...

...

...

<a href="https://scalerablog.files.wordpress.com/2015/03/e4tvwy.jpg"><img class="alignnone size-medium wp-image-100" src="https://scalerablog.files.wordpress.com/2015/03/e4tvwy.jpg?w=300" alt="e4tvwy" width="300" height="221" /></a>

...

...

Hello, someone there?

If it’s the first time you use Scala, SBT will try to get all the required dependencies to build and run Scala code. It may take a while, depending on your Internet connection. This won’t happen next time, just the first one.

Et voila! First program in Scala. Easy-peasy, isn’t it?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>346</wp:post_id>
  <wp:post_date>2015-05-29 10:03:00</wp:post_date>
  <wp:post_date_gmt>2015-05-29 08:03:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hello-world</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="app"><![CDATA[app]]></category>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="hello"><![CDATA[hello]]></category>
  <category domain="post_tag" nicename="object"><![CDATA[object]]></category>
  <category domain="post_tag" nicename="sbt"><![CDATA[sbt]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="world"><![CDATA[world]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11123754639]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/604197555207983105";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Traversable ops - Fold *</title>
  <link>https://scalerablog.wordpress.com/2015/05/29/traversable-ops-fold-2/</link>
  <pubDate>Fri, 29 May 2015 08:04:46 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=352</guid>
  <description/>
  <content:encoded><![CDATA[This is the first of a series of blog entries related to the most common operations in Scala’s functional programming world: operations belonging to the Traversable API.
strong&gt;Traversable is considered to be the basis of all Scala collections and is characterized mainly by two features:
<ul>
	<li><em>Strictness</em>: All elements have to be computed previously for them to be treated as values.</li>
	<li><em>Orderness</em>: Elements keep an order between them.</li>
</ul>
There are other types of collections, such as Streams, which have a lazy evaluation strategy, but let’s not lose focus. Today, we will talk about fold operation… without getting worked up, without breaking down.

<a href="https://scalerablog.files.wordpress.com/2015/03/nly1wxv.gif"><img class="alignnone size-full wp-image-91" src="https://scalerablog.files.wordpress.com/2015/03/nly1wxv.gif" alt="nlY1Wxv" width="227" height="158" /></a>

Suppose we want to concatenate numbers from 1 to 5 in a text string, getting the result “My numbers are: 12345”. What would our first approach be? It could be something like this:

[sourcecode language="scala"]
var initial: String = &quot;My numbers are: &quot;
for(i &lt;- 1 to 10){
  initial = initial + i.toString
}
[/sourcecode]

his would work. But you can imagine how nasty the variables would look like.

<a href="https://scalerablog.files.wordpress.com/2015/03/40hylzx.gif"><img class="alignnone size-medium wp-image-72" src="https://scalerablog.files.wordpress.com/2015/03/40hylzx.gif?w=300" alt="40HYLZX" width="300" height="214" /></a>

Don’t you worry. The operation that can be used to replace the above loop is fold, which has two varieties: <strong>foldLeft</strong> and <strong>foldRight</strong>. While the first operation acts on the Traversable in an element by element iterative way, the second one does it recursively, thus being unadvisable to use this last one if the target collection is considerably large. We will focus, then, on the first operation.

he notation of <strong>foldLeft</strong> for a given Traversable[T] is:

[sourcecode language="scala"]
def foldLeft[U](zero: U)(f: (U,T) =&gt; U): U
[/sourcecode]

If we put it this way, it may seem a little bit difficult to understand. So, let’s apply the operation to the previous example:

‘Zero’ element would be in this case the initial text string “My numbers are:” (String type). And the function to be applied to each pair of (String, Int) would be concatenation.

Thus, we would be able to express the first code snippet, without using any variable at all, in the following way:

[sourcecode language="scala"]
(1 to 5).foldLeft(&quot;My numbers are: &quot;)(
  (accumulator,iterator) =&gt; accumulator + iterator.toString)
[/sourcecode]

For those who think that this syntax is too mainstream, there is an alternative notation to perform the same operation:

[sourcecode language="scala"]
(&quot;My numbers are: &quot; /: (1 to 5))((accumulator,iterator) =&gt;
  accumulator + iterator.toString)
[/sourcecode]

Easy, simple and for the entire family :-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>352</wp:post_id>
  <wp:post_date>2015-05-29 10:04:46</wp:post_date>
  <wp:post_date_gmt>2015-05-29 08:04:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>traversable-ops-fold-2</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="fold"><![CDATA[fold]]></category>
  <category domain="post_tag" nicename="foldleft"><![CDATA[foldleft]]></category>
  <category domain="post_tag" nicename="foldright"><![CDATA[foldright]]></category>
  <category domain="post_tag" nicename="ops"><![CDATA[ops]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="traversable"><![CDATA[traversable]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11123755832]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/604197572190683136";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Using nulls is not an Option</title>
  <link>https://scalerablog.wordpress.com/2015/05/29/using-nulls-is-not-an-option/</link>
  <pubDate>Fri, 29 May 2015 08:05:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=354</guid>
  <description/>
  <content:encoded><![CDATA[This blog post is dedicated to all people who hate nulls.
Why do NullPointerExceptions exist? Why do we have to work with nulls at all? Why? Or like Mourinho would say: Why? Why? WHY?

<a href="https://scalerablog.files.wordpress.com/2015/03/mourinho.gif"><img class="  wp-image-91 aligncenter" src="https://scalerablog.files.wordpress.com/2015/03/mourinho.gif" alt="nlY1Wxv" width="268" height="201" /></a>

Ladies, gentlemen, we, Scala programmers are null-haters. We work with <em>Option</em> type :)

<strong>What is an Option?</strong>

An <em>Option</em> is a parameterized type that can have two possible values:
<ul>
	<li>Some(T)</li>
	<li>None</li>
</ul>
For instance, an <em>Option[Int]</em> can be <em>Some(1),</em> <em>Some(123456),</em> <em>None...</em>

<strong>And what does this have to do with nulls?</strong>

We can encapsulate <em>nulls</em> in <em>Option</em>, and by doing so, instead of working directly with <em>nulls</em>, we can work with a type that is prepared to handle null values.

[code language="scala"]
Option(null) === None
[/code]

No more null pointers exploding, or checks of the kind <em>if myValue == null.</em>

<a href="https://scalerablog.files.wordpress.com/2015/03/mourinhooh.jpg"><img class="  wp-image-91 aligncenter" src="https://scalerablog.files.wordpress.com/2015/03/mourinhooh.jpg" alt="nlY1Wxv" width="248" height="248" /></a>

Imagine the typical method that returns a value from a map:

[code language="scala"]
val m =
  Map(
    1 -&gt; &quot;head&quot;,
    2 -&gt; &quot;shoulders&quot;,
    3 -&gt; &quot;knees&quot;,
    4 -&gt; &quot;toes&quot;
  )
[/code]

If we didn’t work with Option, we would have to check if a given key exists before asking for its value.

[code language="scala"]
if(m.contains(1))
  println(&quot;I'm pointing at my: &quot; + m(1))
else
  println(&quot;I'm actually pointing to nowhere&quot;)
[/code]

However, we can query the map for a value encapsulated in an <em>Option</em>, and in case it doesn’t exist, that <em>Option</em> will be <em>None</em>.

[code language="scala"]
m.get(1) //Returns Some(&quot;head&quot;)
m.get(5) //Returns None
[/code]

<strong>How can we work with <em>Option</em> type?</strong>

There are several ways to work with this gentle structure.

First of all, we have <em>getOrElse</em> method. This method returns either the value of the <em>Option</em> (in case it is <em>Some</em>) or what is passed as an argument to this method.
A simple example:

[code language="scala"]
m.get(1).getOrElse(&quot;belly button&quot;)
[/code]

Another possibility is to use <em>Pattern Matching</em>:

[code language="scala"]
m.get(1) match {
  case Some(bodyPart) =&gt;
    println(&quot;Girl, look at my &quot; + bodyPart)
  case None =&gt;
    println(&quot;I’m sexy and I know it&quot;)
}
[/code]

We can also work with <em>fold</em> method. <em>Fold</em> method, unlike <em>getOrElse</em> method (and just as pattern matching), allows us to apply some function to the returned method. The first argument of the function (called <em>ifEmpty</em>) gets the result that is to be returned in case the <em>Option</em> is <em>None</em>. The second argument gets a function that must be defined to know which result is to be returned in case the <em>Option</em> has a value.

[code language="scala"]
m.get(1).fold(
  ifEmpty = println(&quot;I don’t feel like dancing&quot;)){
  step =&gt; println(s&quot;I broke my $bodyPart while dancing La Macarena&quot;)
}
[/code]

And for those of you who are functional lovers (warm greetings to you all), we shall not forget that an <em>Option</em> is a monad and thus, transformations can be made, for instance, with <em>map</em>, <em>flatmap</em> or with just a spoonful of syntactic sugar, <em>for-comprehension</em>:

[code language="scala"]
for {
  first &lt;- m.get(1)
  second &lt;- m.get(2)
} yield s&quot;I’ll start pointing my $first and then my $second&quot;
[/code]

There are other similar structures that will be detailed in future posts: <em>Either</em>, <em>Try</em>, ... but let things take their course.

So, remember: if you use Option children smile, little birds sing and nulls disappear :)

<a href="https://scalerablog.files.wordpress.com/2015/03/mourinhook.jpg"><img class="  wp-image-91 aligncenter" src="https://scalerablog.files.wordpress.com/2015/03/mourinhook.jpg" alt="nlY1Wxv" width="350" height="208" /></a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>354</wp:post_id>
  <wp:post_date>2015-05-29 10:05:00</wp:post_date>
  <wp:post_date_gmt>2015-05-29 08:05:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>using-nulls-is-not-an-option</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="null"><![CDATA[null]]></category>
  <category domain="post_tag" nicename="option"><![CDATA[option]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11123756801]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/604197581854367744";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>10</wp:comment_id>
    <wp:comment_author><![CDATA[Catching exceptions in Scala: Try type | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/06/29/catching-exceptions-in-scala-try-type/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.99.213</wp:comment_author_IP>
    <wp:comment_date>2015-06-29 12:00:52</wp:comment_date>
    <wp:comment_date_gmt>2015-06-29 10:00:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] In the previous piece of code, what we are doing is encrypting the email in case it is successfully obtained. In case an exception is thrown, no transformation will be carried out. The behaviour is identical to the one we already saw applied to Option type. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1435572069</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1435572070.78343296051025390625;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1435572054.698195934295654296875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-06-29 10:00:52</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Vals and Vars *</title>
  <link>https://scalerablog.wordpress.com/2015/05/29/vals-and-vars-2/</link>
  <pubDate>Fri, 29 May 2015 08:06:39 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=357</guid>
  <description/>
  <content:encoded><![CDATA[<h2>Immutable vs mutable</h2>
One of the first lessons that the functional world gives away is that the values we declare (<strong>val</strong>) are immutable, i.e., they can only be given a value once and cannot be modified afterwards (we’ll see later that this statement has its nuances). Henceforth, if we declared:

[code language="scala"]
val myNumber: Int = 2
myNumber = 3 //Compile-time error
[/code]

We wouldn’t be able to change its value. This may seem odd at first, but variables (<strong>var</strong>), commonly used in other programming languages such as Java, are completely discouraged in Scala.

[code language="scala"]
var myNumber: Int = 2
myNumber = 3
println(myNumber) //Prints out '3'
[/code]

What’s the point in this? If we understand that any pure function is not allowed to maintain any state, then it seems obvious that variables can have no place in them. On the other hand, you might think: ‘Yeah, but the world is not functional: as an example, I/O is essential to configure the execution of a program’... You’re absolutely right. That’s why it is recommended that, if variables need to be used, checks are carried out to see if this is absolutely necessary and if so, they should be placed at the nearest point to the application entry.
For anything else, there’s <em>masterVal</em>
<h1>Nounces: Stateful objects.</h1>
We said earlier that if a variable is defined as val, its value cannot be modified. We also said that some nounces could be applied to this statement. Let’s assume that we have the following piece of code:

[code language="scala"]
class Foo {
  private var initialized: boolean = false
  def initialize(): Unit = {
    initialized = true
  }
  def isInitialized(): Boolean = initialized
}
[/code]

If we do now instantiate a Foo-type object

[code language="scala"]
val immutableFoo = new Foo
immutableFoo.isInitialized() // false
immutableFoo = new Foo //Compile-time error
[/code]

If we try to reassign its value, we’ll get a compile-time error (nothing new for now). But if we call its initialize method...

[code language="scala"]
immutableFoo.isInitialzed() // false
immutableFoo.initialize()
immutableFoo.isInitialized() // true
[/code]

...we will have modified its internal state. So, our Foo has become in what’s called a ‘Stateful object’: an object with state. Scala tries to refuse this behaviour but we should not forget that this is the normal thing to do in Java code. Given that one of the facilities of Scala is the integration with Java, the use of Java libraries and frameworks is common practice. Our recommendation is that this pattern is avoided in Scala implementations, but we have to be aware of its likely use in other tools that we might be integrating in our project.
<h1>The best of both worlds...</h1>
One of the main virtues of Scala (scalaz people would kill us for saying this) is the existence of var.

<a href="https://scalerablog.files.wordpress.com/2015/03/kqsqldv.gif"><img class="alignnone  wp-image-140 aligncenter" src="https://scalerablog.files.wordpress.com/2015/03/kqsqldv.gif?w=300" alt="KqsQlDV" width="215" height="124" /></a>

But had you not said before that <strong>var=<del>crap</del></strong>? True. But it is precisely the fact that these kinds of expressions are not forbidden what eases the transition to Scala from other languages such as Java. A transition that might be less traumatic if, at first, the same old constructions are built but with Scala’s syntax for then, further on, adopting a proper functional style.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>357</wp:post_id>
  <wp:post_date>2015-05-29 10:06:39</wp:post_date>
  <wp:post_date_gmt>2015-05-29 08:06:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>vals-and-vars-2</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="object"><![CDATA[object]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="stateful"><![CDATA[stateful]]></category>
  <category domain="post_tag" nicename="val"><![CDATA[val]]></category>
  <category domain="post_tag" nicename="var"><![CDATA[var]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11123757964]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/604197594525376512";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Multiple inheritance: playing God...</title>
  <link>https://scalerablog.wordpress.com/2015/05/29/multiple-inheritance-playing-god/</link>
  <pubDate>Fri, 29 May 2015 08:07:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=359</guid>
  <description/>
  <content:encoded><![CDATA[One of Scala’s main features is the possibility of doing mixin. By using <strong>mixin</strong>, we can have multiple inheritance from several traits. Traits? Mixin? What the ...? Well, step by step :)
<h2>What are traits?</h2>
<strong>Traits</strong> (<em>rasgos</em> for those of you trying to learn Cervantes’ mother tongue) are a bundling of attributes and methods that define a feature o characteristic. They’re similar to Java’s interfaces, except traits can be implemented partially, that is, with only some of its methods or values defined.

They are used to add behaviours to other entities. For instance, let’s implement the trait <em>CanFly</em>, in which we’ll define the values and methods that all flying creatures must conform to:

[code language="scala"]

trait CanFly {

  val altitude: Float

  def fly() = println(&quot;I'm flying!!!&quot;)
}

[/code]

As can be observed, this trait contains an undefined variable altitude and a defined method <em>fly</em>. We can create an instance from this trait by using an anonymous class:

[code language="scala"]

val myFlyingAnimal = new CanFly {}

[/code]

However, given that <em>altitude</em> variable is undefined, this piece of code will result in a <strong>compile time error</strong>. So, for a trait to be instantiated, all values and methods have to be implemented:

[code language="scala"]

val myFlyingAnimal = new CanFly { val altitude = 100.0f }

[/code]

&nbsp;
<h2>How can tratis be used?</h2>
Although we now know how to instantiate traits by means of anonymous classes, to be fair it is not one of its most common applications.

As we said before, traits are used to add behaviours to our entities. And that can be done by using composition, by mixin one or multiple traits when defining a different trait, a class, a case class...

In order to do so, two reserved words are used: strong&gt;<em>extends</em> and <strong><em>with</em></strong>. The first trait from which we inherit will be preceded by <em>extends</em> word, the rest will be preceded by <em>with</em>.

[code language="scala"]

case class Pigeon extends CanFly

case class Superman extends Superhero with CanFly

[/code]

&nbsp;

<img class="  https://scalerablog.files.wordpress.com/2015/03/og6kv6.jpg aligncenter" src="https://scalerablog.files.wordpress.com/2015/03/og6kv6.jpg" alt="nlY1Wxv" width="422" height="246" />

This is what we call Mixin. Now it all makes much more sense, doesn’t it?
<h2>How do traits work when facing the diamond problem?</h2>
Firstly, let’s create an scenario with this ambiguity. On one hand, we have an <em>Animal</em> trait, with a non-implemented method that returns the sound produced by the animal.

[code language="scala"]

trait Animal {
  def sound: String
}

[/code]

On the other hand, we also have two specifications of an animal: a cat and a dog.

[code language="scala"]

trait Cat extends Animal {
  override def sound = &quot;Meow&quot;
}

trait Dog extends Animal {
  override def sound = &quot;Woof&quot;
}

[/code]

Now, by using our boundless imagination, let’s think of a fox as a mixture between a cat and a dog.

[code language="scala"]

case class Fox extends Cat with Dog

[/code]

But, if we try to print the sound of our fox...

[code language="scala"]

val myFox = Fox()
println(myFox.sound)

[/code]

&nbsp;

<img class="  wp-image-91 aligncenter" src="https://scalerablog.files.wordpress.com/2015/03/what-does-the-fox-say-1378489657.jpg" alt="nlY1Wxv" width="422" height="246" />

&nbsp;

Well, in this case, our fox will bark. Why? Because the last trait that’s been used in the mixin is <em>Dog</em>. At first, <em>Cat</em> implementation is applied, but then it is overwritten by the following trait that is defined, that is, <em>Dog</em>. So we can say that traits are instantiated in the same order they are declared.

And that’s all! What have we learnt today? That traits and mixin are pretty useful… and that sometimes, foxes say ‘woof’!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>359</wp:post_id>
  <wp:post_date>2015-05-29 10:07:00</wp:post_date>
  <wp:post_date_gmt>2015-05-29 08:07:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>multiple-inheritance-playing-god</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="inheritance"><![CDATA[inheritance]]></category>
  <category domain="post_tag" nicename="multiple"><![CDATA[multiple]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="trait"><![CDATA[trait]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/604197602972680192";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11123759036]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>17</wp:comment_id>
    <wp:comment_author><![CDATA[Type classes in Scala | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/07/27/type-classes-in-scala/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.99.118</wp:comment_author_IP>
    <wp:comment_date>2015-07-27 12:03:09</wp:comment_date>
    <wp:comment_date_gmt>2015-07-27 10:03:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] a few months with the blog, we now know where we can use traits, what is the purpose of implicits, or what the hell are generic types. Today, we are going to [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1437991390.468048095703125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1437991509</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1437991509.2680070400238037109375;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-07-27 10:03:09</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Structural types</title>
  <link>https://scalerablog.wordpress.com/2015/05/29/structural-types/</link>
  <pubDate>Fri, 29 May 2015 08:08:36 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=362</guid>
  <description/>
  <content:encoded><![CDATA[In computer programming, <strong>Ducktyping</strong> is the definition of types given by the attributes and methods that compose them, and not by inheritance. For instance, in Scala we can define the following <strong>structural type</strong>:

[code language="scala"]
type Animal = {
  val legs: Int
  def noise(): String
}

def animalDescription(a: Animal): String =
  s&quot;My animal has ${a.legs} legs and says ${a.noise()}&quot;
[/code]

In this case, we can say that every class that has an integer attribute called <code>legs</code> and a method <code>noise</code> that returns a <code>String</code> can be referred to as <code>Animal</code>.

Then now, what’s the difference between this and classic inheritance?

[code language="scala"]
trait Animal {
  val legs: Int
  def noise(): String
}
class Dog extends Animal{
  val legs = 4
  def noise() = &quot;woof&quot;
}
[/code]

It may seem that there’s none a priori. In fact, we have to take into account that in Scala, when we use structural types we experience some compile-time overhead because it has to be inferred if the type at issue meets the restrictions that the structural type imposes.

<strong>Then what <del>the hell</del> do structural types offer?</strong>

Quite simple: up until now, we have been assuming that our implementation is 100% <em>home-made</em>. But, what if we are using a framework or a third-party library and the authors are so nice that they declare classes as final or define sealed traits (even private at certain scope)?

<a href="https://scalerablog.files.wordpress.com/2015/04/tgwoyyo.gif"><img class=" size-medium wp-image-196 aligncenter" src="https://scalerablog.files.wordpress.com/2015/04/tgwoyyo.gif?w=300" alt="tGWoYYo" width="300" height="170" /></a>

Well, apart from them having every right to do so, we wouldn’t be able to do anything like this:

[code language="scala"]
package some.private.library {

  sealed trait TraitIWantToExtend {
    val member1: Int
    def method2(): Boolean
  }

  private[some.private] class ClassIMaybeWantToMock extends TraitIWantToExtend {
    val member1 = 2
    def method2() = true
  }

}

package my.package {

  class MyClass extends TraitIWantToExtend {// nuke-explosion in scalac!
    val member1 = 3
    def method2() = false
  }

  def methodToRun[T&lt;:TraitIWantToExtend](obj: T) {
    println(obj.member1)
    println(obj.method2())
  }

}
[/code]

However, if we apply everything we have learnt until now, we can extract the core of the features <strong>we are interested in</strong> and that are common between our class and the class defined in the third party library:

[code language="scala"]
package my.package {

  type CommonFeatures = {
    val member1: Int
    def method2(): Boolean
  }

  class MyClass {// no nuke explosion now ^^
    val member1 = 3
    def method2() = false
  }

  def methodToRun[T&lt;:CommonFeatures](obj: T) {
    println(obj.member1)
    println(obj.method2())
  }

}
[/code]

So, just as with about everything in life, we do not recommend the abuse of this feature. Nevertheless, when facing situations similar to the ones exposed above, it can be really useful.

Peace out friends!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>362</wp:post_id>
  <wp:post_date>2015-05-29 10:08:36</wp:post_date>
  <wp:post_date_gmt>2015-05-29 08:08:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>structural-types</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="duck"><![CDATA[duck]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="structural"><![CDATA[structural]]></category>
  <category domain="post_tag" nicename="types"><![CDATA[types]]></category>
  <category domain="post_tag" nicename="typing"><![CDATA[typing]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11123763559]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/604197657104408577";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Seeking anonymity. Anonymous classes</title>
  <link>https://scalerablog.wordpress.com/2015/05/29/seeking-anonymity-anonymous-classes/</link>
  <pubDate>Fri, 29 May 2015 08:09:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=365</guid>
  <description/>
  <content:encoded><![CDATA[<strong>What are anonymous classes?</strong>

As their name already suggests, anonymous classes are unnamed classes, classes that don’t have a name. They are the classes that corrupt people like the most. They are not declared… BA DUM, TSS!

Now seriously, how can I create an instance from an anonymous class? Easy, simply by using the reserved word <em>new</em> and defining the body with braces.

[code language="scala"]
val myPoint = new{ val x = 1; val y = 2 }
[/code]

This way, we create an instance that has two integer values: <em>x</em> and <em>y</em>. However, as can be appreciated, we have given no name to this class.

<a href="https://scalerablog.files.wordpress.com/2015/04/wtf.jpg"><img class=" size-medium wp-image-196 aligncenter" src="https://scalerablog.files.wordpress.com/2015/04/wtf.jpg?w=300" alt="tGWoYYo" width="300" height="170" /></a>

<strong>Syntactic sugar</strong>

A few weeks ago, we talked about traits and how we could create an instance from a trait by means of an anonymous class.
Perhaps at that time, a WTF the size of Sebastopol crossed your mind. If we take a look at that post, the syntax for creating an instance from a trait was something like this:

[code language="scala"]
  trait AnonymousHero {
    def superpower: String
  }

  val myHero = new AnonymousHero {
    def superpower = &quot;I can compile Scala with my brain&quot;
  }
[/code]

We are creating an instance from a trait! They are no classes anywhere! Is this black magic? Well, no, it’s <strong>sintactic sugar</strong>.

Actually, what is really going on underneath is something like this:

[code language="scala"]
  class AnonymousHeroClass extends AnonymousHero {
    def superpower: String = &quot;I can compile Scala with my brain&quot;
  }

  val myHero = new AnonymousHeroClass

[/code]

As can be seen, when instantiating a trait, what is really happening is that a class that extends that trait is created. After that, an instance of that class is created.

This way, instances can be created from traits without any boilerplate code.

<strong>Bonus-track: Anonymous functions</strong>

<strong>Lambda expressions</strong> can be used in Scala, that is, anonymous functions. Further on, in other posts we’ll get to the importance of the use of anonymous functions in, for instance, methods that accept functions as parameter.
Anonymous functions, just like anonymous classes, are functions that don’t need to be declared.
This is an example of anonymous function:

[code language="scala"]
  (x: Int) =&gt; x + 1
[/code]

In this case, the anonymous function expects an integer and returns that same integer plus one unit.

We must not forget that, in Scala, functions are objects in reality. By taking this last consideration into account, we can relate anonymous functions (or lambda expressions) to anonymous classes.

So, when we use the anonymous function <em>(x: Int) =&gt; x + 1</em>, what is really happening is the creation of an instance of an anonymous class from the trait <em>Function1</em>:

[code language="scala"]
new Function1[Int, Int] {
  def apply(x: Int): Int = x + 1
}
[/code]

Everything fits!

<a href="https://scalerablog.files.wordpress.com/2015/04/understand.gif"><img class=" size-medium wp-image-196 aligncenter" src="https://scalerablog.files.wordpress.com/2015/04/understand.gif?w=300" alt="tGWoYYo" width="300" height="170" /></a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>365</wp:post_id>
  <wp:post_date>2015-05-29 10:09:00</wp:post_date>
  <wp:post_date_gmt>2015-05-29 08:09:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>seeking-anonymity-anonymous-classes</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="anonymous"><![CDATA[anonymous]]></category>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="post_tag" nicename="class"><![CDATA[class]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="function"><![CDATA[function]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/604197789396910080";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11123776175]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>6</wp:comment_id>
    <wp:comment_author><![CDATA[Lambda Expressions Everywhere | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/06/01/lambda-expressions-everywhere/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.99.22</wp:comment_author_IP>
    <wp:comment_date>2015-06-01 15:39:01</wp:comment_date>
    <wp:comment_date_gmt>2015-06-01 13:39:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Or as friends call them: lambda expressions. Anonymous functions, as we already saw in a previous post, are functions that don’t need to be declared previously. Let’s see an example: A function [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1433165942.2165210247039794921875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1433166084</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1433166085.04018306732177734375;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-06-01 13:39:01</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Traversable ops - Map + Flatten = Flatmap *</title>
  <link>https://scalerablog.wordpress.com/2015/05/29/traversable-ops-map-flatten-flatmap-2/</link>
  <pubDate>Fri, 29 May 2015 08:10:29 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=368</guid>
  <description/>
  <content:encoded><![CDATA[One of the most frequently asked questions and that usually leads to confusion among those that are new to Scala is:

<strong>What’s the difference between map and flatMap?</strong>
<h2>Map</h2>
<code>Map</code> function is the prime converter function. It transforms the elements that compose the Traversable into other elements of the same or different type. Its notation is, for a given <code>T[A]</code>:

[code language="scala"]
def map[B](f: A =&gt; B):T[B]
[/code]

If we put an example,

[code language="scala"]
val myList: List[Int] = List(1,2,3)
val anotherList: List[String] =
  myList.map((n:Int) =&gt; n.toString) //List(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;)
[/code]

we have that, given a list of integers, the transformation function <code>(n:Int) =&gt; n.toString</code> is applied to every member in the list, generating a new list whose type is the one that results from the transformation function, that is, <code>String</code> type.

Though this is not unique for <code>map</code> function, we should remember that there are shorter ways to define the transformation function:

[code language="scala"]
val f: Int =&gt; String = (n: Int) =&gt; n.toString
val f: Int =&gt; String = n =&gt; n.toString
val f: Int =&gt; String = _.toString
[/code]

<h2>flatMap</h2>
Well, <code>map</code> is now ok, understood, but then... what the hell is <code>flatMap</code>? In order to understand it, we need to make a short detour and get to know our helping function <code>flatten</code>.
<h2>flatten</h2>
This operation, with the following signature:

[code language="scala"]
def flatten[B](implicit asTraversable: (A) =&gt; GenTraversableOnce[B]): Traversable[B]
[/code]

allows us to flatten a traversable of traversables. That is to say, we flatten the collections that compose a collection. For instance:

[code language="scala"]
val l: List[List[Int]] = List(List(1,2,3),List(),List(4),List(5))
require(l.flatten==List(1,2,3,4,5)
[/code]

The contained type doesn’t have to be the same as the container’s <code>List[List[Int]]</code>). It also applies to some other really interesting traversables, such as <code>Option[T]</code>:

[code language="scala"]
val l: List[Option[Int]] = List(Option(1),None,None,Option(2),Option(3))
require(l.flatten==List(1,2,3)
[/code]

<h2>flatMap (now seriously...)</h2>
Then, what is a <code>flatMap</code>? By now you might have gotten an idea ;-)
It’s just that, the application of a <code>map</code> operation followed by a <code>flatten</code>.

Let’s put a practical example:
<blockquote>We have a function that gets a JSON object and a function that deserializes it, converting it into a map. It is possible that some fields in the JSON object have null value. How can we return a list with the non-null values?</blockquote>
A first approach could be...

[code language="scala"]
type KeyValueMap = Map[String,String]
type ValueList = List[String]
def fieldValues(obj: String, fieldDeser: String =&gt; KeyValueMap): ValueList = {
  fieldDeser(obj).filter{
    case (key,value) =&gt; value != null
  }.values.toList
}
[/code]

But, as David said, <a title="Using nulls is not an Option" href="https://scalerablog.wordpress.com/2015/03/16/using-nulls-is-not-an-option/">using nulls is not an option</a>, and instead of that, we could write

[code language="scala"]
type KeyValueMap = Map[String,String]
type ValueList = List[String]
def fieldValues(obj: String, fieldDeser: String =&gt; KeyValueMap): ValueList = {
  fieldDeser(obj).values.flatMap(Option(_)).toList
}
[/code]

What has happened here? In detail, if we do the same operation but in two steps and simulate the input, we have tha

[code language="scala"]
val it: List[String] =
  List(&quot;value1&quot;,null,&quot;value3&quot;)//Simulating 'fieldDeser(ob).values'
val mapped: Iterable[Option[String]] =
  it.map(Option(_)) //Remember Option(null)==None
require(mapped==List(Option(&quot;value1&quot;),None,Option(&quot;value3&quot;)))
require(mapped.flatten==List(&quot;value1&quot;,&quot;value3&quot;))
[/code]

Now, I think we’ve finally answered to the million-dollar question.

<a href="https://scalerablog.files.wordpress.com/2015/04/1zltyts.gif"><img class=" size-full wp-image-210 aligncenter" src="https://scalerablog.files.wordpress.com/2015/04/1zltyts.gif" alt="1zltyts" width="264" height="216" /></a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>368</wp:post_id>
  <wp:post_date>2015-05-29 10:10:29</wp:post_date>
  <wp:post_date_gmt>2015-05-29 08:10:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>traversable-ops-map-flatten-flatmap-2</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="post_tag" nicename="difference"><![CDATA[difference]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="faq"><![CDATA[faq]]></category>
  <category domain="post_tag" nicename="flatmap"><![CDATA[flatmap]]></category>
  <category domain="post_tag" nicename="flatten"><![CDATA[flatten]]></category>
  <category domain="post_tag" nicename="map"><![CDATA[map]]></category>
  <category domain="post_tag" nicename="ops"><![CDATA[ops]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="traversable"><![CDATA[traversable]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11123833173]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/604198379002806272";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>29</wp:comment_id>
    <wp:comment_author><![CDATA[Abstract alge&#8230; what? Monads | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/10/12/abstract-alge-what-monads/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.100.49</wp:comment_author_IP>
    <wp:comment_date>2015-10-12 17:15:28</wp:comment_date>
    <wp:comment_date_gmt>2015-10-12 15:15:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] are algebraic structures that have a constructor and a flatMap method which, as we already saw in previous posts, is a concatenation of a map method and a [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1444662929.11762905120849609375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1444675679</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1444668273.408401966094970703125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1444675679.913494110107421875;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-10-12 15:15:28</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Hello World in Akka (Part I)</title>
  <link>https://scalerablog.wordpress.com/2015/05/29/hello-world-in-akka-part-i/</link>
  <pubDate>Fri, 29 May 2015 08:12:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=371</guid>
  <description/>
  <content:encoded><![CDATA[Today we are going on a different matter. Since the <strong>reactive programming course</strong> is currently being given in <strong>Coursera</strong>, we are taking the first steps to start working with <strong>Akka</strong>.

Akka is a toolkit developed by the Typesafe ecosystem. It allows the implementation of reactive systems on an <strong>actor-based model</strong>. There are two versions of Akka, one for Java and one for Scala. We will focus, obviously, on the second.

<strong>What's an actor?</strong>

An <strong>actor</strong> in an entity to which messages can be sent. The actor will react to the received messages by performing an action. Besides, it has two main characteristics:
<ul>
	<li>The inside of the actor can’t be accessed from outside. The interaction with the actor can only be achieved by sending messages to it.</li>
	<li>Messages that arrive to the actor will be processed one at a time.</li>
</ul>
To create an actor in Akka - please make an extra comprehension effort - the only thing that is required is extending the trait <em>Actor</em>.

If we want the actor to be fully defined, its behaviour needs to be specified. In order to do so, the <strong><em>receive</em></strong> method of the actor needs to be implemented. This method will define the reaction of the actor to the different messages that it might receive.

But before going on with actors, tool time!

<a href="https://scalerablog.files.wordpress.com/2015/05/timallen.jpg"><img class="  wp-image-447 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/timallen.jpg?w=288" alt="timallen" width="223" height="232" /></a>

<strong>Tool time: Partial functions</strong>

<strong><em>Partial functions</em></strong> are functions that are only defined for a limited set of arguments. From a mathematical point of view, we could say that its domain is bounded. This concept may become clearer with a simple example:

[code language="scala"]
def getCountry: PartialFunction[String, String] = {
  case &quot;Madrid&quot; =&gt; &quot;Spain&quot;
  case &quot;Paris&quot; =&gt; &quot;France&quot;
  case &quot;Roma&quot; =&gt; &quot;Italy&quot;
}
[/code]

In this case, the <em>getCountry</em> function will return the country only for the capital cities defined in the partial function. If any other capital city is used as input to this function, it will throw a <em>MatchError</em>.

[code language="scala"]
getCountry(&quot;Madrid&quot;) //returns &quot;Spain&quot;;
getCountry(&quot;Berlin&quot;) //throws MatchError
[/code]

Moreover, partial functions have a method called <em>isDefinedAt</em>, which allows us to know if a certain input parameter is considered in its body. In our example:

[code language="scala"]
getCountry.isDefinedAt(&quot;Madrid&quot;) //returns true
getCountry.isDefinedAt(&quot;Berlin&quot;) //returns false
[/code]

Another important trick is that partial functions can be combined to create a new one. To do so, orElse method is used.

[code language="scala"]
def getCountryEurope: PartialFunction[String, String] = {
  case &quot;Madrid&quot; =&gt; &quot;Spain&quot;
  case &quot;Paris&quot; =&gt; &quot;France&quot;
  case &quot;Roma&quot; =&gt; &quot;Italy&quot;
}

def getCountryAmerica: PartialFunction[String, String] = {
  case &quot;Brasilia&quot; =&gt; &quot;Brazil&quot;
  case &quot;Buenos Aires&quot; =&gt; &quot;Argentina&quot;
}

def getCountry =
  getCountryEurope orElse getCountryAmerica

getCountry.isDefinedAt(&quot;Madrid&quot;) //returns true
getCountry.isDefinedAt(&quot;Brasilia&quot;) //returns true

[/code]

To end up with the <em>PartialFunction</em> masterclass, it is important to know the method <em>applyOrElse</em>, with which we can evaluate a partial function with an input value but also define an auxiliary function to use in case the input value does not belong to the domain. Sorry, what? Again, an example might save us:

[code language="scala"]
def unhandled(capital: String) = s&quot;$capital is not defined&quot;
getCountry.applyOrElse(&quot;Foo&quot;, unhandled) //Foo is not defined

[/code]

<strong>Hello World Actor</strong>

Good! Now we know what partial functions are, we can implement the <em>receive</em> method of the actor, which will define the actor’s behaviour. That receive method, as you all might have guessed, is a partial function actually.

[code language="scala"]
type Receive = PartialFunction[Any, Unit]

def receive: Receive
[/code]

This partial function expects any type as input parameter and returns Unit. Therefore, thanks to the argument type <em>Any</em>, anything can be sent as a message to the actor: a string, an integer, an object...

[code language="scala"]
def receive {
  case num: Int =&gt; println(s&quot;Num $num received&quot;)
  case words: String =&gt; println(s&quot;String $words received&quot;)
  case _ =&gt; println(&quot;I've received other thing&quot;)
}
[/code]

In addition, we must know that when a message arrives to an actor, at first the partial function defined at the receive method tries to be applied and, in case the message is not defined in the domain, the unhandled method is executed:

[code language="scala"]
def unhandled(msg: Any): Unit
[/code]

By default, this method will print the unhandled messages in a log. This way, if a message cannot be handled by <em>receive</em> method, instead of causing a <strong>MatchError</strong> and blowing up our program, a debug message will be printed in Akka’s log. Using our high-level knowledge in partial functions, we can guess that the behaviour of an actor for a given message called <em>msg</em> will be defined as follows:

[code language="scala"]
receive.applyOrElse(msg, unhandled)
[/code]

All that remains is to define the actor that, in our case, no matter what the received message is, will print a lovely and passionate Hello World:

[code language="scala"]
class HelloWorldActor extends Actor {

  def receive {
    case _ =&gt; println(&quot;Hello World!&quot;)
  }
}
[/code]

Voila! The next post will teach us how we can use this actor and put it into operation.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>371</wp:post_id>
  <wp:post_date>2015-05-29 10:12:00</wp:post_date>
  <wp:post_date_gmt>2015-05-29 08:12:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hello-world-in-akka-part-i</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="actor"><![CDATA[actor]]></category>
  <category domain="post_tag" nicename="akka"><![CDATA[akka]]></category>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="greet"><![CDATA[greet]]></category>
  <category domain="post_tag" nicename="hello"><![CDATA[hello]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="world"><![CDATA[world]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11123857870]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/604198643206213633";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Hello World in Akka (Part II: Revenge)</title>
  <link>https://scalerablog.wordpress.com/2015/05/29/hello-world-in-akka-part-ii-revenge/</link>
  <pubDate>Fri, 29 May 2015 08:13:33 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=373</guid>
  <description/>
  <content:encoded><![CDATA[<a title="Hello World in Akka (Part I)" href="https://scalerablog.wordpress.com/2015/04/29/hello-world-in-akka-part-i/" target="_blank">Last week</a> we learnt what an actor-based model was. Moreover, we saw how to create our own actor in Akka. Let me remind you what we obtained:

[code language="scala"]
class MyFirstActor extends Actor {

  def receive = {
    case _ =&gt; println(&quot;Hello World!&quot;)
  }

}
[/code]

I’m sure some of you thought: ‘Mmm...perfect. And what am I supposed to do with this?’

<a href="https://scalerablog.files.wordpress.com/2015/05/wtfshit.jpg"><img class=" size-medium wp-image-279 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/wtfshit.jpg?w=300" alt="wtfshit" width="300" height="230" /></a>

Fine, today we are finishing our <em>Hello World</em>. We just have to learn two more important concepts to complete the example:
<ul>
	<li>Now we know how to define actors, how can we instantiate them?</li>
	<li>Once we have instances from actors, how can we send messages to them?</li>
</ul>
Once we are comfortable with these two last things, we will have our <em>Hello World</em> ready to run.

<strong>Actor creation</strong>

The first thing we need to know is that all actors in <em>Akka</em> are created in a particular context. That context can be an actor system of the type <em><strong>ActorSystem</strong></em>. That system is in charge of handling the whole actor-based model that runs on top of it. To create it, this single line has to be included:

[code language="scala"]
val system = ActorSystem(&quot;my-first-system&quot;)
[/code]

A <em>String</em> is passed as argument in the <em>ActorSystem</em> creation for it to be recognizable by a particular name. This system will be the context where all the actors in our program shall live. Provided that it is quite a heavy object, it is recommended that there is only one instance of this per program.

Other possible option is to create an actor inside other actor. This way we would be creating an actor inside the context of the other actor. This is what is called <strong><em>Supervision</em></strong>. Since our goal is to create a simple <strong>Hello World</strong>, we will not look further into that.

Now we have a system, we can create actors in it. The first think we could have thought of would be using the constructor of an <em>Actor</em>. Well... we can’t. Not everything is that simple. In order to create an actor, a <em><strong>Props</strong></em> needs to be used. The <em>Props</em> is a configuration object that allows us to create an actor and define the arguments (in case there are some) that we want to pass to it. Let’s look at a simple example:

[code language="scala"]
system.actorOf(Props[MyFirstActor], &quot;myFirstActor&quot;)
[/code]

As can be observed, the system has a method to create actors. That method (called <strong><em>actorOf</em></strong>) receives a <em>Props</em> as argument, and optionally, a name to identify the actor.

It is important to know that the actorOf method does not return an instance of Actor. Instead, a reference to the actor is returned, an <strong><em>ActorRef</em></strong>. But there’s nothing to worry about. With this <em>ActorRef</em>, messages can be sent to the actor without any trouble.

<strong>Sending messages to actors</strong>

Defining actors is pretty good. Creating them is even better. But we shall not forget that the essence of an actor is substantially reactive. If we don’t know how to send messages to trigger a reaction, an actor is rather useless.
In <em>Akka</em>, there are two ways to send messages to actors. The more basic approach is to use the method <strong><em>tell</em></strong>.

[code language="scala"]
actorRef.tell(msg: Any, sender: ActorRef): Unit
[/code]

This method allows us to send a message to an actor (<em>actorRef</em>) and… that’all. We are not getting a response. That’s the reason why the method returns <em>Unit</em>. Besides, it is important to know that at the <em>sender</em> field, we have to write the reference to the actor that we want to behave as sender. It’s not much use in our Hello World, but further on we’ll see how, by using this <em>sender</em> variable, an actor A (which sends a message to an actor B) can make actor B send its response to an actor C.

<a href="https://scalerablog.files.wordpress.com/2015/05/tellexamplesender.png"><img class="  wp-image-289 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/tellexamplesender.png?w=300" alt="tellExampleSender" width="421" height="237" /></a>

<em>Tell</em> signature seems a little bit cumbersome. This is why there’s a shorter way to use this method with just a spoonful of syntactic sugar:

[code language="scala"]
actorRef ! &quot;Yeah, madafaka!&quot;
[/code]

With this line we are sending our Bronx greetings to an actor whose reference is in the variable actorRef. Provided that we use the ‘!’ in our tell method, the sender will be the instance of the actor that sent the original message.

However, we might want to have some feedback from the actor. We might want to wait for its response. Don’t panic! For that, we can use the <strong><em>ask</em></strong> method:

[code language="scala"]
import akka.pattern.ask

def ask(actorRef: ActorRef, message: Any)(implicit timeout: Timeout): Future[Any])
[/code]

In addition to the message we want to send and the actor we’re sending the message to, a <em>timeout</em> needs to be set for not being waiting for an answer indefinitely. In this case, no <em>sender</em> has be defined and it will always be the actor that sent the message.

Since we are waiting for the response in an asynchronous way, the answer will come to us in a future. A future? What the #$?&amp; is that? For now, and without going into much detail, we’ll say that a future is a container in which some data will be generated, when that data is ready. Later on, in future posts, we’ll go into <strong><em>Future</em></strong> type in detail.

Just like with tell method, we also have a simpler way to use <em>ask</em> method, with ‘?’ symbol:

[code language="scala"]
val response: Future[Any] = actorRef ? &quot;What time is it?&quot;
[/code]

<strong>Finally, the Hello World</strong>

Now we know how to create actors and send messages to them, if we use the previously defined actor, we can finish the implementation of the “<em>Hello World</em>” in Akka:

[code language="scala"]
class MyFirstActor extends Actor {

  def receive = {
    case _ =&gt; println(&quot;Hello World!&quot;)
  }

}

object HelloWorldBoot extends App {

  val system = ActorSystem(&quot;my-first-system&quot;)
  val myActor: ActorRef =
    system.actorOf(Props[MyFirstActor],&quot;my-first-actor&quot;)

  myActor ! &quot;Start!&quot;

}
[/code]

We just need to create an ActorSystem, an actor in that system and send a message to the actor for him to println “Hello World” when that message is processed.

If everything goes ok and we run the program, we will see a beautiful Hello World on the screen.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>373</wp:post_id>
  <wp:post_date>2015-05-29 10:13:33</wp:post_date>
  <wp:post_date_gmt>2015-05-29 08:13:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hello-world-in-akka-part-ii-revenge</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="actorof"><![CDATA[actorof]]></category>
  <category domain="post_tag" nicename="actors"><![CDATA[actors]]></category>
  <category domain="post_tag" nicename="akka"><![CDATA[akka]]></category>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="props"><![CDATA[props]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11123881111]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/604198907866791936";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>"Nothing" else matters... *</title>
  <link>https://scalerablog.wordpress.com/2015/05/29/nothing-else-matters-2/</link>
  <pubDate>Fri, 29 May 2015 08:14:02 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=376</guid>
  <description/>
  <content:encoded><![CDATA[<h2>What's Nothing, my precious?</h2>
Nothing is a kind of special type in Scala’s class hierarchy.

To begin with, <strong>it is not instantiable</strong>: we cannot generate an instance from it by any means.

Weird, isn’t it? This is understood a bit better with the second peculiarity: <strong>it is a type that extends aaaaall classes</strong>. Even those that are user defined? Even those.

<a href="https://scalerablog.files.wordpress.com/2015/05/scala-hierarchy.png"><img class="alignnone  wp-image-294" src="https://scalerablog.files.wordpress.com/2015/05/scala-hierarchy.png?w=300" alt="scala-hierarchy" width="624" height="385" /></a>

Then, what’s the use in it? The better example is <em><strong>None</strong></em>. If <em><strong>Option[T]</strong></em> weren’t covariant, we would need to define a <em><strong>None[T]</strong></em> for every <em><strong>T</strong></em>. And then, <strong><em>None[Int]</em></strong> would be different from em&gt;<strong>None[String]</strong>... you can imagine what a mess would that be!

But since <em><strong>Option[+T]</strong></em> is covariant<strong>*</strong>, and <em><strong>Nothing</strong></em> a subtype of every class, we needn’t declare a <em><strong>None</strong></em> for every <em><strong>T</strong></em> in the list, but there’s only one <em><strong>None</strong></em> with the following signature:

[code language="scala"]
object None extends Option[Nothing]
  //...with Product with Serializable
[/code]

Same thing applies to <em><strong>Nil</strong></em>.
<h2>Type inference</h2>
When we define methods or values in Scala, at first and being quite purist, we define their type:

[code language="scala"]
val myVal: String = &quot;hi&quot;
def myMethod(n: String): Boolean =
  (n % 2 == 0)
[/code]

But it is quite likely that, as time goes by and after a lot of lines of code, we start forgetting to add the type that these expressions return:

[code language="scala"]
val myVal = &quot;hi&quot;
def myMethod(n: String) =
  (n % 2 == 0)
[/code]

Nothing happens, compiler is capable of inferring the returned types… as long as there are enough hints to figure them out. It’s in this case when the “Nothing” bogeyman menace arises.
<h2>Nothing's coming</h2>
Imagine we have a generic method like this:

[code language="scala"]
def getFirstElement[T](list: List[T]): Option[T] =
  list.headOption
[/code]

What this method does is to return the first element in a list (if there’s some). Where can all start to go wrong?

Suppose we want to test our method on an empty list. Our experience tells us that the best way to do that is by using List’s apply method with no argument: List().
However, if we pass this as a parameter to our method:

[code language="scala"]
val first = getFirstElement(List())
[/code]

Let’s see what is returned:

[code language="scala"]
first: Option[Nothing] = None
[/code]

We shouldn’t be mean to the compiler, let’s face that we have given no facility for it to infer the correct type. We could do it simply by using the empty method of the List object:

[code language="scala"]
val first = getFirstElement(List.empty[Int])
first: Option[Int] = None
[/code]

though the type could also be inferred by adding the parameter type in the method call:

[code language="scala"]
val first = getFirstElement[Int](List())
first: Option[Int] = None
[/code]

Done! Now I think about it, this post looks a bit dull without any memes in it...

<a href="https://scalerablog.files.wordpress.com/2015/05/60965939.jpg"><img class=" size-full wp-image-293 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/60965939.jpg" alt="60965939" width="250" height="250" /></a>

<strong>*</strong> <em>Covariance</em>: <strong>C[T]</strong> is said to be covariant in <strong>T</strong>, if given a certain<strong>V&lt;:T</strong>, then <strong>C[V]&lt;:C[T]</strong> . This issue will be treated in detail in future (but not that remote) posts :-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>376</wp:post_id>
  <wp:post_date>2015-05-29 10:14:02</wp:post_date>
  <wp:post_date_gmt>2015-05-29 08:14:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>nothing-else-matters-2</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="inference"><![CDATA[inference]]></category>
  <category domain="post_tag" nicename="medium"><![CDATA[medium]]></category>
  <category domain="post_tag" nicename="nil"><![CDATA[nil]]></category>
  <category domain="post_tag" nicename="none"><![CDATA[none]]></category>
  <category domain="post_tag" nicename="nothing"><![CDATA[nothing]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="type"><![CDATA[type]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11123890324]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/604199021398237184";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Spanish</title>
  <link>https://scalerablog.wordpress.com/2015/05/29/spanish/</link>
  <pubDate>Fri, 29 May 2015 08:58:47 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=451</guid>
  <description/>
  <content:encoded><![CDATA[Spanish]]></content:encoded>
  <excerpt:encoded><![CDATA[Spanish]]></excerpt:encoded>
  <wp:post_id>451</wp:post_id>
  <wp:post_date>2015-05-29 10:58:47</wp:post_date>
  <wp:post_date_gmt>2015-05-29 08:58:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>spanish</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="idioma"><![CDATA[Idioma]]></category>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[451]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://scalerablog.wordpress.com/category/castellano/]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>English</title>
  <link>https://scalerablog.wordpress.com/2015/05/29/english/</link>
  <pubDate>Fri, 29 May 2015 08:58:47 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=452</guid>
  <description/>
  <content:encoded><![CDATA[English]]></content:encoded>
  <excerpt:encoded><![CDATA[English]]></excerpt:encoded>
  <wp:post_id>452</wp:post_id>
  <wp:post_date>2015-05-29 10:58:47</wp:post_date>
  <wp:post_date_gmt>2015-05-29 08:58:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>english</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>2</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="idioma"><![CDATA[Idioma]]></category>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[452]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://scalerablog.wordpress.com/category/english/]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Hay una macro en mi sopa...</title>
  <link>https://scalerablog.wordpress.com/?p=968</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=968</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>968</wp:post_id>
  <wp:post_date>2015-12-05 19:31:39</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="advanced"><![CDATA[advanced]]></category>
  <category domain="post_tag" nicename="ast"><![CDATA[ast]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="expr"><![CDATA[expr]]></category>
  <category domain="post_tag" nicename="macros"><![CDATA[macros]]></category>
  <category domain="post_tag" nicename="paradise"><![CDATA[paradise]]></category>
  <category domain="post_tag" nicename="reflect"><![CDATA[reflect]]></category>
  <category domain="post_tag" nicename="reify"><![CDATA[reify]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="showraw"><![CDATA[showraw]]></category>
  <category domain="post_tag" nicename="tree"><![CDATA[tree]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Type classes: So what!</title>
  <link>https://scalerablog.wordpress.com/?p=1042</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>pfcoperez</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1042</guid>
  <description/>
  <content:encoded><![CDATA[We all know how to implement them in Scala but do you know the real power behind them? Their origins of these mysterious creatures?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1042</wp:post_id>
  <wp:post_date>2016-08-05 16:41:46</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[63221184]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Expresiones regulares...pero no malas</title>
  <link>https://scalerablog.wordpress.com/?p=1382</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1382</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1382</wp:post_id>
  <wp:post_date>2016-01-26 17:04:32</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Scope handling en Scala</title>
  <link>https://scalerablog.wordpress.com/?p=1697</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1697</guid>
  <description/>
  <content:encoded><![CDATA[* selftypes: outter / inner objects

* scoped private modifier

* scoped super modifier]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1697</wp:post_id>
  <wp:post_date>2016-02-19 17:19:51</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="inner"><![CDATA[inner]]></category>
  <category domain="post_tag" nicename="object"><![CDATA[object]]></category>
  <category domain="post_tag" nicename="private"><![CDATA[private]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="scope"><![CDATA[scope]]></category>
  <category domain="post_tag" nicename="self"><![CDATA[self]]></category>
  <category domain="post_tag" nicename="super"><![CDATA[super]]></category>
  <category domain="post_tag" nicename="type"><![CDATA[type]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>gene_krantz</title>
  <link>https://scalerablog.wordpress.com/2016/04/18/scala-one-language-to-rule-them-all-i/gene_krantz/#main</link>
  <pubDate>Wed, 30 Mar 2016 08:38:01 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/03/gene_krantz.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2292</wp:post_id>
  <wp:post_date>2016-03-30 10:38:01</wp:post_date>
  <wp:post_date_gmt>2016-03-30 08:38:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>gene_krantz</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1043</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/03/gene_krantz.png</wp:attachment_url>
</item>
<item>
  <title>engineer</title>
  <link>https://scalerablog.wordpress.com/2016/04/18/scala-one-language-to-rule-them-all-i/engineer/#main</link>
  <pubDate>Wed, 30 Mar 2016 08:38:39 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/03/engineer.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2293</wp:post_id>
  <wp:post_date>2016-03-30 10:38:39</wp:post_date>
  <wp:post_date_gmt>2016-03-30 08:38:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>engineer</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1043</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/03/engineer.png</wp:attachment_url>
</item>
<item>
  <title>letsdoit</title>
  <link>https://scalerablog.wordpress.com/2016/04/18/scala-one-language-to-rule-them-all-i/letsdoit/#main</link>
  <pubDate>Wed, 30 Mar 2016 08:39:04 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/03/letsdoit.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2294</wp:post_id>
  <wp:post_date>2016-03-30 10:39:04</wp:post_date>
  <wp:post_date_gmt>2016-03-30 08:39:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>letsdoit</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1043</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/03/letsdoit.jpg</wp:attachment_url>
</item>
<item>
  <title>updateState function (2)</title>
  <link>https://scalerablog.wordpress.com/2016/04/27/spark-streaming-streams-con-estado-android-vs-ios/updatestate-function-2/#main</link>
  <pubDate>Fri, 01 Apr 2016 13:09:13 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/04/updatestate-function-2.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2309</wp:post_id>
  <wp:post_date>2016-04-01 15:09:13</wp:post_date>
  <wp:post_date_gmt>2016-04-01 13:09:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>updatestate-function-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2300</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/04/updatestate-function-2.jpg</wp:attachment_url>
</item>
<item>
  <title>stateful stream</title>
  <link>https://scalerablog.wordpress.com/2016/04/27/spark-streaming-streams-con-estado-android-vs-ios/stateful-stream/#main</link>
  <pubDate>Mon, 04 Apr 2016 15:19:04 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/04/stateful-stream.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2634</wp:post_id>
  <wp:post_date>2016-04-04 17:19:04</wp:post_date>
  <wp:post_date_gmt>2016-04-04 15:19:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>stateful-stream</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2300</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/04/stateful-stream.png</wp:attachment_url>
</item>
<item>
  <title>appleandroid</title>
  <link>https://scalerablog.wordpress.com/2016/04/27/spark-streaming-streams-con-estado-android-vs-ios/appleandroid/#main</link>
  <pubDate>Tue, 05 Apr 2016 14:56:25 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/04/appleandroid.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2642</wp:post_id>
  <wp:post_date>2016-04-05 16:56:25</wp:post_date>
  <wp:post_date_gmt>2016-04-05 14:56:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>appleandroid</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2300</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/04/appleandroid.jpg</wp:attachment_url>
</item>
<item>
  <title>o6dau</title>
  <link>https://scalerablog.wordpress.com/2016/05/11/scalera-tip-por-que-scala-util-try-no-tiene-finally/o6dau/#main</link>
  <pubDate>Wed, 06 Apr 2016 11:01:58 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/04/o6dau.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2655</wp:post_id>
  <wp:post_date>2016-04-06 13:01:58</wp:post_date>
  <wp:post_date_gmt>2016-04-06 11:01:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>o6dau</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2649</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/04/o6dau.jpg</wp:attachment_url>
</item>
<item>
  <title>Spark SQL : Infiriendo un esquema común</title>
  <link>https://scalerablog.wordpress.com/?p=2679</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=2679</guid>
  <description/>
  <content:encoded><![CDATA[[code language="scala"]
import org.apache.spark.sql.types.StructType

case class Foo(a1: String, a2: Boolean)
case class Bar(a1: Int, a3: Double)

val foos = List(Foo(&quot;hi&quot;, true), Foo(&quot;bye&quot;,false))
val bars = List(Bar(2,2.5), Bar(3,3.5))

val fooDF = sc.parallelize(foos).toDF
val barDF = sc.parallelize(bars).toDF

val st1 = fooDF.schema
val st2 = barDF.schema
[/code]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2679</wp:post_id>
  <wp:post_date>2016-04-12 15:16:58</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="bigdata"><![CDATA[BigData]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="schema"><![CDATA[schema]]></category>
  <category domain="post_tag" nicename="spark"><![CDATA[spark]]></category>
  <category domain="post_tag" nicename="structtype"><![CDATA[StructType]]></category>
  <category domain="post_tag" nicename="union"><![CDATA[union]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>giphy</title>
  <link>https://scalerablog.wordpress.com/2016/04/20/scala-tips-transparencia-referencial/giphy-5/#main</link>
  <pubDate>Sun, 17 Apr 2016 10:01:19 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/04/giphy.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2693</wp:post_id>
  <wp:post_date>2016-04-17 12:01:19</wp:post_date>
  <wp:post_date_gmt>2016-04-17 10:01:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>giphy-5</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2690</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/04/giphy.gif</wp:attachment_url>
</item>
<item>
  <title>53132063</title>
  <link>https://scalerablog.wordpress.com/2016/06/01/shapeless-funciones-polimorficas/attachment/53132063/#main</link>
  <pubDate>Mon, 18 Apr 2016 15:52:24 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/05/53132063.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2750</wp:post_id>
  <wp:post_date>2016-04-18 17:52:24</wp:post_date>
  <wp:post_date_gmt>2016-04-18 15:52:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>53132063</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2672</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/05/53132063.jpg</wp:attachment_url>
</item>
<item>
  <title>64331666</title>
  <link>https://scalerablog.wordpress.com/2016/06/01/shapeless-funciones-polimorficas/attachment/64331666/#main</link>
  <pubDate>Mon, 18 Apr 2016 15:54:29 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/05/64331666.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2751</wp:post_id>
  <wp:post_date>2016-04-18 17:54:29</wp:post_date>
  <wp:post_date_gmt>2016-04-18 15:54:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>64331666</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2672</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/05/64331666.jpg</wp:attachment_url>
</item>
<item>
  <title>Machine Learning with Scala: Univariate Linear Regression</title>
  <link>https://scalerablog.wordpress.com/?p=2759</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=2759</guid>
  <description/>
  <content:encoded><![CDATA[http://archive.ics.uci.edu/ml/datasets/Bike+Sharing+Dataset

¿Cómo conseguir CostFunction =&gt; Model? Problema de optimización (minimización en este caso).]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2759</wp:post_id>
  <wp:post_date>2016-04-20 17:55:17</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_65a7401946e94ce13ad432a55fa5f286</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_faef72a9b8434733b0aa2743dbf65001</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>pi2band2bi</title>
  <link>https://scalerablog.wordpress.com/2016/05/04/transformando-el-futuro/pi2band2bi/#main</link>
  <pubDate>Thu, 28 Apr 2016 10:46:06 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/04/pi2band2bi.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2780</wp:post_id>
  <wp:post_date>2016-04-28 12:46:06</wp:post_date>
  <wp:post_date_gmt>2016-04-28 10:46:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>pi2band2bi</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2778</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/04/pi2band2bi.jpg</wp:attachment_url>
</item>
<item>
  <title>doesnt-go-into-girls-shower</title>
  <link>https://scalerablog.wordpress.com/2016/05/04/transformando-el-futuro/doesnt-go-into-girls-shower/#main</link>
  <pubDate>Thu, 28 Apr 2016 10:46:39 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/04/doesnt-go-into-girls-shower.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2783</wp:post_id>
  <wp:post_date>2016-04-28 12:46:39</wp:post_date>
  <wp:post_date_gmt>2016-04-28 10:46:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>doesnt-go-into-girls-shower</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2778</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/04/doesnt-go-into-girls-shower.jpg</wp:attachment_url>
</item>
<item>
  <title>szpjhwz</title>
  <link>https://scalerablog.wordpress.com/2016/05/18/recursividad-recursivamente-recursiva/szpjhwz/#main</link>
  <pubDate>Fri, 13 May 2016 08:43:40 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/05/szpjhwz.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2830</wp:post_id>
  <wp:post_date>2016-05-13 10:43:40</wp:post_date>
  <wp:post_date_gmt>2016-05-13 08:43:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>szpjhwz</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2822</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/05/szpjhwz.jpg</wp:attachment_url>
</item>
<item>
  <title>28b5865ebe59280d5c3ed18fc1147964309d9d0c81663c0c3f81d42fc5979c8f</title>
  <link>https://scalerablog.wordpress.com/2016/05/18/recursividad-recursivamente-recursiva/28b5865ebe59280d5c3ed18fc1147964309d9d0c81663c0c3f81d42fc5979c8f/#main</link>
  <pubDate>Fri, 13 May 2016 08:44:11 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/05/28b5865ebe59280d5c3ed18fc1147964309d9d0c81663c0c3f81d42fc5979c8f.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2831</wp:post_id>
  <wp:post_date>2016-05-13 10:44:11</wp:post_date>
  <wp:post_date_gmt>2016-05-13 08:44:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>28b5865ebe59280d5c3ed18fc1147964309d9d0c81663c0c3f81d42fc5979c8f</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2822</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/05/28b5865ebe59280d5c3ed18fc1147964309d9d0c81663c0c3f81d42fc5979c8f.jpg</wp:attachment_url>
</item>
<item>
  <title>Gnu-and-penguin-color</title>
  <link>https://scalerablog.wordpress.com/2016/05/30/scala-one-language-to-rule-them-all-ii/gnu-and-penguin-color/#main</link>
  <pubDate>Mon, 16 May 2016 19:08:19 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/05/gnu-and-penguin-color.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3389</wp:post_id>
  <wp:post_date>2016-05-16 21:08:19</wp:post_date>
  <wp:post_date_gmt>2016-05-16 19:08:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>gnu-and-penguin-color</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2847</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/05/gnu-and-penguin-color.png</wp:attachment_url>
</item>
<item>
  <title>awk_sample</title>
  <link>https://scalerablog.wordpress.com/2016/05/30/scala-one-language-to-rule-them-all-ii/awk_sample/#main</link>
  <pubDate>Mon, 16 May 2016 19:09:02 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/05/awk_sample.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3391</wp:post_id>
  <wp:post_date>2016-05-16 21:09:02</wp:post_date>
  <wp:post_date_gmt>2016-05-16 19:09:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>awk_sample</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2847</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/05/awk_sample.png</wp:attachment_url>
</item>
<item>
  <title>6bkFb7B</title>
  <link>https://scalerablog.wordpress.com/2016/05/30/scala-one-language-to-rule-them-all-ii/6bkfb7b/#main</link>
  <pubDate>Mon, 16 May 2016 19:11:11 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/05/6bkfb7b.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3392</wp:post_id>
  <wp:post_date>2016-05-16 21:11:11</wp:post_date>
  <wp:post_date_gmt>2016-05-16 19:11:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>6bkfb7b</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2847</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/05/6bkfb7b.png</wp:attachment_url>
</item>
<item>
  <title>machine</title>
  <link>https://scalerablog.wordpress.com/2016/05/30/scala-one-language-to-rule-them-all-ii/machine/#main</link>
  <pubDate>Mon, 16 May 2016 19:15:07 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/05/machine.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3393</wp:post_id>
  <wp:post_date>2016-05-16 21:15:07</wp:post_date>
  <wp:post_date_gmt>2016-05-16 19:15:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>machine</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2847</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/05/machine.png</wp:attachment_url>
</item>
<item>
  <title>machine_walkthrough</title>
  <link>https://scalerablog.wordpress.com/2016/05/30/scala-one-language-to-rule-them-all-ii/machine_walkthrough/#main</link>
  <pubDate>Mon, 16 May 2016 19:17:16 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/05/machine_walkthrough.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3394</wp:post_id>
  <wp:post_date>2016-05-16 21:17:16</wp:post_date>
  <wp:post_date_gmt>2016-05-16 19:17:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>machine_walkthrough</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2847</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/05/machine_walkthrough.png</wp:attachment_url>
</item>
<item>
  <title>packages</title>
  <link>https://scalerablog.wordpress.com/2016/05/30/scala-one-language-to-rule-them-all-ii/packages/#main</link>
  <pubDate>Mon, 16 May 2016 19:17:50 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/05/packages.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3395</wp:post_id>
  <wp:post_date>2016-05-16 21:17:50</wp:post_date>
  <wp:post_date_gmt>2016-05-16 19:17:50</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>packages</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2847</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/05/packages.png</wp:attachment_url>
</item>
<item>
  <title>initial_state</title>
  <link>https://scalerablog.wordpress.com/2016/05/30/scala-one-language-to-rule-them-all-ii/initial_state/#main</link>
  <pubDate>Mon, 16 May 2016 19:18:19 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/05/initial_state.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3396</wp:post_id>
  <wp:post_date>2016-05-16 21:18:19</wp:post_date>
  <wp:post_date_gmt>2016-05-16 19:18:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>initial_state</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2847</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/05/initial_state.png</wp:attachment_url>
</item>
<item>
  <title>with_initialprogram_st</title>
  <link>https://scalerablog.wordpress.com/2016/05/30/scala-one-language-to-rule-them-all-ii/with_initialprogram_st/#main</link>
  <pubDate>Mon, 16 May 2016 19:20:41 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/05/with_initialprogram_st.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3397</wp:post_id>
  <wp:post_date>2016-05-16 21:20:41</wp:post_date>
  <wp:post_date_gmt>2016-05-16 19:20:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>with_initialprogram_st</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2847</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/05/with_initialprogram_st.png</wp:attachment_url>
</item>
<item>
  <title>solidcomand_st</title>
  <link>https://scalerablog.wordpress.com/2016/05/30/scala-one-language-to-rule-them-all-ii/solidcomand_st/#main</link>
  <pubDate>Mon, 16 May 2016 19:20:52 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/05/solidcomand_st.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3398</wp:post_id>
  <wp:post_date>2016-05-16 21:20:52</wp:post_date>
  <wp:post_date_gmt>2016-05-16 19:20:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>solidcomand_st</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2847</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/05/solidcomand_st.png</wp:attachment_url>
</item>
<item>
  <title>abstract_with_constructor</title>
  <link>https://scalerablog.wordpress.com/2016/05/30/scala-one-language-to-rule-them-all-ii/abstract_with_constructor/#main</link>
  <pubDate>Mon, 16 May 2016 19:22:45 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/05/abstract_with_constructor.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3399</wp:post_id>
  <wp:post_date>2016-05-16 21:22:45</wp:post_date>
  <wp:post_date_gmt>2016-05-16 19:22:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>abstract_with_constructor</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2847</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/05/abstract_with_constructor.jpg</wp:attachment_url>
</item>
<item>
  <title>empty_transition</title>
  <link>https://scalerablog.wordpress.com/2016/05/30/scala-one-language-to-rule-them-all-ii/empty_transition/#main</link>
  <pubDate>Mon, 16 May 2016 19:26:51 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/05/empty_transition.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3400</wp:post_id>
  <wp:post_date>2016-05-16 21:26:51</wp:post_date>
  <wp:post_date_gmt>2016-05-16 19:26:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>empty_transition</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2847</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/05/empty_transition.png</wp:attachment_url>
</item>
<item>
  <title>empty_transition2</title>
  <link>https://scalerablog.wordpress.com/2016/05/30/scala-one-language-to-rule-them-all-ii/empty_transition2/#main</link>
  <pubDate>Mon, 16 May 2016 19:28:38 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/05/empty_transition2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3401</wp:post_id>
  <wp:post_date>2016-05-16 21:28:38</wp:post_date>
  <wp:post_date_gmt>2016-05-16 19:28:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>empty_transition2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2847</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/05/empty_transition2.png</wp:attachment_url>
</item>
<item>
  <title>scala_has_you</title>
  <link>https://scalerablog.wordpress.com/2016/05/30/scala-one-language-to-rule-them-all-ii/scala_has_you/#main</link>
  <pubDate>Mon, 16 May 2016 19:29:59 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/05/scala_has_you.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3402</wp:post_id>
  <wp:post_date>2016-05-16 21:29:59</wp:post_date>
  <wp:post_date_gmt>2016-05-16 19:29:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>scala_has_you</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2847</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/05/scala_has_you.png</wp:attachment_url>
</item>
<item>
  <title>whiteboard</title>
  <link>https://scalerablog.wordpress.com/2016/05/30/scala-one-language-to-rule-them-all-ii/whiteboard/#main</link>
  <pubDate>Mon, 16 May 2016 19:30:20 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/05/whiteboard.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3403</wp:post_id>
  <wp:post_date>2016-05-16 21:30:20</wp:post_date>
  <wp:post_date_gmt>2016-05-16 19:30:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>whiteboard</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2847</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/05/whiteboard.jpg</wp:attachment_url>
</item>
<item>
  <title>notebook</title>
  <link>https://scalerablog.wordpress.com/2016/05/30/scala-one-language-to-rule-them-all-ii/notebook/#main</link>
  <pubDate>Mon, 16 May 2016 19:30:41 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/05/notebook.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3404</wp:post_id>
  <wp:post_date>2016-05-16 21:30:41</wp:post_date>
  <wp:post_date_gmt>2016-05-16 19:30:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>notebook</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2847</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/05/notebook.jpg</wp:attachment_url>
</item>
<item>
  <title>BE-21-architect</title>
  <link>https://scalerablog.wordpress.com/2016/05/30/scala-one-language-to-rule-them-all-ii/be-21-architect/#main</link>
  <pubDate>Mon, 16 May 2016 19:32:10 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/05/be-21-architect.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3405</wp:post_id>
  <wp:post_date>2016-05-16 21:32:10</wp:post_date>
  <wp:post_date_gmt>2016-05-16 19:32:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>be-21-architect</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2847</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/05/be-21-architect.jpg</wp:attachment_url>
</item>
<item>
  <title>Scalera tip: ghost types - ¿A quién vas a llamar?</title>
  <link>https://scalerablog.wordpress.com/?p=3856</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=3856</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3856</wp:post_id>
  <wp:post_date>2016-09-19 15:52:07</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>VvqNk6o</title>
  <link>https://scalerablog.wordpress.com/vvqnk6o/</link>
  <pubDate>Sat, 21 May 2016 14:07:07 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/05/vvqnk6o.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3944</wp:post_id>
  <wp:post_date>2016-05-21 16:07:07</wp:post_date>
  <wp:post_date_gmt>2016-05-21 14:07:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>vvqnk6o</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/05/vvqnk6o.jpg</wp:attachment_url>
</item>
<item>
  <title>giphy</title>
  <link>https://scalerablog.wordpress.com/2016/06/08/grafitti-rules-spray-json/giphy-6/#main</link>
  <pubDate>Mon, 06 Jun 2016 16:31:57 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/06/giphy.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4095</wp:post_id>
  <wp:post_date>2016-06-06 18:31:57</wp:post_date>
  <wp:post_date_gmt>2016-06-06 16:31:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>giphy-6</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4087</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/06/giphy.gif</wp:attachment_url>
</item>
<item>
  <title>tumblr_mfuulmem1p1qem4feo1_250</title>
  <link>https://scalerablog.wordpress.com/2016/06/08/grafitti-rules-spray-json/tumblr_mfuulmem1p1qem4feo1_250/#main</link>
  <pubDate>Mon, 06 Jun 2016 16:41:09 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/06/tumblr_mfuulmem1p1qem4feo1_250.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4111</wp:post_id>
  <wp:post_date>2016-06-06 18:41:09</wp:post_date>
  <wp:post_date_gmt>2016-06-06 16:41:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tumblr_mfuulmem1p1qem4feo1_250</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4087</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/06/tumblr_mfuulmem1p1qem4feo1_250.gif</wp:attachment_url>
</item>
<item>
  <title>Putting side effects behind bars in Akka</title>
  <link>https://scalerablog.wordpress.com/?p=4121</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>pfcoperez</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=4121</guid>
  <description/>
  <content:encoded><![CDATA[http://arxiv.org/pdf/1008.1459.pdf

<em>essages, it can concurrently:</em>
<ul>
	<li><em>Send messages to (unforgeable) addresses of Actors.</em></li>
	<li><em>Create new Actors.</em></li>
	<li><em>Designate how to handle the next message it receives.</em></li>
</ul>
An Actor receives a m

These 3 points are key for the great success behind Akka.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4121</wp:post_id>
  <wp:post_date>2016-06-15 12:20:04</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
</item>
<item>
  <title>Sender-receiver-schema</title>
  <link>https://scalerablog.wordpress.com/2016/06/15/scala-interpretacion-de-codigo-en-runtime/sender-receiver-schema/#main</link>
  <pubDate>Tue, 14 Jun 2016 08:23:40 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/06/sender-receiver-schema.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4148</wp:post_id>
  <wp:post_date>2016-06-14 10:23:40</wp:post_date>
  <wp:post_date_gmt>2016-06-14 08:23:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>sender-receiver-schema</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3970</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/06/sender-receiver-schema.png</wp:attachment_url>
</item>
<item>
  <title>MessageWrapper</title>
  <link>https://scalerablog.wordpress.com/2016/06/15/scala-interpretacion-de-codigo-en-runtime/messagewrapper/#main</link>
  <pubDate>Tue, 14 Jun 2016 08:32:48 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/06/messagewrapper.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4149</wp:post_id>
  <wp:post_date>2016-06-14 10:32:48</wp:post_date>
  <wp:post_date_gmt>2016-06-14 08:32:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>messagewrapper</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3970</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/06/messagewrapper.png</wp:attachment_url>
</item>
<item>
  <title>Whydoeseverythinghavetobesocomplicated</title>
  <link>https://scalerablog.wordpress.com/2016/06/15/scala-interpretacion-de-codigo-en-runtime/whydoeseverythinghavetobesocomplicated/#main</link>
  <pubDate>Tue, 14 Jun 2016 12:59:22 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/06/whydoeseverythinghavetobesocomplicated.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4151</wp:post_id>
  <wp:post_date>2016-06-14 14:59:22</wp:post_date>
  <wp:post_date_gmt>2016-06-14 12:59:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>whydoeseverythinghavetobesocomplicated</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3970</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/06/whydoeseverythinghavetobesocomplicated.gif</wp:attachment_url>
</item>
<item>
  <title>4d8</title>
  <link>https://scalerablog.wordpress.com/2016/06/15/scala-interpretacion-de-codigo-en-runtime/4d8/#main</link>
  <pubDate>Tue, 14 Jun 2016 13:01:17 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/06/4d8.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4152</wp:post_id>
  <wp:post_date>2016-06-14 15:01:17</wp:post_date>
  <wp:post_date_gmt>2016-06-14 13:01:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>4d8</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3970</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/06/4d8.gif</wp:attachment_url>
</item>
<item>
  <title>House-of-cards-but-why</title>
  <link>https://scalerablog.wordpress.com/2016/06/15/scala-interpretacion-de-codigo-en-runtime/house-of-cards-but-why/#main</link>
  <pubDate>Tue, 14 Jun 2016 13:08:23 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/06/house-of-cards-but-why.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4155</wp:post_id>
  <wp:post_date>2016-06-14 15:08:23</wp:post_date>
  <wp:post_date_gmt>2016-06-14 13:08:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>house-of-cards-but-why</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3970</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/06/house-of-cards-but-why.gif</wp:attachment_url>
</item>
<item>
  <title>yoda_meme</title>
  <link>https://scalerablog.wordpress.com/2016/06/22/aprendiendo-scala/yoda_meme/#main</link>
  <pubDate>Mon, 20 Jun 2016 16:05:39 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/06/yoda_meme.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4188</wp:post_id>
  <wp:post_date>2016-06-20 18:05:39</wp:post_date>
  <wp:post_date_gmt>2016-06-20 16:05:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>yoda_meme</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4169</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/06/yoda_meme.jpg</wp:attachment_url>
</item>
<item>
  <title>friends-tv-show-bad-lessons-8</title>
  <link>https://scalerablog.wordpress.com/2016/06/29/cerrado-por-vacaciones/friends-tv-show-bad-lessons-8/#main</link>
  <pubDate>Wed, 29 Jun 2016 10:34:02 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/06/friends-tv-show-bad-lessons-8.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4245</wp:post_id>
  <wp:post_date>2016-06-29 12:34:02</wp:post_date>
  <wp:post_date_gmt>2016-06-29 10:34:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>friends-tv-show-bad-lessons-8</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4244</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/06/friends-tv-show-bad-lessons-8.gif</wp:attachment_url>
</item>
<item>
  <title>giphy</title>
  <link>https://scalerablog.wordpress.com/2016/06/29/cerrado-por-vacaciones/giphy-7/#main</link>
  <pubDate>Wed, 29 Jun 2016 10:35:10 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/06/giphy1.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4246</wp:post_id>
  <wp:post_date>2016-06-29 12:35:10</wp:post_date>
  <wp:post_date_gmt>2016-06-29 10:35:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>giphy-7</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4244</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/06/giphy1.gif</wp:attachment_url>
</item>
<item>
  <title>907958</title>
  <link>https://scalerablog.wordpress.com/2016/09/28/tipos-de-datos-algebraicos-en-scala/attachment/907958/#main</link>
  <pubDate>Wed, 21 Sep 2016 14:31:49 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/09/907958.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4265</wp:post_id>
  <wp:post_date>2016-09-21 16:31:49</wp:post_date>
  <wp:post_date_gmt>2016-09-21 14:31:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>907958</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4257</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/09/907958.png</wp:attachment_url>
</item>
<item>
  <title>forever-alone-400x400</title>
  <link>https://scalerablog.wordpress.com/2016/09/28/tipos-de-datos-algebraicos-en-scala/forever-alone-400x400/#main</link>
  <pubDate>Wed, 21 Sep 2016 14:43:09 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/09/forever-alone-400x400.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4266</wp:post_id>
  <wp:post_date>2016-09-21 16:43:09</wp:post_date>
  <wp:post_date_gmt>2016-09-21 14:43:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>forever-alone-400x400</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4257</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/09/forever-alone-400x400.png</wp:attachment_url>
</item>
<item>
  <title>51067781</title>
  <link>https://scalerablog.wordpress.com/2016/09/28/tipos-de-datos-algebraicos-en-scala/attachment/51067781/#main</link>
  <pubDate>Wed, 21 Sep 2016 15:15:56 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/09/51067781.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4268</wp:post_id>
  <wp:post_date>2016-09-21 17:15:56</wp:post_date>
  <wp:post_date_gmt>2016-09-21 15:15:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>51067781</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4257</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/09/51067781.jpg</wp:attachment_url>
</item>
<item>
  <title>hqdefault</title>
  <link>https://scalerablog.wordpress.com/2016/10/03/algrebraic-data-types-in-scala/hqdefault-2/#main</link>
  <pubDate>Wed, 28 Sep 2016 09:40:49 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/10/hqdefault.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4282</wp:post_id>
  <wp:post_date>2016-09-28 11:40:49</wp:post_date>
  <wp:post_date_gmt>2016-09-28 09:40:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>hqdefault-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4276</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/10/hqdefault.jpg</wp:attachment_url>
</item>
<item>
  <title>anigif_enhanced-1822-1407333641-6</title>
  <link>https://scalerablog.wordpress.com/2016/10/26/valores-perezosos/anigif_enhanced-1822-1407333641-6/#main</link>
  <pubDate>Mon, 17 Oct 2016 12:28:53 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/10/anigif_enhanced-1822-1407333641-6.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4292</wp:post_id>
  <wp:post_date>2016-10-17 14:28:53</wp:post_date>
  <wp:post_date_gmt>2016-10-17 12:28:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>anigif_enhanced-1822-1407333641-6</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4288</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/10/anigif_enhanced-1822-1407333641-6.gif</wp:attachment_url>
</item>
<item>
  <title>image</title>
  <link>https://scalerablog.wordpress.com/2016/10/26/valores-perezosos/image/#main</link>
  <pubDate>Mon, 17 Oct 2016 13:13:27 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/10/image.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4293</wp:post_id>
  <wp:post_date>2016-10-17 15:13:27</wp:post_date>
  <wp:post_date_gmt>2016-10-17 13:13:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>image</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4288</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/10/image.png</wp:attachment_url>
</item>
<item>
  <title>21495586</title>
  <link>https://scalerablog.wordpress.com/2016/10/26/valores-perezosos/attachment/21495586/#main</link>
  <pubDate>Mon, 17 Oct 2016 13:28:36 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/10/21495586.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4296</wp:post_id>
  <wp:post_date>2016-10-17 15:28:36</wp:post_date>
  <wp:post_date_gmt>2016-10-17 13:28:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>21495586</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4288</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/10/21495586.jpg</wp:attachment_url>
</item>
<item>
  <title>e9a2295b3db9b45c8f5484a09033c1c71cf88e3375bb7ff60456bc81c29a4e04</title>
  <link>https://scalerablog.wordpress.com/2016/10/26/valores-perezosos/e9a2295b3db9b45c8f5484a09033c1c71cf88e3375bb7ff60456bc81c29a4e04/#main</link>
  <pubDate>Mon, 17 Oct 2016 16:29:03 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/10/e9a2295b3db9b45c8f5484a09033c1c71cf88e3375bb7ff60456bc81c29a4e04.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4303</wp:post_id>
  <wp:post_date>2016-10-17 18:29:03</wp:post_date>
  <wp:post_date_gmt>2016-10-17 16:29:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>e9a2295b3db9b45c8f5484a09033c1c71cf88e3375bb7ff60456bc81c29a4e04</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4288</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/10/e9a2295b3db9b45c8f5484a09033c1c71cf88e3375bb7ff60456bc81c29a4e04.jpg</wp:attachment_url>
</item>
<item>
  <title>24195622</title>
  <link>https://scalerablog.wordpress.com/2016/11/16/mas-lazys-la-monada-state-y-otras-cosas-con-estado/attachment/24195622/#main</link>
  <pubDate>Mon, 17 Oct 2016 18:25:34 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/10/24195622.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4313</wp:post_id>
  <wp:post_date>2016-10-17 20:25:34</wp:post_date>
  <wp:post_date_gmt>2016-10-17 18:25:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>24195622</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4308</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/10/24195622.jpg</wp:attachment_url>
</item>
<item>
  <title>24314442</title>
  <link>https://scalerablog.wordpress.com/2016/11/21/more-lazy-values-the-state-monad-and-other-stateful-stuff/attachment/24314442/#main</link>
  <pubDate>Wed, 26 Oct 2016 15:18:46 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2016/11/24314442.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4332</wp:post_id>
  <wp:post_date>2016-10-26 17:18:46</wp:post_date>
  <wp:post_date_gmt>2016-10-26 15:18:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>24314442</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4324</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2016/11/24314442.jpg</wp:attachment_url>
</item>
<item>
  <title>8a9</title>
  <link>https://scalerablog.wordpress.com/2017/03/15/scalera-tip-manten-estado-en-tu-actor-sin-usar-un-solo-var/8a9/#main</link>
  <pubDate>Thu, 09 Mar 2017 17:57:51 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2017/03/8a9.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4343</wp:post_id>
  <wp:post_date>2017-03-09 19:57:51</wp:post_date>
  <wp:post_date_gmt>2017-03-09 17:57:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>8a9</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4342</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2017/03/8a9.gif</wp:attachment_url>
</item>
<item>
  <title>giphy</title>
  <link>https://scalerablog.wordpress.com/2017/03/15/scalera-tip-manten-estado-en-tu-actor-sin-usar-un-solo-var/giphy-8/#main</link>
  <pubDate>Thu, 09 Mar 2017 18:06:51 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2017/03/giphy.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4344</wp:post_id>
  <wp:post_date>2017-03-09 20:06:51</wp:post_date>
  <wp:post_date_gmt>2017-03-09 18:06:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>giphy-8</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4342</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2017/03/giphy.gif</wp:attachment_url>
</item>
<item>
  <title>giphy (1)</title>
  <link>https://scalerablog.wordpress.com/2017/03/15/scalera-tip-manten-estado-en-tu-actor-sin-usar-un-solo-var/giphy-1-2/#main</link>
  <pubDate>Thu, 09 Mar 2017 18:15:14 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2017/03/giphy-1.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4345</wp:post_id>
  <wp:post_date>2017-03-09 20:15:14</wp:post_date>
  <wp:post_date_gmt>2017-03-09 18:15:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>giphy-1-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4342</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2017/03/giphy-1.gif</wp:attachment_url>
</item>
<item>
  <title>giphy</title>
  <link>https://scalerablog.wordpress.com/2017/04/10/scalera-tip-contextos-implicitos-pegajosos/giphy-9/#main</link>
  <pubDate>Thu, 06 Apr 2017 14:40:47 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2017/04/giphy.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4362</wp:post_id>
  <wp:post_date>2017-04-06 16:40:47</wp:post_date>
  <wp:post_date_gmt>2017-04-06 14:40:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>giphy-9</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4361</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2017/04/giphy.gif</wp:attachment_url>
</item>
<item>
  <title>giphy (1)</title>
  <link>https://scalerablog.wordpress.com/2017/04/10/scalera-tip-contextos-implicitos-pegajosos/giphy-1-3/#main</link>
  <pubDate>Thu, 06 Apr 2017 15:05:48 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2017/04/giphy-1.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4365</wp:post_id>
  <wp:post_date>2017-04-06 17:05:48</wp:post_date>
  <wp:post_date_gmt>2017-04-06 15:05:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>giphy-1-3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4361</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2017/04/giphy-1.gif</wp:attachment_url>
</item>
<item>
  <title>giphy (2)</title>
  <link>https://scalerablog.wordpress.com/2017/04/10/scalera-tip-contextos-implicitos-pegajosos/giphy-2-2/#main</link>
  <pubDate>Thu, 06 Apr 2017 15:49:57 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2017/04/giphy-2.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4366</wp:post_id>
  <wp:post_date>2017-04-06 17:49:57</wp:post_date>
  <wp:post_date_gmt>2017-04-06 15:49:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>giphy-2-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4361</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2017/04/giphy-2.gif</wp:attachment_url>
</item>
<item>
  <title>giphy (3)</title>
  <link>https://scalerablog.wordpress.com/2017/04/10/scalera-tip-contextos-implicitos-pegajosos/giphy-3-2/#main</link>
  <pubDate>Thu, 06 Apr 2017 15:58:16 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2017/04/giphy-3.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4367</wp:post_id>
  <wp:post_date>2017-04-06 17:58:16</wp:post_date>
  <wp:post_date_gmt>2017-04-06 15:58:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>giphy-3-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4361</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2017/04/giphy-3.gif</wp:attachment_url>
</item>
<item>
  <title>giphy (4)</title>
  <link>https://scalerablog.wordpress.com/2017/04/10/scalera-tip-contextos-implicitos-pegajosos/giphy-4-2/#main</link>
  <pubDate>Thu, 06 Apr 2017 16:04:48 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">http://scalerablog.files.wordpress.com/2017/04/giphy-4.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4368</wp:post_id>
  <wp:post_date>2017-04-06 18:04:48</wp:post_date>
  <wp:post_date_gmt>2017-04-06 16:04:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>giphy-4-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4361</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://scalerablog.files.wordpress.com/2017/04/giphy-4.gif</wp:attachment_url>
</item>
<item>
  <title>Value classes: optimizando en runtime</title>
  <link>https://scalerablog.wordpress.com/?p=4382</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=4382</guid>
  <description/>
  <content:encoded><![CDATA[TBD

http://docs.scala-lang.org/overviews/core/value-classes.html]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4382</wp:post_id>
  <wp:post_date>2017-04-10 19:36:38</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f9618bfef87375d2c5b7ec5be233b886</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_626fbfcc8fa2df5e78639a221970143f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Tipos existenciales ¿A qué huelen las nubes?</title>
  <link>https://scalerablog.wordpress.com/2015/06/03/tipos-existenciales-a-que-huelen-las-nubes/</link>
  <pubDate>Wed, 03 Jun 2015 15:00:16 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=201</guid>
  <description/>
  <content:encoded><![CDATA[En Scala, es bastante común usar wildcards para obviar parameter types e incidir en que no es necesario conocer su tipo para ejecutar la lógica de nuestro método/clase. Algo del estilo:

[code language="scala"]
val myArray: Array[_] = Array(1,2,3)
[/code]

Antes de hablar de tipos existenciales en Scala, creo que hay que dar un pequeño disclaimer acerca de lo heavy que puede resultar (mejor que dos dormidinas con un traguito de anis).

<a href="https://scalerablog.files.wordpress.com/2015/05/tumblr_mgf4arkikk1rfq0ndo1_500.jpg"><img class=" size-medium wp-image-387 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/tumblr_mgf4arkikk1rfq0ndo1_500.jpg?w=300" alt="tumblr_mgf4arKIkk1rfq0ndo1_500" width="300" height="221" /></a>
<h3>Tipos existenciales</h3>
Supongamos un método que devuelve la cardinalidad de una colección de elementos. Si la colección es covariante en <em><strong>T</strong></em> ...

[code language="scala"]
scala&gt; def count(elements: List[Any]): Int = elements.length
count: (elements: List[Any])Int
[/code]

no tendríamos problemas a la hora de invocar dicho método con

[code language="scala"]
scala&gt; count(List[Int](1,2,3))
res0: Int = 3
[/code]

Sin embargo, si probamos con una colección invariante en <em><strong>T</strong></em>...

[code language="scala"]
scala&gt; def count(elements: Set[Any]): Int = elements.size
count: (elements: Set[Any])Int

scala&gt; count(Set[Int](1,2,3))
&lt;console&gt;:9: error: type mismatch;
 found   : scala.collection.immutable.Set[Int]
 required: Set[Any]
Note: Int &lt;: Any, but trait Set is invariant in type A.
You may wish to investigate a wildcard type such as `_ &lt;: Any`. (SLS 3.2.10)
              count(Set[Int](1,2,3))
                            ^
[/code]

Obvio. Ninguna sorpresa hasta ahora. Si queremos que nuestro método acepte cualquier tipo de elementos para Set, podemos parametrizarlo:

[code language="scala"]
scala&gt; def count[T](elements: Set[T]): Int = elements.size
count: [T](elements: Set[T])Int

scala&gt; count(Set[Int](1,2,3))
res0: Int = 3
[/code]

Sin embargo, esto nos obliga a añadir un parámetro que no aporta nada, solamente es una forma de obligar al compilador a que obvie el tipo contenido.

La alternativa que se propone es definir el parameter type dentro de la signatura del parámetro:

[code language="scala"]
scala&gt; def count(elements: Set[T] forSome {type T}): Int = elements.size
count: (elements: Set[_])Int

scala&gt; count(Set[Int](1,2,3))
res1: Int = 3
[/code]

Los tipos existenciales, por tanto, son lo que subyace al syntactic sugar de los wildcards. La equivalencia con notación "chachipiruli":

[code language="scala"]
scala&gt; def count(elements: Set[_]): Int = elements.size
count: (elements: Set[_])Int

scala&gt; count(Set[Int](1,2,3))
res2: Int = 3
[/code]

<h3>La vuelta de tuerca</h3>
Cabe destacar que, sobre la definición del parameter type, podemos añadir restricciones (context bounds). Por ejemplo, si queremos definir un Set que acepte todos los tipos primitivos...

[code language="scala"]
scala&gt; def count(elements: Set[T] forSome {type T&lt;:AnyVal}): Int = elements.size
count: (elements: Set[_ &lt;: AnyVal])Int
[/code]

Fijaos que la <em>REPL</em> ya nos devuelve el método declarado, pero con la notación "chachipiruli". Podemos probar que los context bounds funcionan con:

[code language="scala"]
scala&gt; count(Set(1,2,3))
res3: Int = 3

scala&gt; count(Set(new{}))
&lt;console&gt;:9: error: type mismatch;
 found   : AnyRef
 required: AnyVal
Note that implicit conversions are not applicable because they are ambiguous:
 both method ArrowAssoc in object Predef of type [A](self: A)ArrowAssoc[A]
 and method Ensuring in object Predef of type [A](self: A)Ensuring[A]
 are possible conversion functions from AnyRef to AnyVal
              count(Set(new{}))
                        ^
[/code]

En cuanto intentamos pasar al método un AnyRef cualquiera...<strong>ZASCA</strong>: salta el compilador imperturbable sobre su presa cual guepardo.

<a href="https://scalerablog.files.wordpress.com/2015/05/91662.jpg"><img class=" size-medium wp-image-388 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/91662.jpg?w=300" alt="91662" width="300" height="219" /></a>

Una limitación al respecto, es no poder definir view bounds sobre el tipo <em><strong>T</strong></em>:

[code language="scala"]
scala&gt; def count(elements: Set[T] forSome {type T&lt;%Int}): Int = elements.size
&lt;console&gt;:1: error: `=', `&gt;:', or `&lt;:' expected
       def count(elements: Set[T] forSome {type T&lt;%Int}): Int = elements.size
                                                 ^
[/code]

En este caso, tendríamos que volver a la idea original de parametrizar el método. Si ahora quisiéramos definir un método que sumara todos los elementos de un <em><strong>Set</strong></em>, y que dichos elementos fueran transformables a <em><strong>Double</strong></em>:

[code language="scala"]
scala&gt; def sum[T&lt;%Double](elements: Set[T]): Double =
  (0.0 /: elements)((d1,d2) =&gt; d1 + d2)
sum: [T](elements: Set[T])(implicit evidence$1: T =&gt; Double)Double

scala&gt; sum(Set[Int](1,2,3))
res9: Double = 6.0

scala&gt; sum(Set[Float](1.0f,2.5f))
res10: Double = 3.5
[/code]

<h3>La vuelta de tuerca (y en serio no se pueden dar más vueltas)</h3>
Si nos ponemos en tono filosófico, que ocurre si usamos el tipo existencial:

[code language="scala"]
T forSome {type T}
[/code]

<a href="https://scalerablog.files.wordpress.com/2015/05/982aad317c237d9fa918138b1c7bd020_1024.jpg"><img class=" size-medium wp-image-389 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/982aad317c237d9fa918138b1c7bd020_1024.jpg?w=300" alt="982aad317c237d9fa918138b1c7bd020_1024" width="300" height="222" /></a>

Sin entrar en debates sobre si el mundo es plano y se apoya sobre el lomo de cuatro elefantes que viajan a lomos de una tortuga cósmica....el tipo que hemos definido hace referencia a <em><strong>Any</strong></em> (Que detallaremos para los más lechones en futuros posts.).

Por tanto, ¿qué diferencia sustancial existe entre las siguientes definiciones?

[code language="scala"]
Set[T] forSome { type T }
Set[T forSome { type T }]
[/code]

<a href="https://scalerablog.files.wordpress.com/2015/05/my-eyes-messed-up_o_386883.gif"><img class="  wp-image-390 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/my-eyes-messed-up_o_386883.gif?w=300" alt="my-eyes-messed-up_o_386883" width="258" height="205" /></a>

El primer tipo hace referencia a todos los Set (independientemente del tipo que les parametriza) mientras que el segundo, como hemos dicho antes, representa <em><strong>Set[Any]</strong></em>.

¿Sigues sin ver la diferencia? La invarianza la marca, y con código se ve mejor. Con la primera definición, ya utilizada en los primeros ejemplos de este post tenemos que:

[code language="scala"]
scala&gt; def count(elements: Set[T] forSome {type T}): Int = elements.size
count: (elements: Set[_])Int

scala&gt; count(Set[Int](1,2,3))
res13: Int = 3

scala&gt; count(Set[String](&quot;hi&quot;,&quot;bye&quot;))
res14: Int = 2
[/code]

Pero si modificamos la definición del método, utilizando la segunda forma de las expuestas previamente, veremos que <em><strong>Set[Int]</strong></em> no es subtipo de <em><strong>Set[Any]</strong></em>:

[code language="scala"]
scala&gt; def count(elements: Set[T forSome {type T}]): Int = elements.size
count: (elements: Set[_])Int

scala&gt; count(Set[Int](1,2,3))
&lt;console&gt;:9: error: type mismatch;
 found   : scala.collection.immutable.Set[Int]
 required: Set[T forSome { type T }]
Note: Int &lt;: T forSome { type T }, but trait Set is invariant in type A.
You may wish to investigate a wildcard type such as `_ &lt;: T forSome { type T }`. (SLS 3.2.10)
              count(Set[Int](1,2,3))
                            ^

[/code]

¿Loco? Espero que lo suficiente para seguir leyendo nuestros próximos posts :)

¡Agur de naranja!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>201</wp:post_id>
  <wp:post_date>2015-06-03 17:00:16</wp:post_date>
  <wp:post_date_gmt>2015-06-03 15:00:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tipos-existenciales-a-que-huelen-las-nubes</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="advanced"><![CDATA[advanced]]></category>
  <category domain="post_tag" nicename="any"><![CDATA[any]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="existential"><![CDATA[existential]]></category>
  <category domain="post_tag" nicename="invariance"><![CDATA[invariance]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="type"><![CDATA[type]]></category>
  <category domain="post_tag" nicename="wildcard"><![CDATA[wildcard]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11298418498]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/606116445764739073";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>16</wp:comment_id>
    <wp:comment_author><![CDATA[Type classes en Scala | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/07/22/561/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.100.204</wp:comment_author_IP>
    <wp:comment_date>2015-07-22 17:01:16</wp:comment_date>
    <wp:comment_date_gmt>2015-07-22 15:01:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] saber donde podemos usar traits, para qué sirven los implícitos o qué narices son eso de los tipos genéricos. Hoy vamos a utilizar un poco de todo para explicar las type [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1437577277.733170032501220703125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1437581035.4863150119781494140625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1437584390</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1437584391.02157688140869140625;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-07-22 15:01:16</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Bounds: A View over your Context...</title>
  <link>https://scalerablog.wordpress.com/2015/06/17/bounds-a-view-over-your-context/</link>
  <pubDate>Wed, 17 Jun 2015 15:00:38 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=322</guid>
  <description/>
  <content:encoded><![CDATA[¿No te ha pasado alguna vez, cuando estás con los amigos, que sientes la necesidad de expresarte mejor al parametrizar tus métodos y clases?

<a href="https://scalerablog.files.wordpress.com/2015/06/i-know-that-feel-1.jpg"><img class=" size-medium wp-image-465 aligncenter" src="https://scalerablog.files.wordpress.com/2015/06/i-know-that-feel-1.jpg?w=300" alt="I-know-that-feel (1)" width="300" height="277" /></a>
<h3>Context bounds</h3>
Los context bounds permiten definir restricciones sobre la herencia de los parameter types.
Por ejemplo, supongamos que tenemos la clásica herencia:

[code language="scala"]
trait Animal
trait Cat extends Animal
trait Dog extends Animal
[/code]

Si queremos definir un método que reciba como argumento cualquier animal podríamos definir el método como sigue:

[code language="scala"]
def myMethod(animal: Animal): Unit =
  println(animal)
[/code]

Pero usando parameter types, también podríamos hacerlo como sigue:

[code language="scala"]
def myMethod[T&lt;:Animal](animal: T): Unit =
  println(animal)
[/code]

Con la notación <strong>&lt;:</strong> forzamos a que el tipo <strong>T</strong> sea un subtipo de <strong>Animal</strong>.
Ahora bien, ¿qué aporta entonces la segunda notación frente a la primera? abramos un poco la mente...

<a href="https://scalerablog.files.wordpress.com/2015/06/post-28553-steve-jobs-mind-blown-gif-hd-t-pvbd.gif"><img class=" size-medium wp-image-466 aligncenter" src="https://scalerablog.files.wordpress.com/2015/06/post-28553-steve-jobs-mind-blown-gif-hd-t-pvbd.gif?w=300" alt="post-28553-Steve-Jobs-mind-blown-gif-HD-T-pVbd" width="300" height="200" /></a>

¿Qué ocurre si en vez de recibir un Animal nuestro método, recibiera un Set[Animal]?

Pues que no es lo mismo un Set[Animal] que un Set[_&lt;:Animal], por lo que tendríamos que definir nuestro método siguiendo alguna de las siguientes opciones:

[code language="scala"]
def myMethod[T&lt;:Animal](animals: Set[T]): Unit =
  animals.foreach(println)

def myMethod(animals: Set[_&lt;:Animal]): Unit =
  animals.foreach(println)
[/code]

También podemos definir restricciones para que el tipo recibido sea un supertype de Dog, como por ejemplo:

[code language="scala"]
def myType[T&gt;:Dog](animals:Set[T]): Unit =
  animals.foreach(println)
myType(Set(new Animal{})) //ok!
[/code]

<h3>View bounds</h3>
Si no necesitamos definir restricciones de herencia, pero queremos que exista un modo de convertir el parameter type a otra cosa, entonces lo que estamos buscando son los view bounds. Su notación es <strong>&lt;%</strong>.
Por ejemplo:

[code language="scala"]
def myMethod[T&lt;%Double](doubleLikes: Set[T]): Unit=
  douleLikes.foreach(d =&gt; println(d + 2.0))
[/code]

Lo que signfica es que nuestro método está parametrizado por un tipo T y que, en el scope actual, debe haber una función de conversión de T a Double. No es sino syntactic sugar para:

[code language="scala"]
def myMethod[T](doubleLikes: Set[T])(implicit ev: T =&gt; Double): Unit =
  douleLikes.foreach(d =&gt; println(ev(d) + 2.0))
[/code]

De manera que podríamos invocar nuestro método como sigue:

[code language="scala"]
myMethod(Set(1,2,3))//ok
myMethod(Set(true,false))//fail!
&lt;console&gt;:9: error: No implicit view available from Boolean =&gt; Double.
              myMethod(Set(true,false,true))
               ^
[/code]

Si no existe una vista para un tipo concreto, como en este caso para Boolean, nos podemos definir una:

[code language="scala"]
implicit def toD(b: Boolean):Double = 
  if (b) 1.0 else 2.0
myMethod(Set(true,false))//ok
[/code]


Y nada más por hoy. Fácil y sencillo :-)

¡Agur de limón!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>322</wp:post_id>
  <wp:post_date>2015-06-17 17:00:38</wp:post_date>
  <wp:post_date_gmt>2015-06-17 15:00:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>bounds-a-view-over-your-context</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="post_tag" nicename="bound"><![CDATA[bound]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="context"><![CDATA[context]]></category>
  <category domain="post_tag" nicename="parameter"><![CDATA[parameter]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="type"><![CDATA[type]]></category>
  <category domain="post_tag" nicename="view"><![CDATA[view]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11764345747]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/611189519027580928";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Implied, Lisa, or Implode?</title>
  <link>https://scalerablog.wordpress.com/2015/05/29/implied-lisa-or-implode/</link>
  <pubDate>Fri, 29 May 2015 08:15:18 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=337</guid>
  <description/>
  <content:encoded><![CDATA[One of the worst fears a Scalaman may have is implicits: you don't like them, you avoid them, they're scary, they're bloody hell.

<a href="https://scalerablog.files.wordpress.com/2015/05/satan.jpg"><img class="  wp-image-316 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/satan.jpg?w=300" alt="satan" width="175" height="131" /></a>

And it's a pitty that, being able to use that powerful tool, you might get in panic and forget about it, avoiding its use. Implicits may result a fancy solution for certain circumstances as we will enum you later.

To have a much better understanding, lets set up a theoretical framwork.
<h3>Implicit values</h3>
Imagine you are defining 'identity' function over integer numbers' operations (given an integer number and an operation, it should return the same number). Depending on operation type, the value to be used in the operation (add,product) is different. For example, for adding we use zero (<em><strong>0 + n = n</strong></em>) and for multiplying we use 1 (<em><strong>1 * n = n</strong></em>). If you want to avoid passing the neutral element in a explicit way, you can use implicit values as follows.

First of all, we declare an implicit integer that will represent adding neutral element:

[code language="scala"]
implicit val addNeutralElement: Int = 0
[/code]

And now, we can declare identity function at adding:

[code language="scala"]
def addIdentity(n: Int)(implicit neutral: Int): Int =
  n + neutral
[/code]

Have a closer look and realize that implicit parameters in the method are declared in a different parameter group, and they are preceded by the reserverd word '<em><strong>implicit</strong></em>'.

Another tip to have in mind is that, what really matters is the argument type instead of its name: compiler will look for an implicit integer within the set up scope.

This can be also applied to methods:

[code language="scala"]
implicit def generateAddIdentity():Int = 0
[/code]

...and objects...

[code language="scala"]
abstract class NeutralElement(n: Int)
implicit case object AddNeutralElement extends NeutralElement(0)
[/code]

<h3>Implicit ambiguity / Scopes</h3>
So let's say we want to define now the identity function for multiplying. At the same scope, we could define another implicit value for product neutral element:

[code language="scala"]
implicit val addNeutralElement: Int = 0
implicit val productNeutralElement: Int = 1
def addIdentity(n: Int)(implicit neutral: Int): Int =
  n + neutral
def productIdentity(n: Int)(implicit neutral: Int): Int =
  n * neutral
[/code]

If we try to execute any of both methods...<strong>Woops</strong>! The compiler will complain about something nearly understandable:

[code]
scala&gt; addIdentity(2)
&lt;console&gt;:13: error: ambiguous implicit values:
 both value addNeutralElement of type =&gt; Int
 and value productNeutralElement of type =&gt; Int
 match expected type Int
              addIdentity(2)
                         ^
[/code]

What it really means is it doesn't know which of both implicit values is the needed one: there's implicit ambiguity. To avoid this, you can define different scopes which are provided by context objects. Something like:

[code language="scala"]
object AddStuff {
  implicit val addNeutralElement: Int = 0
  def addIdentity(n: Int)(implicit neutral: Int): Int =
    n + neutral
}

//in your snippet...

{
  import AddStuff._
  addIdentity(2)
}
[/code]

I know this is yelling: "I need type-classes!" but we're not removing these gold minutes from implicits topc. We're not that much cruel...
<h3>Implicit classes</h3>
We can also define implicit classes in Scala. Their main target is to extend functionality of certain classes. For example, if we're using some third parties' framework, and one of its classes looks like this:

[code language="scala"]
class ThirdParties {
  def method1(): Int = ???
  def method2(n:Int): Boolean = ???
}
[/code]

we cannot modify its source code, but if we want to add some extra methods to ThirdParties' class, we can define an implicit class:

[code language="scala"]
implicit class ExtraThirdParties(tp: ThirdParties){
  def method3(n: Int): Boolean =
    !tp.method2(n)
  def method4(): Int = ???
  def method5(): Int =
    tp.method1() * 2
}
[/code]

This way, when we type down a 'ThirdParties' value and a method that doesn't belong to its class, the compiler will look for implicit classes and/or methods that may fit in such signature. So we'll be able to use, both originaly defined methods and the new ones (those we have just implemented in the implicit class):

[code language="scala"]
val myTp = new ThirdParties
myTp.method1()
myTp.method2(5)
myTp.method3(2)
myTp.method4()
myTp.method5()
[/code]

<h3>Use cases</h3>
So the million dollar question is, in which cases we can use this powerful swiss knife?

* Setting up execution contexts
* Providing additional information about parameter types (type classes)
* Generating DSLs
* Extending a class functionality (implicit classes)

Providing an example of all these cases would be really tough, so we will take a look at some of them in future posts.

<a href="https://scalerablog.files.wordpress.com/2015/05/giphy.gif"><img class=" size-full wp-image-320 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/giphy.gif" alt="giphy" width="245" height="180" /></a>

Peace out! :-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>337</wp:post_id>
  <wp:post_date>2015-05-29 10:15:18</wp:post_date>
  <wp:post_date_gmt>2015-05-29 08:15:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>implied-lisa-or-implode</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="ambiguity"><![CDATA[ambiguity]]></category>
  <category domain="post_tag" nicename="class"><![CDATA[class]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="identity"><![CDATA[identity]]></category>
  <category domain="post_tag" nicename="implicit"><![CDATA[implicit]]></category>
  <category domain="post_tag" nicename="implode"><![CDATA[implode]]></category>
  <category domain="post_tag" nicename="medium"><![CDATA[medium]]></category>
  <category domain="post_tag" nicename="neutral"><![CDATA[neutral]]></category>
  <category domain="post_tag" nicename="satan"><![CDATA[satan]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11123923829]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/604199388445954048";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>7</wp:comment_id>
    <wp:comment_author><![CDATA[Ignacio Navarro (@inavarromartin)]]></wp:comment_author>
    <wp:comment_author_email>inavarromartin@twitter.example.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/inavarromartin</wp:comment_author_url>
    <wp:comment_author_IP>83.36.216.75</wp:comment_author_IP>
    <wp:comment_date>2015-06-05 11:49:52</wp:comment_date>
    <wp:comment_date_gmt>2015-06-05 09:49:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The uses of implicit values are limitless. One very common use that you haven't said is implicit conversions/views. https://gist.github.com/pirita/369997fb31bd96b647c1
There is even an special type syntax for views in scala A&lt;%B, that means A behaves similar to B. 
Implicits in scala are very powerful stuff, indeed.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1433497792</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1433497792.7146699428558349609375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value>twitter</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value>http://pbs.twimg.com/profile_images/554768399734038528/N8W4beE4_normal.jpeg</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value>1131671724</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1433497792</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value>1</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-06-05 09:49:52</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8</wp:comment_id>
    <wp:comment_author><![CDATA[jpaniego]]></wp:comment_author>
    <wp:comment_author_email>javiersantospaniego@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.82.197.162</wp:comment_author_IP>
    <wp:comment_date>2015-06-05 11:57:27</wp:comment_date>
    <wp:comment_date_gmt>2015-06-05 09:57:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Totally agree! 
Indeed, we have a special post dedicated to context and view bounds :-)

Thanks for your comment.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>7</wp:comment_parent>
    <wp:comment_user_id>59615419</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1433498248</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1433498248.3783180713653564453125;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1433498248</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-06-05 09:57:27</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>18</wp:comment_id>
    <wp:comment_author><![CDATA[Type classes in Scala | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/07/27/type-classes-in-scala/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.99.118</wp:comment_author_IP>
    <wp:comment_date>2015-07-27 12:03:12</wp:comment_date>
    <wp:comment_date_gmt>2015-07-27 10:03:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] a few months with the blog, we now know where we can use traits, what is the purpose of implicits, or what the hell are generic types. Today, we are going to use a little bit of everything in [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1437991393.41475009918212890625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1437992216</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1437992216.2895870208740234375;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-07-27 10:03:12</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Los 7 pecados capitales de las expresiones lambda</title>
  <link>https://scalerablog.wordpress.com/2015/06/10/los-7-pecados-capitales-de-las-expresiones-lambda/</link>
  <pubDate>Wed, 10 Jun 2015 15:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=416</guid>
  <description/>
  <content:encoded><![CDATA[Hace unas semanas estuvimos hablando de expresiones lambda. Vimos como utilizarlas y algunas de las ventajas que ofrecen.

Sin embargo, no es oro todo lo que parece. El pasado mes de Abril, Jamie Allen vino al <a title="Meetup Scala Madrid" href="http://www.meetup.com/Scala-Programming-Madrid/" target="_blank">meetup de Scala en Madrid</a> y nos habló del lado oscuro de las expresiones lambda: <a title="What you need to know about lambdas" href="http://t.co/iSyabvfeYO" target="_blank">"What you need to know about lambdas"</a>. En este post vamos a hacer un overview de la charla, y corroborar que no podemos usar expresiones lambda de cualquier manera.

<strong>Primer problema: No es reutilizable</strong>

Debido a que no estamos poniendo nombre a la función, no podremos reutilizarla en otros lugares.

<strong>Segundo problema: No se puede testear de forma aislada</strong>

Como es una función implementada de forma ad-hoc, e incrustada en algún lugar, no es posible probarla de forma aislada.

<strong>Tercer problema: Mantenimiento</strong>

No es bueno abusar de expresiones lambda complicadas y anidadas. Provoca que nuestro código se vuelva dificil de seguir, y por tanto, poco mantenible.

[code language="scala"]
List(1, 2, 0, 3, 4).flatMap(
  x =&gt; (1 to x).filter(
    _ % 2 == 0
  ).map( _ * 2 )
)

//List(4, 4, 4, 8)

[/code]

<strong>Cuarto problema: trazas de error</strong>

Este problema varía en función del lenguaje de programación que se utilice. En algunos casos las trazas de error serán mejores y en otros casos te darán ganas de cortarte las venas. En nuestro caso, en Scala, cuando aparece un error en una función anónima obtendremos un mensaje de error con esta pinta:

[code language="scala"]
List(1, 2, 0, 3, 4).map(1 / _)

java.lang.ArithmeticException: / by zero
at $anonfun$1.apply$mcII$sp(&lt;console&gt;:8)
at $anonfun$1.apply(&lt;console&gt;:8)
at $anonfun$1.apply(&lt;console&gt;:8)
at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
at scala.collection.immutable.List.foreach(List.scala:318)
...
[/code]

Debido a que no se ha dado nombre a la función, el sistema nos devolverá un error en un <em>$$anonfun</em>. Un poco WTF.

<strong>Quinto problema: Dificultad para depurar</strong>

Realmente no es un problema propio de las expresiones lambda, sino de la forma de expresar el código.
Si encadenamos varias expresiones lambda en la misma línea y existe algún error en alguna de ellas, no podremos saber cual de ellas ha fallado. Por ello es conveniente separarlas en varias líneas.

La expresión

[code language="scala"]
List(1, 2, 0, 3, 4).map(_ + 1).filter(_ % 2 == 0).map(_ * 2)
[/code]

será mejor expresarla de esta forma:

[code language="scala"]
List(1, 2, 0, 3, 4).map(_ + 1)
  .filter(_ % 2 == 0)
  .map(_ * 2)
[/code]

<strong>Sexto problema: Puede encapsular variables con estado</strong>

Una función lambda puede tener acceso a todo el estado de su scope. Por tanto, puede tener acceso a algún valor mutable y hacer que tengamos diferentes resultados en cada ejecución. Algo que no queremos en la programación funcional.

<strong>Séptimo problema ...</strong>

Sus problemas se pueden encapsular en solo seis y provocan que algunos títulos de post no encajen del todo.

<a href="https://scalerablog.files.wordpress.com/2015/05/desk_flip.jpg"><img class="  wp-image-419 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/desk_flip.jpg?w=300" alt="desk_flip" width="189" height="171" /></a>

<strong>Conclusión</strong>

Como hemos podido ver, usar expresiones lambda puede originar algunos quebraderos de cabeza. Por ello se recomienda usar solo aquellas que tengan una baja complejidad. En caso de que queramos hacer algo más complejo o enrrevesado será mejor definir un método para poder testearla y depurarla sin ningún tipo de problema. Además, hay que tener especial cuidado de no utilizar variables del scope que puedan cambiar de valor. Debemos seguir un enfoque funcional.

Os recomiendo que le echéis un ojo a la <a title="What you need to know about lambdas" href="http://autentia.com/2015/04/23/entrevistamos-a-jamie-allen-en-su-paso-por-espana/" target="_blank">charla</a> . En ella se profundiza mucho más (este post solo ha sido un pequeño resumen) y puede ayudarnos a trabajar con expresiones lambda de una mejor forma.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>416</wp:post_id>
  <wp:post_date>2015-06-10 17:00:00</wp:post_date>
  <wp:post_date_gmt>2015-06-10 15:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>los-7-pecados-capitales-de-las-expresiones-lambda</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="anonymous"><![CDATA[anonymous]]></category>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="lambda"><![CDATA[lambda]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11531804489]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/608650449202184192";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Lambda Expressions Everywhere</title>
  <link>https://scalerablog.wordpress.com/2015/06/01/lambda-expressions-everywhere/</link>
  <pubDate>Mon, 01 Jun 2015 13:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=456</guid>
  <description/>
  <content:encoded><![CDATA[From the makers of ‘Anonymous classes’ comes… <strong>anonymous functions</strong>. Or as friends call them: <strong>lambda expressions</strong>. Anonymous functions, as we already saw in a previous <a title="Seeking anonymity. Anonymous classes" href="https://scalerablog.wordpress.com/2015/05/29/seeking-anonymity-anonymous-classes/">post</a>, are functions that don’t need to be declared previously. Let’s see an example: A function which returns the length of a <em>String</em> removing any blank space in it could be defined as:

[code language="scala"]
  def length(s: String): Int = s.replaceAll(&quot; &quot;, &quot;&quot;).length
[/code]

Its equivalent anonymous function would be:

[code language="scala"]
  (s: String) =&gt; s.replaceAll(&quot; &quot;, &quot;&quot;).length
[/code]

The type of this expression is: <em>String =&gt; Int</em>

<strong>Where can we use anonymous functions?</strong>

The most common way to use them is in function that accept other functions as parameter. This type of functions are called <strong>Higher Order Functions</strong>. Functions that return a function as result are also known as higher order functions. Fantastic, extraordinary… an example, please? Thanks to our unlimited imagination, we’ll create a simple integer calculator. Let’s define our calculator in the following way:

[code language="scala"]
  object Calculator {
    
    def sum(n1: Int, n2: Int): Int = n1 + n2

    def subtract(n1: Int, n2: Int): Int = n1 - n2

    def multiplicate(n1: Int, n2: Int): Int = n1 * n2

    def divide(n1: Int, n2: Int): Int = n1 / n2
  }
[/code]

Hmmmm, cool. A class with some methods in it. It works but… what if we try and take a more generic turn?
<a href="https://scalerablog.files.wordpress.com/2015/05/meme-functions.jpg"><img class="  wp-image-400 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/meme-functions.jpg?w=300" alt="meme-functions" width="245" height="214" /></a>

What we really want is to apply a binary operation. That operation, given two integers, will return a new integer. We could say that we need a method like this:

[code language="scala"]
  def calculate(n1: Int, n2: Int)(operation:(Int, Int) =&gt; Int) =
    operation(n1, n2)
[/code]

As can be appreciated, we are actually passing a function as parameter. We are using an anonymous function. In order to make it more readable, we can create a new type that represents the integer binary operation: <em>(Int, Int) =&gt; Int</em>.

[code language="scala"]
  type Operation = (Int, Int) =&gt; Int
[/code]

And if we apply this to our calculate method:

[code language="scala"]
  def calculate(n1: Int, n2: Int)(operation: Operation) =
    operation(n1, n2)
[/code]

This method can be used in several ways:

1) The easiest one: we insert a previously defined function.

[code language="scala"]
  def addition(n1: Int, n2: Int) = n1 + n2

calculate(1, 2)(addition) //returns 3
[/code]

2) There is no function defined. Besides, the function is pretty simple and it won’t be used elsewhere in the code. All right then, we can use a lambda expression:

[code language="scala"]
  calculate(1, 2)((n1: Int, n2: Int) =&gt; n1 + n2) //returns 3
[/code]

As can be seen, in this case, an anonymous function is used to define the operation we want to apply to the two integers. It is a nimble and quick way to define functions. But that’s not all. Thanks to the type inference, we can avoid writing the type of the input parameters:

[code language="scala"]
  calculate(1, 2)((n1, n2) =&gt; n1 + n2) //returns 3
[/code]

And with a spoonful of syntactic sugar…

[code language="scala"]
  calculate(1, 2)(_ + _) //returns 3
[/code]

<strong>What advantages do we have when compared to the object oriented implementation?</strong>
<ul>
	<li>Our code is significantly reduced:</li>
</ul>

[code language="scala"]
  object Calculator {

    type Operation = (Int, Int) =&gt; Int
    
    def calculate(n1: Int, n2: Int)(operation: Operation) =
      operation(n1, n2)
  }
[/code]

<ul>
	<li>We are not bound to use only the operations that we have hardcoded in our implementation. We can create more complex operations on the fly:</li>
</ul>

[code language="scala"]
  calculate(1, 2)((n1, n2) =&gt; (n1 + n2) * (n1 - n2))
[/code]

As it always happens in Scala, its misuse might lead to unpleasant consequences. In future posts, we’ll take a look at the dark side of lambda expressions. In the meantime, we shall remain naively happy.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>456</wp:post_id>
  <wp:post_date>2015-06-01 15:00:00</wp:post_date>
  <wp:post_date_gmt>2015-06-01 13:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>lambda-expressions-everywhere</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="anonymous"><![CDATA[anonymous]]></category>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="lambda"><![CDATA[lambda]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[400]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11224508448]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/605367938309177344";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Existential types: what do clouds smell like?</title>
  <link>https://scalerablog.wordpress.com/2015/06/08/existential-types-what-do-clouds-smell-like/</link>
  <pubDate>Mon, 08 Jun 2015 09:00:49 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=460</guid>
  <description/>
  <content:encoded><![CDATA[In Scala, it's pretty common to use wildcards to get rid of declaring parameter types and insist on it's not necessary knowing their type for executing our method/class associated logic.
Something like:

[code language="scala"]
val myArray: Array[_] = Array(1,2,3)
[/code]

Before talking about existential types, I think it's appropiate to give a little disclaimer about how heavy it can seem (better than a couple of pills with a shot).

<a href="https://scalerablog.files.wordpress.com/2015/05/tumblr_mgf4arkikk1rfq0ndo1_500.jpg"><img class=" size-medium wp-image-387 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/tumblr_mgf4arkikk1rfq0ndo1_500.jpg?w=300" alt="tumblr_mgf4arKIkk1rfq0ndo1_500" width="300" height="221" /></a>
<h3>Existential types</h3>
Let's suppose we have a method that returns cardinality of an element collection. If this collection is covariant in <em><strong>T</strong></em> ...

[code language="scala"]
scala&gt; def count(elements: List[Any]): Int = elements.length
count: (elements: List[Any])Int
[/code]

we would have no problems when invoking such method with

[code language="scala"]
scala&gt; count(List[Int](1,2,3))
res0: Int = 3
[/code]

However, if we try with a collection which is invariant in <em><strong>T</strong></em>...

[code language="scala"]
scala&gt; def count(elements: Set[Any]): Int = elements.size
count: (elements: Set[Any])Int

scala&gt; count(Set[Int](1,2,3))
&lt;console&gt;:9: error: type mismatch;
 found   : scala.collection.immutable.Set[Int]
 required: Set[Any]
Note: Int &lt;: Any, but trait Set is invariant in type A.
You may wish to investigate a wildcard type such as `_ &lt;: Any`. (SLS 3.2.10)
              count(Set[Int](1,2,3))
                            ^
[/code]

Obvious. No surprise so far. A Set[Int] ain't a Set[Any]. If we want that our method accepts any kind of Set of elements, we can make it generic:

[code language="scala"]
scala&gt; def count[T](elements: Set[T]): Int = elements.size
count: [T](elements: Set[T])Int

scala&gt; count(Set[Int](1,2,3))
res0: Int = 3
[/code]

Nevertheless, this forces us to add a pointless parameter type: it's just a way of making compiler happy, obviating the contained type.

The proposed alternative is to define the parameter type inside the parameter signature, like this:

[code language="scala"]
scala&gt; def count(elements: Set[T] forSome {type T}): Int = elements.size
count: (elements: Set[_])Int

scala&gt; count(Set[Int](1,2,3))
res1: Int = 3
[/code]

Existential types are in deed what underlies the syntactic sugar of wildcards. The equivalence with to 'yee-haa' notation is:

[code language="scala"]
scala&gt; def count(elements: Set[_]): Int = elements.size
count: (elements: Set[_])Int

scala&gt; count(Set[Int](1,2,3))
res2: Int = 3
[/code]

<h3>The twist</h3>
Significantly, about parameter definition, we can add some constraints (context bounds). For example, if we want to define a Set that contains every kind of primitive type...

[code language="scala"]
scala&gt; def count(elements: Set[T] forSome {type T&lt;:AnyVal}): Int = elements.size
count: (elements: Set[_ &lt;: AnyVal])Int
[/code]

Just realize that <em>REPL</em> is already returning the declared method with the 'yee-haa' notation. We can prove that context bounds work with:

[code language="scala"]
scala&gt; count(Set(1,2,3))
res3: Int = 3

scala&gt; count(Set(new{}))
&lt;console&gt;:9: error: type mismatch;
 found   : AnyRef
 required: AnyVal
Note that implicit conversions are not applicable because they are ambiguous:
 both method ArrowAssoc in object Predef of type [A](self: A)ArrowAssoc[A]
 and method Ensuring in object Predef of type [A](self: A)Ensuring[A]
 are possible conversion functions from AnyRef to AnyVal
              count(Set(new{}))
                        ^
[/code]

Just when we try to invoke the method with a common AnyRef...<strong>BAZINGA!</strong>: the compiler jumps its prey like a cheetah.

<a href="https://scalerablog.files.wordpress.com/2015/05/91662.jpg"><img class=" size-medium wp-image-388 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/91662.jpg?w=300" alt="91662" width="300" height="219" /></a>

A limitation is the impossibility of defining view bounds over the type <em><strong>T</strong></em>:

[code language="scala"]
scala&gt; def count(elements: Set[T] forSome {type T&lt;%Int}): Int = elements.size
&lt;console&gt;:1: error: `=', `&gt;:', or `&lt;:' expected
       def count(elements: Set[T] forSome {type T&lt;%Int}): Int = elements.size
                                                 ^
[/code]

In this case, we would have to get back to the original idea of parameterizing the method. If we wanted to define a method that added all the elements of a <em><strong>Set</strong></em>, and that all elements had a way to become a <em><strong>Double</strong></em>:

[code language="scala"]
scala&gt; def sum[T&lt;%Double](elements: Set[T]): Double =
  (0.0 /: elements)((d1,d2) =&gt; d1 + d2)
sum: [T](elements: Set[T])(implicit evidence$1: T =&gt; Double)Double

scala&gt; sum(Set[Int](1,2,3))
res9: Double = 6.0

scala&gt; sum(Set[Float](1.0f,2.5f))
res10: Double = 3.5
[/code]

<h3>Twisting the twist (and seriously, you can't twist it anymore)</h3>
If we became philosophers, what would it happen if we used the following existential type?

[code language="scala"]
T forSome {type T}
[/code]

<a href="https://scalerablog.files.wordpress.com/2015/05/982aad317c237d9fa918138b1c7bd020_1024.jpg"><img class=" size-medium wp-image-389 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/982aad317c237d9fa918138b1c7bd020_1024.jpg?w=300" alt="982aad317c237d9fa918138b1c7bd020_1024" width="300" height="222" /></a>

Without opening a debate if the world is plain and it's hold by four elephants on the shell of a cosmic turtle...the type we refer to is <em><strong>Any</strong></em> (We will have a closer look at Any in future posts.).

So, what's the main difference between the following definitions?

[code language="scala"]
Set[T] forSome { type T }
Set[T forSome { type T }]
[/code]

<a href="https://scalerablog.files.wordpress.com/2015/05/my-eyes-messed-up_o_386883.gif"><img class=" wp-image-390 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/my-eyes-messed-up_o_386883.gif?w=300" alt="my-eyes-messed-up_o_386883" width="258" height="205" /></a>

First type refers to all kind of Set (ignoring the contained type) while the second type, as we have said before, represents <em><strong>Set[Any]</strong></em>.

Can't you still see the difference? Think in invariance terms, and with the help of a little piece of code. With first definition, already used in first examples of this post, we have that:

[code language="scala"]
scala&gt; def count(elements: Set[T] forSome {type T}): Int = elements.size
count: (elements: Set[_])Int

scala&gt; count(Set[Int](1,2,3))
res13: Int = 3

scala&gt; count(Set[String](&quot;hi&quot;,&quot;bye&quot;))
res14: Int = 2
[/code]

But if we change the method definition, using the second of the previously exposed forms, we will see that <em><strong>Set[Int]</strong></em> ain't a subtype of <em><strong>Set[Any]</strong></em>:

[code language="scala"]
scala&gt; def count(elements: Set[T forSome {type T}]): Int = elements.size
count: (elements: Set[_])Int

scala&gt; count(Set[Int](1,2,3))
&lt;console&gt;:9: error: type mismatch;
 found   : scala.collection.immutable.Set[Int]
 required: Set[T forSome { type T }]
Note: Int &lt;: T forSome { type T }, but trait Set is invariant in type A.
You may wish to investigate a wildcard type such as `_ &lt;: T forSome { type T }`. (SLS 3.2.10)
              count(Set[Int](1,2,3))
                            ^

[/code]

Mad enough? I hope you don't, just to keep reading further posts :)

Peace out!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>460</wp:post_id>
  <wp:post_date>2015-06-08 11:00:49</wp:post_date>
  <wp:post_date_gmt>2015-06-08 09:00:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>existential-types-what-do-clouds-smell-like</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="advanced"><![CDATA[advanced]]></category>
  <category domain="post_tag" nicename="any"><![CDATA[any]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="existential"><![CDATA[existential]]></category>
  <category domain="post_tag" nicename="invariance"><![CDATA[invariance]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="type"><![CDATA[type]]></category>
  <category domain="post_tag" nicename="wildcard"><![CDATA[wildcard]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11454199874]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/607849618047524864";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>19</wp:comment_id>
    <wp:comment_author><![CDATA[Type classes in Scala | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/07/27/type-classes-in-scala/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.99.118</wp:comment_author_IP>
    <wp:comment_date>2015-07-27 12:03:15</wp:comment_date>
    <wp:comment_date_gmt>2015-07-27 10:03:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] we now know where we can use traits, what is the purpose of implicits, or what the hell are generic types. Today, we are going to use a little bit of everything in order to explain type [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1437991396.5444591045379638671875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1437992233</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1437992234.1203420162200927734375;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-07-27 10:03:15</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Bounds: A View over your Context...*</title>
  <link>https://scalerablog.wordpress.com/2015/06/22/bounds-a-view-over-your-context-2/</link>
  <pubDate>Mon, 22 Jun 2015 09:00:26 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=479</guid>
  <description/>
  <content:encoded><![CDATA[Has it ever happened to you that you're with your colleagues and you feel the need of expressing better parameterizing your methods and classes?

<a href="https://scalerablog.files.wordpress.com/2015/06/i-know-that-feel-1.jpg"><img class=" size-medium wp-image-465 aligncenter" src="https://scalerablog.files.wordpress.com/2015/06/i-know-that-feel-1.jpg?w=300" alt="I-know-that-feel (1)" width="300" height="277" /></a>

<h3>Context bounds</h3>

Context bounds allow defining constraints about parameter types inheritance.
For example, let's suppose the classical inheritance:

[code language="scala"]
trait Animal
trait Cat extends Animal
trait Dog extends Animal
[/code]

If we want to define a method with an any-kind-of-animal argument, we could define that method as follows:

[code language="scala"]
def myMethod(animal: Animal): Unit =
  println(animal)
[/code]

But, using parameter types, we could also do it this way:

[code language="scala"]
def myMethod[T&lt;:Animal](animal: T): Unit =
  println(animal)
[/code]

With <strong>&lt;:</strong> notation, we force the type <strong>T</strong> to be a subtype of <strong>Animal</strong>.
So now, what's the benefit of using the second notation instead of using the first one? Let's free our minds a little bit...

<a href="https://scalerablog.files.wordpress.com/2015/06/post-28553-steve-jobs-mind-blown-gif-hd-t-pvbd.gif"><img class=" size-medium wp-image-466 aligncenter" src="https://scalerablog.files.wordpress.com/2015/06/post-28553-steve-jobs-mind-blown-gif-hd-t-pvbd.gif?w=300" alt="post-28553-Steve-Jobs-mind-blown-gif-HD-T-pVbd" width="300" height="200" /></a>

What happens if our method receives a Set[Animal] instead of an Animal?

Well, we have to admit, due to invariance, that a Set[Animal] is not the same as a Set[_&lt;:Animal], and we would have to declare our method using one of the following options:

[code language="scala"]
def myMethod[T&lt;:Animal](animals: Set[T]): Unit =
  animals.foreach(println)

def myMethod(animals: Set[_&lt;:Animal]): Unit =
  animals.foreach(println)
[/code]

We can also define constraints so that the expressed type is a supertype of Dog, for example:

[code language="scala"]
def myType[T&gt;:Dog](animals:Set[T]): Unit =
  animals.foreach(println)
myType(Set(new Animal{})) //ok!
[/code]

<h3>View bounds</h3>

If we don't need to define inheritance constraints, but we want a way to convert the parameter type to something else, then what we're looking for are view bounds. Their notation is <strong>&lt;%</strong>.
For example:

[code language="scala"]
def myMethod[T&lt;%Double](doubleLikes: Set[T]): Unit=
  douleLikes.foreach(d =&gt; println(d + 2.0))
[/code]

It means that our method is parameterized by a type T and, in current scope, there must exist a conversion function from T to Double. It's just syntactic sugar for:

[code language="scala"]
def myMethod[T](doubleLikes: Set[T])(implicit ev: T =&gt; Double): Unit =
  douleLikes.foreach(d =&gt; println(ev(d) + 2.0))
[/code]

This way, we could invoke our method like this:

[code language="scala"]
myMethod(Set(1,2,3))//ok
myMethod(Set(true,false))//fail!
&lt;console&gt;:9: error: No implicit view available from Boolean =&gt; Double.
              myMethod(Set(true,false,true))
               ^
[/code]

If there is no view for a concrete type, like in this case for Boolean, we can define one:

[code language="scala"]
implicit def toD(b: Boolean):Double = 
  if (b) 1.0 else 2.0
myMethod(Set(true,false))//ok
[/code]


And that's all folks! Easy peasy lemon squeezy :-)

Peace out.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>479</wp:post_id>
  <wp:post_date>2015-06-22 11:00:26</wp:post_date>
  <wp:post_date_gmt>2015-06-22 09:00:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>bounds-a-view-over-your-context-2</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="post_tag" nicename="bound"><![CDATA[bound]]></category>
  <category domain="post_tag" nicename="context"><![CDATA[context]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="parameter"><![CDATA[parameter]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="type"><![CDATA[type]]></category>
  <category domain="post_tag" nicename="view"><![CDATA[view]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/612921718202499073";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11916158990]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Seven deadly sins of lambda expressions</title>
  <link>https://scalerablog.wordpress.com/2015/06/15/seven-deadly-sins-of-lambda-expressions/</link>
  <pubDate>Mon, 15 Jun 2015 10:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=483</guid>
  <description/>
  <content:encoded><![CDATA[A few weeks ago, we talked about lambda expressions. We learnt how to use them and some of the advantages they offer.

But, as the old saying goes, all that glitters is not gold. Last April, Jamie Allen came to our <a title="Meetup Scala Madrid" href="http://www.meetup.com/Scala-Programming-Madrid/" target="_blank">Scala meetup in Madrid</a> and spoke about the dark sideof lambda expressions: <a title="What you need to know about lambdas" href="http://t.co/iSyabvfeYO" target="_blank">"What you need to know about lambdas"</a>. In this post we’ll give you an overview of that talk and support the fact that lambda expressions are not to be taken lightly.

<strong>First problem: Not reusable.</strong>

As a name is not being given to the function, we won’t be able to use it anywhere else in the code.

<strong>Second problem: Cannot be tested in isolation.</strong>

Provided that it is an ad-hoc function, implemented and embedded at some specific point, it cannot be tested in a separate way.

<strong>Third problem: Maintainance.</strong>

In general, it is not good practice to use excessive complicated and nested lambda expressions. With them, our code becomes somewhat obscured and thus, difficult to follow and maintain.

[code language="scala"]
List(1, 2, 0, 3, 4).flatMap(
  x =&gt; (1 to x).filter(
    _ % 2 == 0
  ).map( _ * 2 )
)

//List(4, 4, 4, 8)

[/code]

<strong>Fourth problem: error messages.</strong>

This problem varies depending on the programming language used. In some cases, error messages will be manageable and in many others, you may feel the desire to slice your wrists off. In our case, in Scala, when there’s an error in an anonymous function we’ll get an error like this:

[code language="scala"]
List(1, 2, 0, 3, 4).map(1 / _)

java.lang.ArithmeticException: / by zero
at $anonfun$1.apply$mcII$sp(&lt;console&gt;:8)
at $anonfun$1.apply(&lt;console&gt;:8)
at $anonfun$1.apply(&lt;console&gt;:8)
at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
at scala.collection.immutable.List.foreach(List.scala:318)
...
[/code]

Given that no name was given to the function, the system will throw the error in a $$anonfun. A bit of a WTF, isn’t it?

<strong>Fifth problem: Hard time debugging.</strong>

Actually, this is not a particular problem of lambda expressions but of the way the code is expressed when using them. If several lambda expressions are written in the same line and there’s an error in any of them, we won’t be able to know which one is causing trouble. That’s why it is highly convenient to separate them in several lines.

The expression

[code language="scala"]
List(1, 2, 0, 3, 4).map(_ + 1).filter(_ % 2 == 0).map(_ * 2)
[/code]

would be better written this way:

[code language="scala"]
List(1, 2, 0, 3, 4).map(_ + 1)
  .filter(_ % 2 == 0)
  .map(_ * 2)
[/code]

<strong>Sixth problem: they can encapsulate variables with state</strong>

Lambda expressions can access the whole state of their scope. Therefore, they might have access to some mutable value and lead to different results in different execution contexts. Something that we definitely don’t want in functional programming.

<strong>Seventh problem … </strong>

Their problems can be enclosed into just six statements and lead to inconsistent post titles…

<a href="https://scalerablog.files.wordpress.com/2015/05/desk_flip.jpg"><img class="  wp-image-419 aligncenter" src="https://scalerablog.files.wordpress.com/2015/05/desk_flip.jpg?w=300" alt="desk_flip" width="189" height="171" /></a>

<strong>Conclusion</strong>

As we have seen, the use of lambda expressions may give rise to a few headaches. That’s why it is recommended to only use those ones which are less complex. In case we want to do something more sophisticated or intricate, the best thing to do is to define a method in order to test and debug it without any trouble. Besides, special precautions shall be taken not to use scope variables that may change its value. We should not deviate from our functional perspective.

I heartily recommend you to take a look at the <a title="What you need to know about lambdas" href="http://autentia.com/2015/04/23/entrevistamos-a-jamie-allen-en-su-paso-por-espana/" target="_blank">talk</a> . Many more details were treated in it (this post is just a brief overview) and it might help us to work with lambda expressions in a better way.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>483</wp:post_id>
  <wp:post_date>2015-06-15 12:00:00</wp:post_date>
  <wp:post_date_gmt>2015-06-15 10:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>seven-deadly-sins-of-lambda-expressions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="anonymous"><![CDATA[anonymous]]></category>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="lambda"><![CDATA[lambda]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11687244782]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/610389535407472640";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Capturando excepciones en Scala: el tipo Try</title>
  <link>https://scalerablog.wordpress.com/2015/06/24/capturando-excepciones-en-scala-el-tipo-try/</link>
  <pubDate>Wed, 24 Jun 2015 15:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=488</guid>
  <description/>
  <content:encoded><![CDATA[Es bastante típico llamar a algunas funciones que pueden lanzar excepciones. Por ejemplo, cuando hacemos una llamada a un servicio web, puede que exista un error de conexión que lance una excepción.

En un primer momento, lo que se nos ocurre es utilizar un <strong>bloque try-catch</strong> para poder capturar el error en caso de que la función explote:

[code language="scala"]
try {
  val userInfo = myWebServer.getUserInfo(&quot;Royston&quot;)
  userInfo.email
} catch {
  case e: ConnectionException =&gt; // do something
  case e: BadRequestException =&gt; // do something
  case _ =&gt; //do something
}
[/code]

Esto está muy bien porque, si salta alguna excepción, podremos capturarla y hacer algo con ella. Sin embargo, utilizar el bloque try no es un enfoque muy funcional. No nos proporciona muchas opciones de transformación y tampoco nos permite dejar que la acción a realizar en caso de que salte alguna excepción se pueda decidir en un momento posterior.

<strong>Tipo <em>Try</em> al rescate</strong>

El tipo <em><strong>Try</strong></em> es un tipo que dada una acción a realizar puede devolver bien un <em><strong>Success</strong></em> con el resultado de dicha acción, o bien una excepción producida al intentar ejecutarla encapsulada en un <strong><em>Failure</em></strong>.

[code language="scala"]
import scala.util.{ Try, Success, Failure }

Try(myWebServer.getUserInfo(&quot;Royston&quot;)) match {
  case Success(userInfo) =&gt; 
    userInfo.email
  case Failure(exception: ConnectionException) =&gt; 
    //do something
  case Failure(exception: BadRequestException) =&gt; 
    //do something
  case Failure(exception) =&gt; 
    //do something
}
[/code]

Como se puede observar, utilizando el <strong>pattern matching</strong>, podemos definir que hacer en función del resultado de evaluar la acción. Ahora, por ejemplo, podemos utilizar este tipo en la signatura de una función:

[code language="scala"]
def getUserInfo(username: String): Try[String] =
  Try(myWebServer.getUserInfo(&quot;Royston&quot;))
[/code]

De esta forma podemos dejar que otra parte del código decida que hacer con el resultado de la función.

Otra ventaja frente a usar un bloque de código try-catch, es que podemos utilizar los métodos que nos ofrece la api del tipo <em>Try</em>. Estos métodos nos permitiran evaular o modificar el valor contenido en el <em>Try</em>. Por ejemplo, podemos usar el método <em>map</em>:

[code language="scala"]
def encrypt(value: String): String =
  value.map(_.toInt).mkString(&quot;-&quot;)

getUserInfo(&quot;Royston&quot;).map(_.email).map(_.encrypt)
[/code]

En el anterior código lo que estamos haciendo es codificar el email en caso de que se obtenga satisfactoriamente. En caso de que se produzca alguna excepción, no se realizará ninguna transformación. El comportamiento es idéntico al que vimos cuando se aplicaba al <a href="https://scalerablog.wordpress.com/2015/03/16/usar-nulls-no-es-una-option/">tipo Option</a>.

Además, debido a que contiene un método <em>flatmap</em> podemos utilizarlo en<strong> for comprehension</strong> y combinar varias instancias del tipo <em>Try</em>.

[code language="scala"]
def getEmail(username: String): Try[String] =
  getUserInfo(username).map(_.email)

def getAge(username: String): Try[Int] =
  getUserInfo(username).map(_.age)

for {
  email &lt;- getEmail(&quot;Royston&quot;)
  age &lt;- getAge(&quot;Royston&quot;)
  if age &gt; 18
} yield s&quot;User with $email is not under 18&quot;
[/code]

En este caso, si alguna de las llamadas falla, o el usuario es menor de edad, el flujo de ejecución parará, y no se realizará ninguna transformación En caso contrario, el <em>Try</em> se transformará.

<strong>Mónadas, mónadas everywhere</strong>

No estaría bien acabar este post sin que nos explote un poco la cabeza. Hemos podido ver que usando el tipo <em>Try</em> podemos conseguir que nuestro programa sea más funcional. Gracias a que <del>es una mónada</del> cumple algunas de las leyes monádicas (ein?) podemos combinarlos entre ellos para que nuestros programas sean más expresivos.

<a href="https://scalerablog.files.wordpress.com/2015/06/56248419.jpg"><img class="  wp-image-490 aligncenter" src="https://scalerablog.files.wordpress.com/2015/06/56248419.jpg?w=300" alt="56248419" width="199" height="199" /></a>

Pero bueno, no hay que asustarse demasiado. Más adelante ahondaremos  en las mónadas y otras abstracciones funcionales y veremos que no es tan complicado.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>488</wp:post_id>
  <wp:post_date>2015-06-24 17:00:00</wp:post_date>
  <wp:post_date_gmt>2015-06-24 15:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>capturando-excepciones-en-scala-el-tipo-try</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="monad"><![CDATA[monad]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="try"><![CDATA[try]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11992722600]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/613726280756756480";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>20</wp:comment_id>
    <wp:comment_author><![CDATA[chiskus]]></wp:comment_author>
    <wp:comment_author_email>chiskus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>80.29.65.94</wp:comment_author_IP>
    <wp:comment_date>2015-08-06 13:22:32</wp:comment_date>
    <wp:comment_date_gmt>2015-08-06 11:22:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Muy buen post, gracias por vuestro trabajo. Sólo añadir un ligero apunte: teniendo en cuenta las leyes monádicas, Try no cumple la segunda ley de igualdad a izquierdas, unit(x).flatMap(f) == f(x), para todo x ya que la función f(x) podría lanzar una excepción no capturada en la parte derecha de la igualdad y en la izquierda dar como resultado un Faliure(e).

Aún así se puede usar como cualquier mónada en los for comprehension de Scala y se puede componer con otros constructores.

Corregidme si me equivoco ;-) y gracias por vuestro trabajo divulgando Scala y la programación funcional en español.

Saludos.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>79042155</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1438860152.9648189544677734375;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"chiskus";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1438867107</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1438867108</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1438864111.7799289226531982421875;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"chiskus";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1438867108.5713880062103271484375;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-08-06 11:22:32</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>21</wp:comment_id>
    <wp:comment_author><![CDATA[dvallejonava]]></wp:comment_author>
    <wp:comment_author_email>d.vallejo.nava@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>163.117.202.71</wp:comment_author_IP>
    <wp:comment_date>2015-08-06 15:18:29</wp:comment_date>
    <wp:comment_date_gmt>2015-08-06 13:18:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Muchas gracias por tu comentario. Está genial recibir feedback para poder mejorar :)

Tienes toda la razón. Quizás sea más correcto decir que cumple algunas de las leyes monádicas.
Si a alguien le interesa, he encontrado este enlace donde se trata este tema con algo más de detalle: https://gist.github.com/ms-tg/6222775

Muchas gracias de nuevo!
Saludos!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>20</wp:comment_parent>
    <wp:comment_user_id>81583895</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1438867110</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1438867110.4592740535736083984375;s:5:"event";s:9:"check-ham";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1438867110</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-08-06 13:18:29</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>52</wp:comment_id>
    <wp:comment_author><![CDATA[Reading the future in Scala | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/12/14/reading-the-future/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.99.225</wp:comment_author_IP>
    <wp:comment_date>2015-12-14 12:00:58</wp:comment_date>
    <wp:comment_date_gmt>2015-12-14 10:00:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] will be used to try to get the value of the future. We already talked about this type in another post, but let&#8217;s see how this would be applied to [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1450087259.717998981475830078125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1450088006.186893939971923828125;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1450088006</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-12-14 10:00:58</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>50</wp:comment_id>
    <wp:comment_author><![CDATA[Leyendo el futuro en Scala | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/12/09/leyendo-el-futuro-en-scala/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.82.82</wp:comment_author_IP>
    <wp:comment_date>2015-12-09 17:11:54</wp:comment_date>
    <wp:comment_date_gmt>2015-12-09 15:11:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] se utilizará un Try para intentar obtener el valor del futuro. Ya comentamos este tipo en otro post, pero vamos a ver como aplicaría a los [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1449673914.301496982574462890625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1449761117</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1449678172.294086933135986328125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1449761117.5155429840087890625;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-12-09 15:11:54</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>105</wp:comment_id>
    <wp:comment_author><![CDATA[Scalera tip: ¿Por qué &#8216;scala.util.Try&#8217; no tiene &#8216;finally&#8217;? | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2016/05/11/scalera-tip-por-que-scala-util-try-no-tiene-finally/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.82.82</wp:comment_author_IP>
    <wp:comment_date>2016-05-11 12:02:11</wp:comment_date>
    <wp:comment_date_gmt>2016-05-11 10:02:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] recordáis el post en el que David habló sobre el tipo Try[T], es un tipo que puede tener dos posibles estados: Success(t: T) o Failure(t: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1462960932.01659488677978515625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1462961001</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1462961001.967175960540771484375;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1462961951.31499004364013671875;s:5:"event";s:17:"status-unapproved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1462961958.2985820770263671875;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-05-11 10:02:11</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Testing en Scala (I)</title>
  <link>https://scalerablog.wordpress.com/2015/07/01/testing-en-scala/</link>
  <pubDate>Wed, 01 Jul 2015 15:00:44 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=497</guid>
  <description/>
  <content:encoded><![CDATA[Uno de los elementos de los que no hemos hablado hasta ahora, y que sin embargo resulta de los más importantes en el día a día, son los frameworks de testing en Scala.

Aunque la integración con la JVM permite el uso de frameworks de testing basados en Java, como puede ser <a href="http://junit.org/" target="_blank">JUnit</a>, nosotros destacamos dos, basados en Scala: Scalatest y Scalacheck.

Veréis que no hay que ser ningún experto para poder hacer uso de ellos:

<img class="aligncenter" src="http://tclhost.com/4f3508f3e3.gif" alt="" width="219" height="210" />

En este post nos centraremos en el primero de ellos.
<h2>ScalaTest</h2>
Versátil framework de testing que permite testear tanto código en Java como en Scala. Notable además por su integración con herramientas como JUnit, TestNG, Ant, Maven, sbt, ScalaCheck, JMock, EasyMock, Mockito, ScalaMock, Selenium (automatización de pruebas con el browser), ...

Te recomendamos los siguientes pasos para empezar a usar ScalaTest:
<h3>0. Crea tu deslumbrante clase de dominio.</h3>

[code language="scala"]
case class Foo(n: Int){
  def +(m: Int): Foo = Foo(n+m)
  def -(m: Int): Foo = Foo(n-m)
}
[/code]

<h3>1. Añade la dependencia de Scalatest a tu proyecto SBT.</h3>

[code language="scala"]
libraryDependencies += &quot;org.scalatest&quot; %% &quot;scalatest&quot; % &quot;2.2.4&quot; % &quot;test&quot;
[/code]

...o el equivalente en Maven:

[code language="scala"]
&lt;dependency&gt;
  &lt;groupId&gt;org.scalatest&lt;/groupId&gt;
  &lt;artifactId&gt;scalatest_2.11&lt;/artifactId&gt;
  &lt;version&gt;2.2.4&lt;/version&gt;
  &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
[/code]

<h3>2. Elige tu estilo de testing favorito...y crea una base class para testing.</h3>
Scalatest ofrece distintos <a href="http://www.scalatest.org/user_guide/selecting_a_style" target="_blank">estilos de testing</a>: tests basados en propiedades (PropSpec), basado en lenguaje más descriptivo, y por tanto más restrictivo (WordSpec), sencillas (FunSpec), ...
Para este ejemplo seleccionaremos un estilo de testing bastante legible como puede ser FlatSpec.
Es recomendable definir una <b>base class</b> que aglutine todos los traits que vamos a usar para nuestros tests, de manera que podamos reutilizar dicha base class sin tener que repetir código:

[code language="scala"]
abstract class MyTestClass(
  entityToTest: String) extends FlatSpec
  with Matchers {

  behavior of entityToTest

}
[/code]

La línea

[code language="scala"]behavior of entityToTest[/code]

establece el nombre del comportamiento que estamos definiendo en nuestra clase de test. Sobretodo, se debe a una cuestión de pretty-printing.

Si además extendemos del trait <b>Matchers</b>, podremos expresar aserciones a cumplir como:

[code language="scala"]
val n = 2
n should equal(1+1)
n should be(3-1)
n must be(0+2)
//...
[/code]

<h3>3. Define el test para tu clase de dominio.</h3>
Iremos definiendo los casos de prueba como sigue:

[code language="scala"]
class FooTest extends MyTestClass(&quot;A Foo&quot;) {

  it should &quot;add some value to its attribute N&quot; in {
    val myFoo = Foo(0)
    (myFoo + 2) should equal(Foo(2))
    val anotherFoo = Foo(5)
    (anotherFoo + 3) should equal(Foo(8))
  }

  it should &quot;substract some value to N&quot; in {
    val myFoo = Foo(3)
    (myFoo - 2) should equal(Foo(1))
    (Foo(0) - 5) should equal(Foo(-5))
  }

}
[/code]

Fijaros que las definiciones de los casos de prueba son suficientemente descriptivas y aportan una gran facilidad para comprender el comportamiento de <b>Foo</b> solo con leerlas.
<h3>4. Lanza el test</h3>
Desde SBT:

[code language="scala"]
test
[/code]

El output deberá mostrar algo similar a:

[code]
Discovery starting.
Discovery completed in 34 milliseconds.
Run starting. Expected test count is: 2
FooTest:
A Foo
- should add some value to its attribute N
- should substract some value to N
Run completed in 61 milliseconds.
Total number of tests run: 2
Suites: completed 1, aborted 0
Tests: succeeded 2, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
[/code]

<h3>5. Farda ante tus amigos</h3>
<a href="https://scalerablog.files.wordpress.com/2015/07/b784c8abf46a00e87ee8365535645ba0.gif"><img class="aligncenter size-medium wp-image-514" src="https://scalerablog.files.wordpress.com/2015/07/b784c8abf46a00e87ee8365535645ba0.gif?w=300" alt="b784c8abf46a00e87ee8365535645ba0" width="300" height="225" /></a>

[code language="scala"]
thisPost.isAwesome should be(true)
[/code]
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>497</wp:post_id>
  <wp:post_date>2015-07-01 17:00:44</wp:post_date>
  <wp:post_date_gmt>2015-07-01 15:00:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>testing-en-scala</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="flatspec"><![CDATA[flatspec]]></category>
  <category domain="post_tag" nicename="matchers"><![CDATA[matchers]]></category>
  <category domain="post_tag" nicename="must"><![CDATA[must]]></category>
  <category domain="post_tag" nicename="props"><![CDATA[props]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="scalatest"><![CDATA[scalatest]]></category>
  <category domain="post_tag" nicename="should"><![CDATA[should]]></category>
  <category domain="post_tag" nicename="spec"><![CDATA[spec]]></category>
  <category domain="post_tag" nicename="test"><![CDATA[test]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12218403879]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/616260760658841600";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>11</wp:comment_id>
    <wp:comment_author><![CDATA[Sebastián Ortega]]></wp:comment_author>
    <wp:comment_author_email>mehequedadoenblanco@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.coinffeine.com</wp:comment_author_url>
    <wp:comment_author_IP>81.37.172.116</wp:comment_author_IP>
    <wp:comment_date>2015-07-01 21:43:10</wp:comment_date>
    <wp:comment_date_gmt>2015-07-01 19:43:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sugerencia:

thisPost shouldBe 'awesome

Scalatest te permite hacer esto si la función awesome o isAwesome existe.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>3180069</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1435779790.579430103302001953125;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"maizz";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1435779790</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>12226307838</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1435779880</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1435779880</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1435779880.426126956939697265625;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-07-01 19:43:10</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Catching exceptions in Scala: Try type</title>
  <link>https://scalerablog.wordpress.com/2015/06/29/catching-exceptions-in-scala-try-type/</link>
  <pubDate>Mon, 29 Jun 2015 10:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=499</guid>
  <description/>
  <content:encoded><![CDATA[It’s quite common to call functions that may throw exceptions. For instance, when a call is made to a web service, there could be a connection error which would throw an exception.

At first sight, we can think of using a<strong> try-catch block</strong> to handle the error in case the function explodes:

[code language="scala"]
try {
  val userInfo = myWebServer.getUserInfo(&quot;Royston&quot;)
  userInfo.email
} catch {
  case e: ConnectionException =&amp;gt; // do something
  case e: BadRequestException =&amp;gt; // do something
  case _ =&amp;gt; //do something
}
[/code]

This is quite good because, if any exception is thrown, we will be able to catch and handle it. However, using the try block is not truly a functional approach. It leaves us with very few transformation options and nor are we allowed to decide at a later point in time on the action to perform in case an exception is raised.

<strong>Try type to the rescue</strong>

<em><strong>Try</strong></em> is a type that, given an action to perform, it can return either a <em><strong>Success</strong></em> with the result of that action or the exception thrown when trying to execute that action, but encapsulated in a <em><strong>Failure</strong></em>.

[code language="scala"]
import scala.util.{ Try, Success, Failure }

Try(myWebServer.getUserInfo(&quot;Royston&quot;)) match {
  case Success(userInfo) =&amp;gt; 
    userInfo.email
  case Failure(exception: ConnectionException) =&amp;gt; 
    //do something
  case Failure(exception: BadRequestException) =&amp;gt; 
    //do something
  case Failure(exception) =&amp;gt; 
    //do something
}
[/code]

As can be seen, by using <strong>pattern matching</strong>, we are able to define what to do depending on the result of executing the action. Now, as an example, we can use this type in the signature of a function:

[code language="scala"]
def getUserInfo(username: String): Try[String] =
  Try(myWebServer.getUserInfo(&quot;Royston&quot;))
[/code]

This way we can leave the decision on what to do with the result of the function to a different part of the code.

Another advantage compared to using a try-catch block is that we can use the methods that the <em>Try</em> type API provides us with. These methods will allow us to evaluate or modify the value contained in a <em>Try</em>. For instance, we could use the map method:

[code language="scala"]
def encrypt(value: String): String =
  value.map(_.toInt).mkString(&quot;-&quot;)

getUserInfo(&quot;Royston&quot;).map(_.email).map(_.encrypt)
[/code]

In the previous piece of code, what we are doing is encrypting the email in case it is successfully obtained. In case an exception is thrown, no transformation will be carried out. The behaviour is identical to the one we already saw applied to <a href="https://scalerablog.wordpress.com/2015/05/29/using-nulls-is-not-an-option/">Option type</a>.

Besides, as it has a flatmap method, we can use it in <strong>for comprehension</strong> structures and combine several instances of the <em>Try</em> type.

[code language="scala"]
def getEmail(username: String): Try[String] =
  getUserInfo(username).map(_.email)

def getAge(username: String): Try[Int] =
  getUserInfo(username).map(_.age)

for {
  email &amp;lt;- getEmail(&quot;Royston&quot;)
  age &amp;lt;- getAge(&quot;Royston&quot;)
  if age &amp;gt; 18
} yield s&quot;User with $email is not under 18&quot;
[/code]

In this scenario, if any of the calls fails or if the user is underage, the execution flow will stop and no transformation will be performed. Otherwise, <em>Try</em> will be transformed.

<strong>Monads, monads everywhere</strong>

It would be quite wrong to conclude this post without our head being properly stimulated. We have seen that, by using the <em>Try</em> type, we can make our program more functional. As it <del>is a monad</del> complies some of the monad laws (what?), we can combine them in order to make our programs more expressive.

<a href="https://scalerablog.files.wordpress.com/2015/06/56248419.jpg"><img class="  wp-image-490 aligncenter" src="https://scalerablog.files.wordpress.com/2015/06/56248419.jpg?w=300" alt="56248419" width="199" height="199" /></a>

Well, there’s no need to panic. Further on, we’ll go deeper into monads and other functional abstractions and we’ll see they are not as complicated as they may seem.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>499</wp:post_id>
  <wp:post_date>2015-06-29 12:00:00</wp:post_date>
  <wp:post_date_gmt>2015-06-29 10:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>catching-exceptions-in-scala-try-type</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="monad"><![CDATA[monad]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="try"><![CDATA[try]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/615459888349622274";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12144315166]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>108</wp:comment_id>
    <wp:comment_author><![CDATA[Scalera tip: Why &#8216;scala.util.Try&#8217; doesn&#8217;t have &#8216;finally&#8217; clause? | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2016/05/16/scalera-tip-why-scala-util-try-doesnt-have-finally-clause/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.83.70</wp:comment_author_IP>
    <wp:comment_date>2016-05-16 12:02:32</wp:comment_date>
    <wp:comment_date_gmt>2016-05-16 10:02:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] you remember the post where David talked about Try[T] data type, it&#8217;s a type that may have two different possible values Success(t: T) or Failure(t: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1463392952.7570440769195556640625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1463393031</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1463393031.287703990936279296875;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-05-16 10:02:32</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Testing in Scala (I)</title>
  <link>https://scalerablog.wordpress.com/2015/07/06/testing-in-scala-i/</link>
  <pubDate>Mon, 06 Jul 2015 10:00:18 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=519</guid>
  <description/>
  <content:encoded><![CDATA[One of the elements that we haven't spoken about before, and however, it turns to be one of the essentials, is testing in Scala and its frameworks.

Although JVM integration allows the use of testing frameworks based on Java, like <a href="http://junit.org/" target="_blank">JUnit</a>, we will highlight two based on Scala: Scalatest y Scalacheck.

As you will see, there's no need to be an expert to use them:

<img class="aligncenter" src="http://tclhost.com/4f3508f3e3.gif" alt="" width="219" height="210" />

In this post, we will focus on the first of them.

<h2>ScalaTest</h2>

It's a versatile testing framework that allows testing both Java and Scala code. It's also remarkable its integration with powerful tools such as JUnit, TestNG, Ant, Maven, sbt, ScalaCheck, JMock, EasyMock, Mockito, ScalaMock, Selenium (browser testing automation), ...

We suggest you to follow the next step to start using ScalaTest:

<h3>0. Create your flashing domain class.</h3>

[code language="scala"]
case class Foo(n: Int){
  def +(m: Int): Foo = Foo(n+m)
  def -(m: Int): Foo = Foo(n-m)
}
[/code]

<h3>1. Add Scalatest dependency to your SBT project.</h3>

[code language="scala"]
libraryDependencies += &quot;org.scalatest&quot; %% &quot;scalatest&quot; % &quot;2.2.4&quot; % &quot;test&quot;
[/code]

...or the equivalent in Maven:

[code language="scala"]
&lt;dependency&gt;
  &lt;groupId&gt;org.scalatest&lt;/groupId&gt;
  &lt;artifactId&gt;scalatest_2.11&lt;/artifactId&gt;
  &lt;version&gt;2.2.4&lt;/version&gt;
  &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
[/code]

<h3>2. Choose your favourite testing stile...and create a base class for testing.</h3>

Scalatest offers several <a href="http://www.scalatest.org/user_guide/selecting_a_style" target="_blank">testing styles</a>: property-based tests (PropSpec), descripted-language-based testing (WordSpec), simple styles (FunSpec), ...
For this example, we will choose a pretty legible testing style like FlatSpec.
It's quite recommendable to define a <b>base class</b> that gather all traits that we will use for our test classes, just in order to reuse that base class without too much boilerplate.

[code language="scala"]
abstract class MyTestClass(
  entityToTest: String) extends FlatSpec
  with Matchers {

  behavior of entityToTest

}
[/code]

The line

[code language="scala"]behavior of entityToTest[/code]

sets the name of the behavior that we are defining in our test class. Most of all, it's due to pretty-printing.

Besides all this stuff, if we extend trait <b>Matchers</b>, we are able to express assertions to check like:

[code language="scala"]
val n = 2
n should equal(1+1)
n should be(3-1)
n must be(0+2)
//...
[/code]

<h3>3. Define the suitable test for your domain class.</h3>
We will check the test cases like this:

[code language="scala"]
class FooTest extends MyTestClass(&quot;A Foo&quot;) {

  it should &quot;add some value to its attribute N&quot; in {
    val myFoo = Foo(0)
    (myFoo + 2) should equal(Foo(2))
    val anotherFoo = Foo(5)
    (anotherFoo + 3) should equal(Foo(8))
  }

  it should &quot;substract some value to N&quot; in {
    val myFoo = Foo(3)
    (myFoo - 2) should equal(Foo(1))
    (Foo(0) - 5) should equal(Foo(-5))
  }

}
[/code]

Notice that test cases' definitions are descriptive enough and provide such an ease to understand the behavior of <b>Foo</b> only by reading them.

<h3>4. Launch your test</h3>

From SBT:

[code language="scala"]
test
[/code]

Output should look like this:

[code]
Discovery starting.
Discovery completed in 34 milliseconds.
Run starting. Expected test count is: 2
FooTest:
A Foo
- should add some value to its attribute N
- should substract some value to N
Run completed in 61 milliseconds.
Total number of tests run: 2
Suites: completed 1, aborted 0
Tests: succeeded 2, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
[/code]

<h3>5. Rock and roll</h3>
<a href="https://scalerablog.files.wordpress.com/2015/07/b784c8abf46a00e87ee8365535645ba0.gif"><img class="aligncenter size-medium wp-image-514" src="https://scalerablog.files.wordpress.com/2015/07/b784c8abf46a00e87ee8365535645ba0.gif?w=300" alt="b784c8abf46a00e87ee8365535645ba0" width="300" height="225" /></a>

[code language="scala"]
thisPost.isAwesome should be(true)
[/code]
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>519</wp:post_id>
  <wp:post_date>2015-07-06 12:00:18</wp:post_date>
  <wp:post_date_gmt>2015-07-06 10:00:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>testing-in-scala-i</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="flatspec"><![CDATA[flatspec]]></category>
  <category domain="post_tag" nicename="matchers"><![CDATA[matchers]]></category>
  <category domain="post_tag" nicename="must"><![CDATA[must]]></category>
  <category domain="post_tag" nicename="props"><![CDATA[props]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="scalatest"><![CDATA[scalatest]]></category>
  <category domain="post_tag" nicename="should"><![CDATA[should]]></category>
  <category domain="post_tag" nicename="spec"><![CDATA[spec]]></category>
  <category domain="post_tag" nicename="test"><![CDATA[test]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/617998047482490880";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12424867893]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Tarta de Scala al estilo tradicional</title>
  <link>https://scalerablog.wordpress.com/2015/07/08/tarta-de-scala-al-estilo-tradicional/</link>
  <pubDate>Wed, 08 Jul 2015 15:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=523</guid>
  <description/>
  <content:encoded><![CDATA[Hoy toca hablar de cocina. Hoy vamos a hacer una bonita tarta. ¿Se me ha ido la olla con Master Chef?
No. Hoy toca hablar del <em><strong>cake-pattern</strong></em>.

<a href="https://scalerablog.files.wordpress.com/2015/07/t4ilmu.jpg"><img class=" size-medium wp-image-527 aligncenter" src="https://scalerablog.files.wordpress.com/2015/07/t4ilmu.jpg?w=300" alt="t4ilmu" width="300" height="198" /></a>

El <em>cake-pattern</em> es un patrón de diseño de inyección de dependencias. Nos permite establecer dependencias entre componentes. Es común necesitar un servicio o un repositorio para poder implementar otros. En estos casos, el <em>cake pattern</em> nos ayudará a establecer esta relación.

La base de este patrón de diseño es formar nuestro sistema a partir de varios componentes más pequeños. Es decir, vamos a formar nuestra tarta a partir de pequeñas porciones. Además, estableceremos relaciones entre dichas porciones.

Para ello, primero crearemos unos componentes abstractos mediante <em>traits</em>, de los que heredarán los componentes reales. De esta forma, nos aseguramos que todos los componentes que implementemos tengan la misma funcionalidad.

[code language="scala"]
trait MyComponent {
  
  def service: MyService

  trait MyService {
    def saySomething: String
  }
}
[/code]

En este caso tenemos un componente que engloba un servicio que contiene el método <em>saySomething</em>.

Ahora vamos a implementar el servicio. Para ello necesitamos llamar a un repositorio. Por lo tanto, debemos inyectar la dependencia con dicho repositorio. Pero como aún no sabemos que tipo de repositorio será (una base de datos implementada en <em>mysql</em>, una estructura en memoria, ...), vamos a tener una dependencia con un repositorio abstracto. Más tarde, cuando creemos nuestro sistema (aka, nuestra tarta), decidiremos con qué tipo de repositorio vamos a trabajar.

[code language="scala"]
trait MyRepository {

  def repo: MyRepoService {

    def getRandomExpression: String
  }
}
[/code]

Para poder crear dependencias vamos a usar los <strong><em>self types</em></strong>. Los <em>self types</em> los usaremos en este caso para inyectar una dependencia con otro componente. Sin embargo, también pueden ser utilizados para hacer referencia a <em>inners</em> u <em>outter</em> <em>classes</em>. Don't worry. Ya veremos estos conceptos más adelante. Por el momento, vamos a usar estos <em>self types</em> para crear restricciones en el <em>mixin</em> con el componente ya que si queremos tener un componente que herede de este <em>trait</em>, tendrá que heredar también de los <em>traits</em> que aparecen en su <em>self type</em>. Vamos a ver como queda:

[code language="scala"]
trait MyComponentImpl extends MyComponent{
  self: MyRepository =&gt;
  
  def service = new MyServiceImpl

  trait MyServiceImpl extends MyService {

    def saySomething: String = repo.getRandomExpression()
  
  }
}
[/code]

Para finalizar, podemos crear nuestro sistema utilizando la versión implementada de nuestro componente, y la versión implementada de un repositorio. Una vez creado el sistema (la tarta), ya podemos hacer uso de su funcionalidad:

[code language="scala"]
val system = new MyComponentImpl with MyRepositoryImpl

println(system.service.saySomething)
[/code]

Et voila! Bon appetit!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>523</wp:post_id>
  <wp:post_date>2015-07-08 17:00:00</wp:post_date>
  <wp:post_date_gmt>2015-07-08 15:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tarta-de-scala-al-estilo-tradicional</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="design-pattern"><![CDATA[design-pattern]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="trait"><![CDATA[trait]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12527248477]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/618797105419653120";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>33</wp:comment_id>
    <wp:comment_author><![CDATA[Teoría de Cate-movidas: Mónada Reader | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/10/21/teoria-de-cate-movidas-monada-reader/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.32</wp:comment_author_IP>
    <wp:comment_date>2015-10-21 17:26:04</wp:comment_date>
    <wp:comment_date_gmt>2015-10-21 15:26:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] inyección de independencias en nuestra aplicación. Hace unas semanas vimos como utilizar el Cake Pattern. Si no te gustó demasiado, presta atención [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1445441164.0892009735107421875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1445441267</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1445441267.7848589420318603515625;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-10-21 15:26:04</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Traditionally baked Scala cake</title>
  <link>https://scalerablog.wordpress.com/2015/07/13/traditionally-baked-scala-cake/</link>
  <pubDate>Mon, 13 Jul 2015 10:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=536</guid>
  <description/>
  <content:encoded><![CDATA[Today, we’ll talk about cooking. We’ll bake a pretty cake. Have Igone too far with Masterchef? Nope. Today, we’ll talk about <strong>cake-pattern</strong>.

<a href="https://scalerablog.files.wordpress.com/2015/07/t4ilmu.jpg"><img class=" size-medium wp-image-527 aligncenter" src="https://scalerablog.files.wordpress.com/2015/07/t4ilmu.jpg?w=300" alt="t4ilmu" width="300" height="198" /></a>

Cake-pattern is a depencency injection design pattern. It allows us to establish dependencies among components. It is common that services or repositories that must be implemented require others. In these cases, <em>cake pattern</em> will help to establish this connection.

The basis of this design pattern is to compose our system from smaller components. That is, we are composing our cake from small slices. Besides, we are establishing connections among those slices.

For that, we’ll first create some abstract components with <em>traits</em>, from which real components will inherit. This way, we can be sure that all the components we implement have the same functionality.

[code language="scala"]
trait MyComponent {
  
  def service: MyService

  trait MyService {
    def saySomething: String
  }
}
[/code]

In this example, we have a component with a service that contains the method <em>saySomething</em>.

Now, we’ll implement the service. To do so, we have to call a repository. Therefore, we must inject the dependency to that repository. But, as we do not know yet which type of repository it will be (a database implemented in <em>mysql</em>, an in-memory data structure…), we’ll have a dependency to an abstract repository. Further on, when we create our system (aka, our cake), we’ll decide on the type of repository we will work in.

[code language="scala"]
trait MyRepository {

  def repo: MyRepoService {

    def getRandomExpression: String
  }
}
[/code]

In order to create dependencies, we will use <em><strong>self types</strong></em>. Self types will be used in this case to inject a dependency to another component. However, they can also be used to make reference to <em>inner</em> or <em>outer classes</em>. Don’t worry. We’ll take a look at those concepts later. For the time being, we’ll use these <em>self types</em> to put restrictions to the mixin with a component given that, for a component to inherit from this trait, it will also have to inherit from the traits in its <em>self type</em>. Let’s see how it looks:

[code language="scala"]
trait MyComponentImpl extends MyComponent{
  self: MyRepository =&gt;
  
  def service = new MyServiceImpl

  trait MyServiceImpl extends MyService {

    def saySomething: String = repo.getRandomExpression()
  
  }
}
[/code]

Finally, we can create our system by using the implemented version of our component, and the implemented version of a repository. Once the system (the cake) has been created, we can make use of its functionality:

[code language="scala"]
val system = new MyComponentImpl with MyRepositoryImpl

println(system.service.saySomething)
[/code]

Et voila! Bon appetit!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>536</wp:post_id>
  <wp:post_date>2015-07-13 12:00:00</wp:post_date>
  <wp:post_date_gmt>2015-07-13 10:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>traditionally-baked-scala-cake</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="post_tag" nicename="design-pattern"><![CDATA[design-pattern]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="trait"><![CDATA[trait]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/620534790626738176";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12680882527]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>35</wp:comment_id>
    <wp:comment_author><![CDATA[Abstract alge&#8230; what? The Reader monad | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/10/26/abstract-alge-what-the-reader-monad/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.100.193</wp:comment_author_IP>
    <wp:comment_date>2015-10-26 12:18:57</wp:comment_date>
    <wp:comment_date_gmt>2015-10-26 10:18:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] allow us to perform the dependency injection in our application.A few weeks ago we saw how to use Cake Pattern. If you didn&#8217;t like that that much, pay attention [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1445854738.1570289134979248046875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1445854812</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1445854812.2378559112548828125;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-10-26 10:18:57</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Testing en Scala (II) : Scalacheck</title>
  <link>https://scalerablog.wordpress.com/2015/07/15/testing-en-scala-ii-scalacheck/</link>
  <pubDate>Wed, 15 Jul 2015 15:00:17 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=540</guid>
  <description/>
  <content:encoded><![CDATA[Esta semana, en Scalera, os traemos la segunda parte del post que hablaba sobre frameworks de testing en Scala.
Si bien Scalatest aporta un enfoque bastante genérico que permite generar tests usando una gran variedad de specs y suites, Scalacheck permite implementar tests basados en propiedades.

Para poder utilizarlo en tu proyecto de SBT basta con añadir la correspondiente dependencia:

[code language="scala"]
libraryDependencies += &quot;org.scalacheck&quot; %% &quot;scalacheck&quot; % &quot;1.12.4&quot; % &quot;test&quot;
[/code]

<h2>Property-based tests</h2>
Los tests basados en propiedades, como su nombre indica, consisten en definir un conjunto de aserciones o propiedades que toda instancia de nuestro tipo de datos debe cumplir.
Si por ejemplo estamos testeando nuestro tipo de datos <code>Car</code>,

[code language="scala"]
case class Car(wheelAmount: Int,speed: Double){

  require(wheelAmount&gt;0,&quot;So, how? tell me how&quot;)

  require(speed&gt;=0,&quot;Seriously?Negative speed?&quot;)

  def accelerate(): Car = Car(wheelAmount,speed*2)

}
[/code]

definiríamos nuestra clase <code>CarSpec</code> con el siguiente contenido:

[code language="scala"]
import org.scalacheck.Properties
import org.scalacheck.Prop.forAll

object CarSpec extends Properties(&quot;Car&quot;) {

  property(&quot;has non negative speed&quot;) = forAll { (c: Car) =&gt;
    car.speed &gt;= 0
  }

  property(&quot;has at least one wheel&quot;) = forAll { (c: Car) =&gt;
    car.wheelAmount &gt; 0
  }

  property(&quot;doubles its speed&quot;) = forAll { (c: Car) =&gt;
    val newCar = c.accelerate()
    newCar.speed = 2*c.speed
  }

}
[/code]

Como se puede ver, es tan sencillo como definir el nombre de las propiedades que debe cumplir. Mediante la aserción '<strong>forAll</strong>', se verificará que, para todos los coches, se deben cumplir las restricciones dictadas.
<h2>Generators</h2>
Ahora bien, para testear estas propiedades, es necesario generar valores (unos cuantos valores) de tipo <code>Car</code>. De esta tarea se encargan los generadores de ScalaCheck. Estas estructuras conocen la forma de generar valores de un determinado tipo. Por ejemplo,

[code language="scala"]
import org.scalacheck.Gen

val myStringGen: Gen[String] = Gen.alphaString

val stringSample: Option[String] = myStringGen.sample

[/code]

Si utilizamos el generador predefinido <code>alphaString</code> seremos capaces de generar cadenas de texto aleatorias que contengan solo [a-z].
Con el método <code>sample</code> del generador, obtendremos un posible valor de tipo String.
<h2>Gen composition</h2>
Pero, ¿y si queremos crear generadores para tipos particulares, como es el caso de <code>Car</code>?
<code>Gen[T]</code> se puede componer para generar valores más complejos. Por ejemplo:

[code language="scala"]
val carGen: Gen[Car] = for {
  wheels &lt;- Gen.choose(4,8)
  speed  &lt;- Gen.oneOf(0.0,50.0,100.0,120.0)
} yield Car(wheels,speed)
[/code]

Utilizando el método <code>choose[T](min: T,max: T)</code> generamos valores entre 'min' y 'max'.
Con el método <code>oneOf[T](elems: T*)</code> elegimos un elemento de los facilitados en la secuencia de elementos.
Y así, utilizando el elemento obtenido del generador de enteros, y utilizando el elemento obtenido del generador de doubles, podemos construir un <code>Car</code>. Esto no significa que ya estén evaluados todos los posibles valores de los atributos del coche a generar, sino que indicamos, en caso de que nos demanden un coche de este generador, como poder obtenerlos.

<a href="https://scalerablog.files.wordpress.com/2015/07/o7azz.jpg"><img class="aligncenter size-medium wp-image-545" src="https://scalerablog.files.wordpress.com/2015/07/o7azz.jpg?w=268" alt="o7azz" width="268" height="300" /></a>
<h2>La punta del iceberg</h2>
Como podéis ver, ScalaCheck da bastante juego a la hora de crear tests basados en propiedades, pero el elemento <code>Gen[T]</code> para generar valores 'semi-aleatorios' de cierto tipo, puede usarse en más ámbitos, aparte del testing unitario.
En próximos posts veremos como usarlos para la generación de grandes bloques de datos en pruebas de stress para aplicaciones de BigData.

¡Agur de limón! :-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>540</wp:post_id>
  <wp:post_date>2015-07-15 17:00:17</wp:post_date>
  <wp:post_date_gmt>2015-07-15 15:00:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>testing-en-scala-ii-scalacheck</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="based"><![CDATA[based]]></category>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="post_tag" nicename="car"><![CDATA[car]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="framework"><![CDATA[framework]]></category>
  <category domain="post_tag" nicename="gen"><![CDATA[gen]]></category>
  <category domain="post_tag" nicename="generator"><![CDATA[generator]]></category>
  <category domain="post_tag" nicename="property"><![CDATA[property]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="scalacheck"><![CDATA[scalacheck]]></category>
  <category domain="post_tag" nicename="spec"><![CDATA[spec]]></category>
  <category domain="post_tag" nicename="test"><![CDATA[test]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12755325514]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/621334326853046272";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Testing in Scala (II) : Scalacheck</title>
  <link>https://scalerablog.wordpress.com/2015/07/20/testing-in-scala-ii-scalacheck/</link>
  <pubDate>Mon, 20 Jul 2015 10:00:59 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=553</guid>
  <description/>
  <content:encoded><![CDATA[This week, Scalera brings to you the second part of the post that talked about Scala testing frameworks. Even though Scalatest provides a pretty fresh generic focus about generating tests using a wide variety of specs and suites, ScalaCheck allows implementing propery-based tests.

If you want to use it in your SBT project, you just need to add the following dependency:

[code language="scala"]
libraryDependencies += &quot;org.scalacheck&quot; %% &quot;scalacheck&quot; % &quot;1.12.4&quot; % &quot;test&quot;
[/code]

<h2>Property-based tests</h2>
Property-based tests, as their name indicates, consist on defining a group of assertions or properties that every instance of our custom datatype must verify.
For instance, if we are testing our custom <code>Car</code> datatype,

[code language="scala"]
case class Car(wheelAmount: Int,speed: Double){

  require(wheelAmount&gt;0,&quot;So, how? tell me how&quot;)

  require(speed&gt;=0,&quot;Seriously?Negative speed?&quot;)

  def accelerate(): Car = Car(wheelAmount,speed*2)

}
[/code]

we could define our <code>CarSpec</code> class with the following content:

[code language="scala"]
import org.scalacheck.Properties
import org.scalacheck.Prop.forAll

object CarSpec extends Properties(&quot;Car&quot;) {

  property(&quot;has non negative speed&quot;) = forAll { (c: Car) =&gt;
    car.speed &gt;= 0
  }

  property(&quot;has at least one wheel&quot;) = forAll { (c: Car) =&gt;
    car.wheelAmount &gt; 0
  }

  property(&quot;doubles its speed&quot;) = forAll { (c: Car) =&gt;
    val newCar = c.accelerate()
    newCar.speed = 2*c.speed
  }

}
[/code]

As you can see, it's as easy as defining the name of the properties that must be checked. With '<strong>forAll</strong>' assertion, it will be verified that, for all car instances, defined constraints are checked.

<h2>Generators</h2>

So now, for testing these properties, it's necessary to generate values (a 'few' of them) of <code>Car</code> type. For this task, ScalaCheck generators are in charge. These structures know the way to generate values of a specific type. For example,

[code language="scala"]
import org.scalacheck.Gen

val myStringGen: Gen[String] = Gen.alphaString

val stringSample: Option[String] = myStringGen.sample

[/code]

If we use the predef <code>alphaString</code> generator, we'll be able to generate String random values that only contain [a-z].
With generator's <code>sample</code> method, we'll obtain a possible String value.

There are many other generic <code>Gen</code> <a href="https://www.scalacheck.org/files/scalacheck_2.11-1.12.4-api/index.html#org.scalacheck.Gen$">methods</a> that you should check out :-)

<h2>Gen composition</h2>

But, what if we want to create generators for custom types, like <code>Car</code>?
A <code>Gen[T]</code> can be compound for generating more complex values. For example:

[code language="scala"]
val carGen: Gen[Car] = for {
  wheels &lt;- Gen.choose(4,8)
  speed  &lt;- Gen.oneOf(0.0,50.0,100.0,120.0)
} yield Car(wheels,speed)
[/code]

By Using <code>choose[T](min: T,max: T)</code> method, we can generate values between 'min' and 'max'.
And with <code>oneOf[T](elems: T*)</code> method, we can choose an element from the given element sequence.
This way, using the element obtained from the Int generator, and using the other one obtained from the Double generator, we can build a <code>Car</code>. This doesn't mean that these values are already evaluated. We're just indicating that, in case we're requested for a Car, we know how to obtain one.

<a href="https://scalerablog.files.wordpress.com/2015/07/o7azz.jpg"><img class="aligncenter size-medium wp-image-545" src="https://scalerablog.files.wordpress.com/2015/07/o7azz.jpg?w=268" alt="o7azz" width="268" height="300" /></a>

<h2>Tip of the iceberg</h2>

As you can see, ScalaCheck is a good choice for creating property-based tests, but <code>Gen[T]</code> element, for generating certain-type semi-random values, can be used in other scopes, beside unit testing.
In future posts, we'll see how to use them for generating big data blocks in stress tests for BigData applications.

Peace out! :-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>553</wp:post_id>
  <wp:post_date>2015-07-20 12:00:59</wp:post_date>
  <wp:post_date_gmt>2015-07-20 10:00:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>testing-in-scala-ii-scalacheck</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="based"><![CDATA[based]]></category>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="post_tag" nicename="car"><![CDATA[car]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="framework"><![CDATA[framework]]></category>
  <category domain="post_tag" nicename="gen"><![CDATA[gen]]></category>
  <category domain="post_tag" nicename="generator"><![CDATA[generator]]></category>
  <category domain="post_tag" nicename="property"><![CDATA[property]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="scalacheck"><![CDATA[scalacheck]]></category>
  <category domain="post_tag" nicename="spec"><![CDATA[spec]]></category>
  <category domain="post_tag" nicename="test"><![CDATA[test]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12901220664]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/623072837918523392";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Granizado de Scala</title>
  <link>https://scalerablog.wordpress.com/2015/07/29/granizado-de-scala/</link>
  <pubDate>Wed, 29 Jul 2015 10:00:00 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=558</guid>
  <description/>
  <content:encoded><![CDATA[El post de hoy tiene algo distinto, no solo el formato de minientrada. Hemos pensado que hablar de otras cosas que no sean Scala sienta bien de vez en cuando...
<h2>Baby steps</h2>
Tenemos que reconocer que este ha sido un buen semestre para Scalera. Empezamos siendo dos monos escribiendo sobre Scala en un blog y ahora...bueno, ahora también, pero parece que la gente se anima a leer el blog y eso es bien. Bien para Scala y para los que <del datetime="2015-07-28T08:12:31+00:00">sufrimos</del> disfrutamos del lenguaje. Si con ello hemos conseguido que alguien más se enganche a este mundillo, nos damos por satisfechos :)

Por otra parte, hay que reconocer que nunca hubieramos pensado lo complicado que puede ser mantener un ritmo de publicación de post por semana, y esto hace que nos planteemos descansar el próximo mes de agosto, con la intención de volver frescos y con ganas renovadas el mes de septiembre.

<a href="https://scalerablog.files.wordpress.com/2015/07/msj7n5l.gif"><img class="aligncenter  wp-image-588" src="https://scalerablog.files.wordpress.com/2015/07/msj7n5l.gif" alt="msJ7n5l" width="162" height="168" /></a>
<h2>¿Cuales son las citas de Scalera a la vuelta de verano?</h2>
Por una parte tenemos la intención de volver a dar la chapa en <a href="http://2015.codemotion.es/" target="_blank">Codemotion</a> (como el año pasado con <a href="https://youtu.be/yl1XCj26mxg?t=2m" target="_blank">Scala@RealLife</a>). Aunque aún hay que votar en las comunidades por las mejores charlas propuestas ^^

<a href="https://scalerablog.files.wordpress.com/2015/07/me23n9t.gif"><img class="aligncenter  wp-image-589" src="https://scalerablog.files.wordpress.com/2015/07/me23n9t.gif?w=300" alt="ME23N9T" width="237" height="127" /></a>

Además, consideramos que no se puede seguir un blog sin poder demostrarlo con una camiseta friki o una taza para el café...le daremos una vuelta para ver cómo poder solucionar eso :)

Y como dirían los cassettes de gasolinera de 6 pistas: "¡Y mucho más!".

Si tenéis algún comentario/sugerencia/iniciativa para mejorar el blog, sentíos libres de comentar en el post ;)

<a href="https://scalerablog.files.wordpress.com/2015/07/odtudee.gif"><img class="aligncenter  wp-image-590" src="https://scalerablog.files.wordpress.com/2015/07/odtudee.gif?w=300" alt="odtUdEE" width="227" height="131" /></a>

Nos vemos a la vuelta.
Feliz verano.
Denle al like y 'suscribi, plis'.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>558</wp:post_id>
  <wp:post_date>2015-07-29 12:00:00</wp:post_date>
  <wp:post_date_gmt>2015-07-29 10:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>granizado-de-scala</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="anuncio"><![CDATA[anuncio]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="descanso"><![CDATA[descanso]]></category>
  <category domain="post_tag" nicename="novedades"><![CDATA[novedades]]></category>
  <category domain="post_tag" nicename="post"><![CDATA[post]]></category>
  <category domain="post_format" nicename="post-format-aside"><![CDATA[Minientrada]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="verano"><![CDATA[verano]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[13200821449]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/626333114734804993";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>36</wp:comment_id>
    <wp:comment_author><![CDATA[Codemotion 2015: Akka voló sobre el nido del Future | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/10/28/codemotion-2015-akka-volo-sobre-el-nido-del-future/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.64</wp:comment_author_IP>
    <wp:comment_date>2015-10-28 12:14:23</wp:comment_date>
    <wp:comment_date_gmt>2015-10-28 10:14:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] del típico parón de verano (como en la Liga), comentamos en otra minientrada la remota, vaga, ínfima posibilidad de daros la brasa en el Codemotion de este año &#8230;y [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1446027263.60167694091796875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1446027408</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1446027409.4439880847930908203125;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-10-28 10:14:23</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Type classes en Scala</title>
  <link>https://scalerablog.wordpress.com/2015/07/22/561/</link>
  <pubDate>Wed, 22 Jul 2015 15:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=561</guid>
  <description/>
  <content:encoded><![CDATA[Después de unas cuantos meses con el blog ya hemos podido saber donde podemos usar <a href="https://scalerablog.wordpress.com/2015/04/01/herencia-multiple-jugando-a-ser-dios/">traits</a>, para qué sirven los <a href="https://scalerablog.wordpress.com/2015/05/20/implicito-lisa-o-ilicito/">implícitos</a> o qué narices son eso de los<a href="https://scalerablog.wordpress.com/2015/06/03/tipos-existenciales-a-que-huelen-las-nubes/"> tipos genéricos</a>. Hoy vamos a utilizar un poco de todo para explicar las <em><strong>type classes</strong></em>.

Las <em><strong>type classes</strong></em>, a pesar del nombre, no provienen del paradigma orientado a objetos, si no de la programación funcional. Utilizando esta técnica vamos a poder agregar funcionalidad de forma ad-hoc a los tipos que deseemos. Tanto tipos primitivos del lenguaje como tipos que hayamos creado nosotros mismos.

<strong>¿Cómo se construyen type classes en Scala?</strong>

Para ilustrar la explicación vamos a usar un pequeño ejemplo.
En primer lugar, lo que tenemos que hacer es crear un trait con la funcionalidad que queremos añadir a los tipos. Como queremos que sea posible utilizarlo para varios tipos distintos, el trait estará parametrizado con el tipo genérico <em>T</em>.

[code language="scala"]
trait Addable[T] {
  def +(a: T, b: T): T
}
[/code]

Ahora que ya tenemos el trait definido, vamos a definir objetos implícitos que hereden de dicho trait. Tendremos que crear un objeto por cada tipo que queramos que tenga dicha funcionalidad. Además, en cada objeto tendremos que implementar como se deben sumar los elementos de ese tipo específico.

[code language="scala"]
object Addables {
  implicit object AddableLikeInt extends Addable[Int] {
    def +(a: Int, b: Int): Int = a + b
  }

  implicit object AddableLikeString extends Addable[String] {
    def +(a: String, b: String): String = a + b
  }

  implicit object AddableLikeBoolean extends Addable[Boolean] {
    def +(a: Boolean, b: Boolean): Boolean = a &amp;&amp; b
  }
}
[/code]

Como podemos ver, en este caso estamos definiendo el método <em>+</em> para los tipos <em>Int</em>, <em>String</em> y <em>Boolean</em>. Ahora ya podemos sumar estos tipos.

<strong>Mmmm...¿y cómo se usan?</strong>

Ya tenemos las <em>type classes</em> definidas para tres tipos primitivos. Para darles uso vamos a utilizar un método <em>plus</em> que sume dos elementos del mismo tipo.

[code language="scala"]
def plus[T](a1: T, a2: T)(implicit ev: Addable[T]): T = ev.+(a1, a2)
[/code]

Para obligar a que el tipo de los elementos que queremos sumar sea <em>Addable </em>vamos a utilizar en la signatura del método un valor implícito de tipo<em> Addable[T]</em>. De esta forma, el método buscara en el scope si existe un objeto que extienda del tipo <em>Addable[T]</em> cuyo <em>T</em> sea el tipo de los valores que queremos sumar. A este valor implícito se le suele denominar <em><strong>evidencia</strong></em>.
Ahora vamos a probarlo:

[code language="scala"]
import Addables._  

plus(true, false) //false
[/code]

<blockquote>Como recordatorio, comentar que podemos hacer uso de syntactic sugar y usar los Context Bound para marcar las evidencias:
<pre>def plus[T:Addable](a1: T, a2: T)</pre>
</blockquote>
¡Genial! Pero, ¿qué ocurre si queremos sumar algún tipo que no habíamos definido anteriormente? Pues que nos va a dar un error indicando que no se encuentra en el scope un implícito con el tipo definido:

[code language="scala"]
plus(1.0, 2.0) // error: could not find implicit value for parameter ev: Addable[Double]
[/code]

Solucionarlo es muy fácil. Basta con crear otro implicit object con el tipo deseado. En este caso con el tipo <em>Double</em>:

[code language="scala"]
implicit object AddableLikeDouble extends Addable[Double] {
  def +(a: Double, b: Double): Double = a + b
}

plus(1.0, 2.0) //3.0
[/code]

Ahora ya podemos sumar dos valores de tipo <em>Double</em>. Y lo mismo ocurre para tipos definidos por nosotros mismos:

[code language="scala"]
case class Group(name: String, people: Set[String])

implicit object AddableLikeGroup extends Addable[Group] {
  def +(a: Group, b: Group): Group =
    Group(
      name = a.name + &quot; &amp; &quot; + b.name,
      people = a.people | b.people
    )
}
[/code]

Ahora ya puedo sumar <em>Groups</em>:

[code language="scala"]
plus(Group(&quot;A&quot;, Set(&quot;Peter&quot;)), Group(&quot;B&quot;, Set(&quot;John, Chris&quot;))) 
//Group(&quot;A &amp; B&quot;, Set(&quot;Peter&quot;, &quot;John&quot;, &quot;Chris&quot;))
[/code]

<strong>Bonus</strong>

Como hemos podido ver, las type class nos permiten extender funcionalidad de una forma muy sencilla y elegante. Nos sirve tanto para trabajar con tipos primitivos, como con tipos propios. Además, controlando el scope de los objetos implícitos, tenemos el control sobre cuando queremos que un tipo específico extienda una determinada funcionalidad.

Esta técnica nos viene perfecto para meternos en profundidad con materia más compleja en futuros post. Lo que hemos visto hoy es el primer paso para entender los <strong><em>monoids</em></strong>, una estructura algebraica que podemos encontrar en librerías funcionales como <em><a href="https://github.com/scalaz/scalaz">Scalaz</a></em> o <em><a href="https://github.com/non/cats">Cats</a></em>. Pero por el momento os dejo con la miel en los labios :)

Feliz verano!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>561</wp:post_id>
  <wp:post_date>2015-07-22 17:00:00</wp:post_date>
  <wp:post_date_gmt>2015-07-22 15:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>561</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="advanced"><![CDATA[advanced]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="monoid"><![CDATA[monoid]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="type-classes"><![CDATA[type-classes]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12977085239]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/623870394714329088";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>22</wp:comment_id>
    <wp:comment_author><![CDATA[Teoría de Cate-movidas: Monoides | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/09/09/teoria-de-cate-movidas-monoides/</wp:comment_author_url>
    <wp:comment_author_IP>66.155.38.48</wp:comment_author_IP>
    <wp:comment_date>2015-09-09 18:25:10</wp:comment_date>
    <wp:comment_date_gmt>2015-09-09 16:25:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Somos como las colecciones de soldaditos de plomo y las matrículas gratis en los gimnasios&#8230; ¡volvemos en Septiembre! Y volvemos con algo que parece muy heavy pero que seguro que después de leer unas pocas líneas será más sencillo. Hoy comenzamos con una serie de post en las que hablaremos de algunas abstracciones funcionales, muy relacionadas con el mundo de las matemáticas, con el objetivo de introducirnos poco a poco en el mundo de las librerías puramente funcionales de Scala, como pueden ser Scalaz y Cats. Para ello, vamos a apoyarnos en algunas características y técnicas que ya hemos tratado anteriormente, como por ejemplo, las type classes. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1441815925</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1441815926.021110057830810546875;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1441815911.2069780826568603515625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-09-09 16:25:10</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>23</wp:comment_id>
    <wp:comment_author><![CDATA[Abstract alge..what?: Monoids | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/09/14/abstract-alge-what-monoids/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.35</wp:comment_author_IP>
    <wp:comment_date>2015-09-14 12:38:27</wp:comment_date>
    <wp:comment_date_gmt>2015-09-14 10:38:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] We are like the fascicles of tin soldier collections and the free enrollment at gyms &#8230; back in September! And with something that seems a little harsh but that surely after reading a few lines will be easier. Today we initiate a series of posts in which we&#8217;ll discuss some functional abstractions, that are very related to the world of mathematics, with the aim of being gradually introduced into the world of purely functional Scala libraries, such as as Scalaz or Cats. To do this, we will rely on some features and techniques that have already been discussed, such as type classes. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1442248267.4530150890350341796875;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1442248267</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1442230997.6719539165496826171875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1442227107.151156902313232421875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-09-14 10:38:27</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Type classes in Scala</title>
  <link>https://scalerablog.wordpress.com/2015/07/27/type-classes-in-scala/</link>
  <pubDate>Mon, 27 Jul 2015 10:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=574</guid>
  <description/>
  <content:encoded><![CDATA[After a few months with the blog, we now know where we can use <a href="https://scalerablog.wordpress.com/2015/05/29/multiple-inheritance-playing-god/">traits</a>, what is the purpose of <a href="https://scalerablog.wordpress.com/2015/05/29/implied-lisa-or-implode/">implicits</a>, or what the hell are <a href="https://scalerablog.wordpress.com/2015/06/08/existential-types-what-do-clouds-smell-like/">generic types</a>. Today, we are going to use a little bit of everything in order to explain <em><strong>type classes</strong></em>.

In spite of their name,<em><strong> type classes </strong></em>are not related with the object-oriented programming paradigm, but with functional programming. By using this technique, we will be able to add ad hoc functionality to the types we want. This applies for both the primitive types of the language and the custom types that we may have created.

<strong>How are type classes implemented in Scala?</strong>

In order to illustrate the explanation, we are going to use a small example.
First, what we will do is to create a trait with the functionality that we want to add to the types. As we want it to be reusable by different types, the trait will be parameterized with the generic type <em>T</em>.

[code language="scala"]
trait Addable[T] {
  def +(a: T, b: T): T
}
[/code]

Now the trait is well-defined, let's define implicit objects that inherit from it. We will have to create an object for each type that we want to have such functionality. Plus, we must implement in each object how the elements of that given type should be added.

[code language="scala"]
object Addables {
  implicit object AddableLikeInt extends Addable[Int] {
    def +(a: Int, b: Int): Int = a + b
  }

  implicit object AddableLikeString extends Addable[String] {
    def +(a: String, b: String): String = a + b
  }

  implicit object AddableLikeBoolean extends Addable[Boolean] {
    def +(a: Boolean, b: Boolean): Boolean = a &amp;&amp; b
  }
}
[/code]

As can be seen, in this example we're defining the method <em>+</em> for the <em>Int</em>, <em>String</em> and <em>Boolean</em> types. Now these types can make use of the addition functionality.

<strong>Mmmm... and how exactly can they be used?</strong>

We have already defined type classes for three primitive types. To give use to them, we will define a method called <em>plus,</em> which implements the addition of two elements of the same type.

[code language="scala"]
def plus[T](a1: T, a2: T)(implicit ev: Addable[T]): T = ev.+(a1, a2)
[/code]

In order to force the type of the elements that we want to add to be <em>Addable</em>, we will use in the method signature an implicit value of type <em>Addable[T]</em>. This way, the method will look for an object that extends the <em>Addable[T]</em> type in its scope,  where <em>T</em> is the type of the values we want to add. This implicit value is often referred to as <strong><em>evidence</em></strong>.
Well, let's test it:

[code language="scala"]
import Addables._  

plus(true, false) //false
[/code]

<blockquote>As a reminder, let me mention that syntactic sugar can be applied and Context Bounds be used to mark these evidences:
<pre>def plus[T:Addable](a1: T, a2: T)</pre>
</blockquote>
Awesome! But what happens if we want to add a type not previously defined? Then, we would get an error telling us that there isn't any implicit object with that type in the scope:

[code language="scala"]
plus(1.0, 2.0) // error: could not find implicit value for parameter ev: Addable[Double]
[/code]

Fixing this is quite simple. We just have to create another implicit object with the desired type. In this case, with the <em>Double</em> type:

[code language="scala"]
implicit object AddableLikeDouble extends Addable[Double] {
  def +(a: Double, b: Double): Double = a + b
}

plus(1.0, 2.0) //3.0
[/code]

Now we can add two values of type <em>Double</em>. The same thing applies to types defined by ourselves:

[code language="scala"]
case class Group(name: String, people: Set[String])

implicit object AddableLikeGroup extends Addable[Group] {
  def +(a: Group, b: Group): Group =
    Group(
      name = a.name + &quot; &amp; &quot; + b.name,
      people = a.people | b.people
    )
}
[/code]

Now <em>Groups </em>can be added too:

[code language="scala"]
plus(Group(&quot;A&quot;, Set(&quot;Peter&quot;)), Group(&quot;B&quot;, Set(&quot;John, Chris&quot;))) 
//Group(&quot;A &amp; B&quot;, Set(&quot;Peter&quot;, &quot;John&quot;, &quot;Chris&quot;))
[/code]

<strong>Bonus</strong>

As we have seen, type classes allow us to extend functionality in a simple and elegant way. It can be applied to both primitives types, as well as our own user-defined types. In addition, by handling the scope of implicit objects, we have control over when we want a specific type to extend a given functionality.

This technique is perfect for us to explore more complex matters in depth in future posts. What we have seen today is the first step in understanding <strong><em>monoids</em></strong>, algebraic structures that can be found in functional libraries such as <em><a href="https://github.com/scalaz/scalaz">Scalaz</a></em> or <em><a href="https://github.com/non/cats">Cats</a></em>. But this is all for now, I leave you yearning for more :)

Happy summer!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>574</wp:post_id>
  <wp:post_date>2015-07-27 12:00:00</wp:post_date>
  <wp:post_date_gmt>2015-07-27 10:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>type-classes-in-scala</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="advanced"><![CDATA[advanced]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="monoid"><![CDATA[monoid]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="type-classes"><![CDATA[type-classes]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[13131138154]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/625607336531374080";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>24</wp:comment_id>
    <wp:comment_author><![CDATA[Abstract alge..what?: Monoids | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/09/14/abstract-alge-what-monoids/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.82.155</wp:comment_author_IP>
    <wp:comment_date>2015-09-15 17:05:24</wp:comment_date>
    <wp:comment_date_gmt>2015-09-15 15:05:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] We are like the fascicles of tin soldier collections and the free enrollment at gyms &#8230; back in September! And with something that seems a little harsh but that surely after reading a few lines will be easier. Today we initiate a series of posts in which we&#8217;ll discuss some functional abstractions, that are very related to the world of mathematics, with the aim of being gradually introduced into the world of purely functional Scala libraries, such as as Scalaz or Cats. To do this, we will rely on some features and techniques that have already been discussed, such as type classes. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1442329524.11059093475341796875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1442399131</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1442333943.6132218837738037109375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1442399132.1484279632568359375;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-09-15 15:05:24</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Scala granita</title>
  <link>https://scalerablog.wordpress.com/2015/08/03/scala-granita/</link>
  <pubDate>Mon, 03 Aug 2015 10:00:37 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=584</guid>
  <description/>
  <content:encoded><![CDATA[Today's post has something different (not only the mini-post format). We've been thinking, and talking about Scala unrelated stuff is sometimes nice as well.

<h2>Baby steps</h2>

We have to admit that this has been a good semester for Scalera. At the beginning we were only two monkeys writing about Scala and now...well, we're actually the same monkeys, but it looks like people is getting used to read the blog, and that's cool. Cool for Scala, and for all of us, the people that <del datetime="2015-07-28T08:12:31+00:00">suffer</del> enjoy the language features. If with that tiny action, we've made that someone else comes aboard to this crazy world, we're fully satisfied. :)

On the other hand, we also have to admit that we never thought about the tough it can be writing a post per week (translations included), and that's why we've decided to take a break next month, with the intentions of coming back in september, fully fresh and recovered.

<a href="https://scalerablog.files.wordpress.com/2015/07/msj7n5l.gif"><img class="aligncenter  wp-image-588" src="https://scalerablog.files.wordpress.com/2015/07/msj7n5l.gif" alt="msJ7n5l" width="162" height="168" /></a>

<h2>About Scalera's TODO list after summer</h2>

At first, we want to be a pain in the neck at <a href="http://2015.codemotion.es/" target="_blank">Codemotion</a> (like last year with <a href="https://youtu.be/yl1XCj26mxg?t=2m" target="_blank">Scala@RealLife</a>), but there are remaining votations in the communities for choosing best speech proposals ^^

<a href="https://scalerablog.files.wordpress.com/2015/07/me23n9t.gif"><img class="aligncenter  wp-image-589" src="https://scalerablog.files.wordpress.com/2015/07/me23n9t.gif?w=300" alt="ME23N9T" width="237" height="127" /></a>

Besides that, we consider that a blog cannot be followed without being able to prove it with a geek t-shirt or a coffee cup...we'll think a little bit about how to mend that :)

And like the old cassettes yelled: "And much more stuff!"

If you have any comment/sugestion/idea for improving the blog, feel free to leave a comment on this post ;)

<a href="https://scalerablog.files.wordpress.com/2015/07/odtudee.gif"><img class="aligncenter  wp-image-590" src="https://scalerablog.files.wordpress.com/2015/07/odtudee.gif?w=300" alt="odtUdEE" width="227" height="131" /></a>

See you in september.
Happy summer.
Press like and 'suscrb plz'.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>584</wp:post_id>
  <wp:post_date>2015-08-03 12:00:37</wp:post_date>
  <wp:post_date_gmt>2015-08-03 10:00:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scala-granita</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="announcement"><![CDATA[announcement]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="news"><![CDATA[news]]></category>
  <category domain="post_tag" nicename="post"><![CDATA[post]]></category>
  <category domain="post_format" nicename="post-format-aside"><![CDATA[Minientrada]]></category>
  <category domain="post_tag" nicename="rest"><![CDATA[rest]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="summer"><![CDATA[summer]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[13357629469]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/628144815151026176";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Teoría de Cate-movidas: Monoides</title>
  <link>https://scalerablog.wordpress.com/2015/09/09/teoria-de-cate-movidas-monoides/</link>
  <pubDate>Wed, 09 Sep 2015 15:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=598</guid>
  <description/>
  <content:encoded><![CDATA[Somos como las colecciones de soldaditos de plomo y las matrículas gratis en los gimnasios... ¡volvemos en Septiembre!
Y volvemos con algo que parece muy heavy pero que seguro que después de leer unas pocas líneas será más sencillo.
Hoy comenzamos con una serie de post en las que hablaremos de algunas abstracciones funcionales, muy relacionadas con el mundo de las matemáticas, con el objetivo de introducirnos poco a poco en el mundo de las librerías puramente funcionales de Scala, como pueden ser <em><a href="https://github.com/scalaz/scalaz">Scalaz</a></em> y <em><a href="https://github.com/non/cats" target="_blank">Cats</a></em>. Para ello, vamos a apoyarnos en algunas características y técnicas que ya hemos tratado anteriormente, como por ejemplo, las <a href="https://scalerablog.wordpress.com/2015/07/22/561/" target="_blank">type classes</a>.

Por ello, hoy vamos a comenzar con los <strong>monoides</strong>.

<strong>Monoides, monoides everywhere...</strong>

¿Monoide? Un palabro un poco raro. Vamos a ver que dice Wikipedia sobre los monoides:
<blockquote><em><span style="font-weight:400;">"Estructura algebraica con una operación binaria, que es asociativa y tiene elemento neutro, es decir, es un semigrupo con elemento neutro."</span></em></blockquote>
<a href="https://scalerablog.files.wordpress.com/2015/09/i-dont-understand.jpg"><img class="size-medium wp-image-608 aligncenter" src="https://scalerablog.files.wordpress.com/2015/09/i-dont-understand.jpg?w=300" alt="i-dont-understand" width="300" height="226" /></a>

Ah...si, claro. Ya lo pillo...... Vamos a analizarlo poco a poco.
<ul>
	<li><strong>Operación binaria</strong>: ok, eso lo entiendo. Es una operación con dos operandos. Para tener un convenio, llamaremos a esta operación de forma genérica con el símbolo |+|</li>
</ul>
Sin embargo, la operación binaria tiene que cumplir dos reglas:
<ol>
	<li>Debe cumplir la <strong>propiedad asociativa</strong>, es decir:  a |+| (b + c) = (a + b) |+| c</li>
	<li>Y además, debe tener un <strong>elemento neutro</strong>:   a |+| elementoNeutro = a</li>
</ol>
Mmmm, ya está más claro. Entonces, la suma de enteros cumple las reglas de los monoides:
<ul>
	<li>Cumple la propiedad asociativa: 1 + (2 + 3) = (1+ 2) + 3</li>
	<li>Tiene un elemento neutro, el cero: 1 + 0 = 1</li>
</ul>
Con la multiplicación de enteros pasa lo mismo (cuyo elemento neutro es el 1), y con la concatenación de cadenas de texto también (siendo la cadena vacía "", el elemento neutro). Genial, ya voy entendiéndolo.

<strong>Monoides en Scalaz</strong>

Para trabajar con monoides vamos a utilizar en este post, la librería <em>Scalaz</em>. <em>Scalaz</em> ofrece un sin fin de opciones, abstracciones y funcionalidades. Hoy solo vamos a dar unas pequeñas pinceladas que nos permitirán realizar un ejemplo. Prometemos en un futuro hablar detenidamente de esta librería :)

Lo primero que tenemos que hacer es importar <em>Scalaz</em> en nuestro proyecto. Para ello, incluimos la dependencia en nuestro proyecto:
<pre>libraryDependencies <span class="pl-k">+</span><span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>org.scalaz<span class="pl-pds">"</span></span> <span class="pl-k">%%</span> <span class="pl-s"><span class="pl-pds">"</span>scalaz-core<span class="pl-pds">"</span></span> <span class="pl-k">%</span> <span class="pl-s"><span class="pl-pds">"</span>7.1.3<span class="pl-pds">"</span></span></pre>
y realizamos los siguientes imports:

[code language="scala"]
import scalaz._, Scalaz._
[/code]

Si cotilleamos un poco por la librería, podemos encontrarnos con la clase <a href="https://github.com/scalaz/scalaz/blob/series/7.2.x/core/src/main/scala/scalaz/Monoid.scala">Monoid</a>, o la clase <a href="https://github.com/scalaz/scalaz/blob/series/7.2.x/core/src/main/scala/scalaz/Semigroup.scala">Semigroup</a>. En ellas estará definida la funcionalidad de la que podremos aprovecharnos.

En la clase Monoid está definido el <a href="https://github.com/scalaz/scalaz/blob/series/7.2.x/core/src/main/scala/scalaz/Monoid.scala#L23">método zero</a>, que servirá para indicar cual es el elemento neutro. Además, en el trait <a href="https://github.com/scalaz/scalaz/blob/series/7.2.x/core/src/main/scala/scalaz/Monoid.scala#L75">MonoidLaw</a>, está definida la regla fundamental que tiene que cumplir un elemento neutro.

Pero, ¿dónde está la información asociada a la propiedad asociativa?. Pues está en la clase Semigroup. Parece ser que los monoides son una especialización de los semigrupos. Estos últimos, son los encargados de la regla asociativa, mientras que los monoides añaden la regla del elemento neutro. De hecho, si nos vamos a la clase Semigroup, podemos encontrar el método <a href="https://github.com/scalaz/scalaz/blob/series/7.2.x/core/src/main/scala/scalaz/Semigroup.scala#L22">append</a>, el cual representará nuestra operación binaria |+|, y un poco más abajo podemos ver como está definida la <a href="https://github.com/scalaz/scalaz/blob/series/7.2.x/core/src/main/scala/scalaz/Semigroup.scala#L78">propiedad asociativa</a>.

Lo siguiente que debemos saber es que Scalaz se basa en una estructura de type classes. Es por ello que tendremos que implementar implicit objects, definiendo el comportamiento propio de nuestras estructuras respecto a las propiedades monádicas.

Después de esta escasa pero suficiente (o eso espero) información, vamos a ver como podemos aplicar todo este conocimiento con un ejemplo sencillo.

<strong>Creando nuestro propio monoide</strong>

Ahora, para acabar, vamos a crear nuestro propio monoide con <em>Scalaz</em>. Vamos a comenzar creando unos nuevos tipos de datos. Vamos a crear dos tipos de átomos: oxígeno e hidrógeno.

[code language="scala"]
trait Atom
case object Oxygen extends Atom
case object Hydrogen extends Atom
[/code]

Y para terminar, el tipo molécula. Dicho tipo tendrá un número determinado de átomos (que pueden ser de distintos tipos), y una estabilidad molecular.

[code language="scala"]
case class Molecule(atoms: Map[Atom, Int], stability: Double)
[/code]

<p style="text-align:center;"><a href="https://scalerablog.files.wordpress.com/2015/09/jesse-pinkman-yeah-bitch-science.jpg"><img class="alignnone size-medium wp-image-609" src="https://scalerablog.files.wordpress.com/2015/09/jesse-pinkman-yeah-bitch-science.jpg?w=300" alt="jesse-pinkman-yeah-bitch-science" width="300" height="187" /></a></p>
Queremos trabajar con nuestro tipo molécula como si fuera un monoide, para ello, utilizando las type classes de Scalaz, vamos a definir un implicit object definiendo el comportamiento monádico de la molécula (esto parece un trabalenguas):

[code language="scala"]
implicit object MoleculeIsMonoid extends Monoid[Molecule] {

  def zero: Molecule = Molecule(Map(), 1)
  def append(f1: Molecule, f2: =&gt; Molecule): Molecule = f1.fusion(f2)

}
[/code]

Hemos decidido que la molécula neutra sea aquella que no tiene átomos, y que su estabilidad es 1, la máxima estabilidad posible.

Además, hemos decidido que la suma de moléculas se delegue en una función llamada fusion. Vamos a ver como está definida:

[code language="scala"]
case class Molecule(atoms: Map[Atom, Int], stability: Double) {

def fusion(other: Molecule): Molecule =
  Molecule(
    atoms = atoms |+| other.atoms,
    stability = stability * other.stability
  )
}
[/code]

Como podemos observar, la fusión de dos moléculas consiste en sumar los átomos que las forman como si fueran monoides. Y es que resulta, que Scalaz nos proporciona funcionalidad para tratar la combinación de mapas como monoides. Además, vamos a combinar las estabilidades como si fueran probabilidades, es decir, multiplicándolas.
<blockquote>El método append también se puede utilizar mediante el símbolo |+|, justo como lo habíamos definido en un primer momento.</blockquote>
¡Y ya está! Ahora puedo fusionar moléculas aprovechándome de que son monoides, y de las operaciones que nos ofrece Scalaz con dichas abstracciones:

[code language="scala"]
val m1 = Molecule(Map(Oxygen -&gt; 1, Hydrogen -&gt; 2), 0.2)
val m2 = Molecule(Map(Oxygen -&gt; 1), 0.3)

m1 |+| m2
//Molecule(Map(Oxygen -&gt; 2, Hydrogen -&gt; 2), 0.06)

List(m1, m2, m2, m1).foldLeft(Molecule(Map(), 1))(_ |+| _)
//Molecule(Map(Oxygen -&gt; 4, Hydrogen -&gt; 4), 0.0036)

Some(m1) |+| Some(m2)
//Some(Molecule(Map(Oxygen -&gt; 2, Hydrogen -&gt; 2), 0.06))
[/code]

<p style="text-align:left;"><img class="alignnone wp-image-612 aligncenter" src="https://scalerablog.files.wordpress.com/2015/09/46196561.jpg?w=237" alt="46196561" width="188" height="236" /></p>
<strong>Conclusión</strong>

Cuando llegues aquí espero que hayas perdido un poco de miedo a las palabras raras. Como hemos visto, las abstracciones algebraicas, son simplemente una manera de poner nombre a elementos que cumplen una serie de propiedades. Después, podremos beneficiarnos de esta abstracción para poder tratar varias operaciones distintas de la misma forma. Esta vez le ha tocado el turno a los monoides. Más adelante llegarán otros conceptos que ya te deberían de sonar, como las famosas mónadas. Ahora ya sabes, a fardar delante de tus amigos hablando de monoides :)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>598</wp:post_id>
  <wp:post_date>2015-09-09 17:00:00</wp:post_date>
  <wp:post_date_gmt>2015-09-09 15:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>teoria-de-cate-movidas-monoides</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="advanced"><![CDATA[advanced]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="monoid"><![CDATA[monoid]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="scalaz"><![CDATA[scalaz]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/641648527886581760";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[14604061411]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1f99b49000c8c6076edab39774ea6dfd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>74</wp:comment_id>
    <wp:comment_author><![CDATA[miguelbucarest]]></wp:comment_author>
    <wp:comment_author_email>miguel.s.address@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.32.235.74</wp:comment_author_IP>
    <wp:comment_date>2016-02-12 19:05:02</wp:comment_date>
    <wp:comment_date_gmt>2016-02-12 17:05:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Por si algún otro curioso se vuelve loco como yo buscando la definición de |+|

en Scalaz
https://github.com/scalaz/scalaz/blob/series/7.1.x/core/src/main/scala/scalaz/syntax/SemigroupSyntax.scala#L7

En Learning Scalaz/Monoid
http://eed3si9n.com/learning-scalaz/Monoid.html (buscar Semigroup)

http://38.media.tumblr.com/0858be436710d525a57a1241b7c9289c/tumblr_inline_ngpbstinAF1qfr700.gif]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>14635623</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1455296703.9883320331573486328125;s:5:"event";s:9:"check-ham";s:4:"user";s:14:"miguelbucarest";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1455360185</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1455360185</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1455302064.634749889373779296875;s:5:"event";s:9:"check-ham";s:4:"user";s:14:"miguelbucarest";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1455360185.5878770351409912109375;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-02-12 17:05:02</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Variance in Scala (“Luke, he is your father too”)</title>
  <link>https://scalerablog.wordpress.com/2015/09/16/variance-in-scala-luke-he-is-your-father-too/</link>
  <pubDate>Wed, 16 Sep 2015 10:00:20 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=621</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://blog.stratio.com/variance-in-scala-luke-he-is-your-father-too/"><img class="alignnone size-full" src="https://scalerablog.files.wordpress.com/2015/09/scalavarianceinheritance.png" alt="" /></a>

This week we wanted to share with you a reblog from a <a href="http://blog.stratio.com">Stratio's blog</a> post that talks about variance in Scala:
<blockquote>When working with <strong>Big Data</strong>, sometimes it’s useful to remember that powerful products wouldn’t work properly without the tools that build them. It’s possible to start programming in <strong>Scala</strong> with a few case classes and a bunch of for-comprehensions, but those are only little scratches in a huge ice surface like Scala is. It may not be enough to make your code clean and comprehensible.  I’ve been developing with this programming language for almost 4 years, and every day I discover a new feature that surprises me. That acknowledgement, in the end, is the main reason to keep digging deeper into Scala.<span id="more-572"></span>

For instance, working with generics can be sometimes really messy, especially when we want to play a little bit with <strong>inheritance</strong> (which turns out to be very common).

It’s very usual to clash with <strong>variance</strong> issues in that case, but not as usual as getting a clear idea about what it really implies. [...]</blockquote>
Read more: <a href="http://blog.stratio.com/variance-in-scala-luke-he-is-your-father-too/">Variance in Scala (“Luke, he is your father too”)</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>621</wp:post_id>
  <wp:post_date>2015-09-16 12:00:20</wp:post_date>
  <wp:post_date_gmt>2015-09-16 10:00:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>variance-in-scala-luke-he-is-your-father-too</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="advanced"><![CDATA[advanced]]></category>
  <category domain="post_tag" nicename="contravariance"><![CDATA[contravariance]]></category>
  <category domain="post_tag" nicename="covariance"><![CDATA[covariance]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="generics"><![CDATA[generics]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="variance"><![CDATA[variance]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[14839318437]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/644088457556422656";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Scala Jet Streams</title>
  <link>https://scalerablog.wordpress.com/2015/09/30/scala-jet-streams/</link>
  <pubDate>Wed, 30 Sep 2015 10:00:27 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=628</guid>
  <description/>
  <content:encoded><![CDATA[A veces ocurre que, al obtener el resultado de un método que devuelve una colección, esta puede tener un tamaño considerable y además el proceso de computar dicha colección es lento o muy costoso. Por otra parte, si luego no vamos a procesar todos los elementos o si la colección no es finita (series numéricas), no podemos emplear colecciones convencionales.

Supongamos que queremos implementar un sistema de información atmosférica en tiempo real. Podemos ver el proceso de consulta como el típico bucle infinito:

[code language="scala"]

case class Weather(
  tempCelsius: Float, 
  humidity: Double)

def checkWeather(): Weather = {
  /* Some request to a web service 
   * or access some weather station device.
   * We'll mock it.
   */
   import scala.util.Random
   Weather(
     Random.nextFloat() * 100 % 40,
     Random.nextDouble() % 1)
}

type WeatherHandler[T] = Weather =&gt; T

val handler: WeatherHandler[Unit] = println

while(true){
  handler.apply(checkWeather())
}

[/code]

O podemos asumir que el tiempo atmosférico es una colección infinita de mediciones en momentos concretos.

[code language="scala"]

val weather: TraversableOnce[Weather] = ???

for (value &lt;- weather) handler.apply(value)

[/code]

De esta manera, también podríamos modificar dicha colección mediante un <code>map</code> para obtener solo las temperaturas, por ejemplo:

[code language="scala"]
val extractTemperature: WeatherHandler[Float] = 
  _.tempCelsius

val onlyTemperatures: TraversableOnce[Float] = 
  weather.map(extractTemperature)

[/code]

Veamos de que maneras podemos obtener dicho comportamiento.

<h2>Iterators</h2>

Una primera aproximación podría ser implementar el trait <code>Iterator[+A]</code>:

[code language="scala"]
object weather extends Iterator[Weather]{

  def hasNext() = true

  def next(): Weather = checkWeather()

}
[/code]

Dado que nuestro iterador no termina nunca, el valor de <code>hasNext()</code> es siempre <code>true</code>. Cada vez que invoquemos al método <code>next()</code> obtendremos un nuevo valor de tipo <code>Weather</code> (esto puede implicar realizar una llamada a cierto web service o invocar un método de una central metereológica).

Fácil. No obstante, también podemos usar otro tipo de colecciones de Scala denominado Stream...

<h2>Streams</h2>

Podemos denominar a los Streams como colecciones ordenadas cuyos valores se evaluan de manera 'lazy'.
Si por ejemplo definimos la serie númerica que compone los números enteros tenemos que:

[code language="scala"]
val integers: Stream[Int] = {

  def loop(v: Int): Stream[Int] = 
    v #:: loop(v + 1)

  loop(0)

}
[/code]

Como podéis ver, el símbolo <code>#::</code> sirve para añadir un elemento al principio de un <code>Stream</code>. Si ejecutamos:

[code language="scala"]
integers.head
integers.take(2).toArray
[/code]

obtendremos el primer elemento del Stream y los dos primeros. 

Podemos aplicar sobre este stream todas las operaciones que aplican a las colecciones de Scala (Traversable):

[code language="scala"]
integers
  .filter(_ % 2 == 0)
  .take(5)
  .toArray //Array(0, 2, 4, 6, 8)

integers
  .takeWhile(_ &lt; 5)
  .toArray //Array(0, 1, 2, 3, 4)
[/code]

Fijaos que hasta que no invocamos el método <code>toArray</code>, no se evaluan los streams resultantes de las transformaciones aplicadas (filter, take, ...)

Si ahora lo aplicamos a nuestro servicio meteorológico:

[code language="scala"]
val weather: Stream[Weather] = {

  def loop(): Stream[Weather] = 
    checkWeather() #:: loop

  loop

}
[/code]

obtenemos un Stream en cuyo interior definimos el método <code>loop()</code> que define como se va a evaluar el Stream (invocando al método <code>checkWeather()</code>). 

Y nada más. Así de sencillo.

¡Que tiemble Maldonado!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>628</wp:post_id>
  <wp:post_date>2015-09-30 12:00:27</wp:post_date>
  <wp:post_date_gmt>2015-09-30 10:00:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scala-jet-streams</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="collection"><![CDATA[collection]]></category>
  <category domain="post_tag" nicename="iterator"><![CDATA[iterator]]></category>
  <category domain="post_tag" nicename="jet"><![CDATA[jet]]></category>
  <category domain="post_tag" nicename="lazy"><![CDATA[lazy]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="stream"><![CDATA[stream]]></category>
  <category domain="post_tag" nicename="traversable"><![CDATA[traversable]]></category>
  <category domain="post_tag" nicename="weather"><![CDATA[weather]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[15318418690]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/649163101590294530";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>25</wp:comment_id>
    <wp:comment_author><![CDATA[lvicentesanchez]]></wp:comment_author>
    <wp:comment_author_email>langel.vicente@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://randomfpthoughts.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>2.153.147.7</wp:comment_author_IP>
    <wp:comment_date>2015-09-30 16:02:48</wp:comment_date>
    <wp:comment_date_gmt>2015-09-30 14:02:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Buen post! Conviene recordar que no es aconsejable usar val cuando se usa un Stream ya que eso captura la cabeza del Stream, impidiendo que el garbage collector libere la memoria de los elementos ya procesados. A menos que se necesite reusar el mismo Stream materializado, es mejor usar def.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>47828109</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value>1</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1443621769.118824005126953125;s:5:"event";s:9:"check-ham";s:4:"user";s:15:"lvicentesanchez";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1443621769</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>15326251545</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1443624773</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1443624773</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1443624773.608378887176513671875;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-09-30 14:02:48</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>26</wp:comment_id>
    <wp:comment_author><![CDATA[jpaniego]]></wp:comment_author>
    <wp:comment_author_email>javiersantospaniego@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.82.197.162</wp:comment_author_IP>
    <wp:comment_date>2015-10-05 11:17:23</wp:comment_date>
    <wp:comment_date_gmt>2015-10-05 09:17:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Totally agree! 
Gracias por tu comentario :-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>25</wp:comment_parent>
    <wp:comment_user_id>59615419</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1444036643.486032009124755859375;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>15492049826</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1444036643</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1444036643</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-10-05 09:17:23</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Scala Jet Streams *</title>
  <link>https://scalerablog.wordpress.com/2015/10/05/scala-jet-streams-2/</link>
  <pubDate>Mon, 05 Oct 2015 10:00:40 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=638</guid>
  <description/>
  <content:encoded><![CDATA[Sometimes, it's usual that obtaining a method's result which is, in fact, a collection; this collection has a huge size and besides, the process of computing it is really harsh or slow. On the other side, if we're not going to process all its composing elements or if the collection is not finite (numerical series), we cannot use conventional structures to hold these functionality.

For example, let's supose we're trying to implement a near-real-time weather system . We can picture the query process like the typical infinite loop:

[code language="scala"]

case class Weather(
  tempCelsius: Float, 
  humidity: Double)

def checkWeather(): Weather = {
  /* Some request to a web service 
   * or access some weather station device.
   * We'll mock it.
   */
   import scala.util.Random
   Weather(
     Random.nextFloat() * 100 % 40,
     Random.nextDouble() % 1)
}

type WeatherHandler[T] = Weather =&gt; T

val handler: WeatherHandler[Unit] = println

while(true){
  handler.apply(checkWeather())
}

[/code]

Or we can assume that weather data is just an infinite collection of precise discrete data elements.

[code language="scala"]

val weather: TraversableOnce[Weather] = ???

for (value &lt;- weather) handler.apply(value)

[/code]



This way, we could also change the nature of that collection by using a simple <code>map</code> for getting only Celsius temperatures, for example:

[code language="scala"]
val extractTemperature: WeatherHandler[Float] = 
  _.tempCelsius

val onlyTemperatures: TraversableOnce[Float] = 
  weather.map(extractTemperature)

[/code]

Let's see which other ways we can use to achieve such behavior.

<h2>Iterators</h2>

A first approach could be implementing <code>Iterator[+A]</code>:

[code language="scala"]
object weather extends Iterator[Weather]{

  def hasNext() = true

  def next(): Weather = checkWeather()

}
[/code]

Given that our iterator will not certainly finish, the value of <code>hasNext()</code> is always <code>true</code>. Every time we invoke method <code>next()</code>, we will obtain a new value <code>Weather</code>-typed (this may involve invoking some web service or a request to a weather measure device).

Easy peasy. However, we can think about another kind of Scala collections, known as Streams...

<h2>Streams</h2>

We can think of Streams as sorted collections whose values are lazy evaluated. For example, if we describe the numerical serie that define integer numbers we will have that:

[code language="scala"]
val integers: Stream[Int] = {

  def loop(v: Int): Stream[Int] = 
    v #:: loop(v + 1)

  loop(0)

}
[/code]

As you can see, method <code>#::</code> is used for adding an initial element to an existing <code>Stream</code>. If we run:

[code language="scala"]
integers.head
integers.take(2).toArray
[/code]

we will get both first stream's element and two first elements.

We can invoke from this Stream every single method that apply to Scala collections (Traversable):

[code language="scala"]
integers
  .filter(_ % 2 == 0)
  .take(5)
  .toArray //Array(0, 2, 4, 6, 8)

integers
  .takeWhile(_ &lt; 5)
  .toArray //Array(0, 1, 2, 3, 4)
[/code]

Look out! Until we invoke method <code>toArray</code>, streams that result of applying transformations to initial stream(filter, take, ...) are not evaluated. Only we retrieving concrete values, transformation methods will be applied.

Now we have it, let's use it with our weather service:

[code language="scala"]
val weather: Stream[Weather] = {

  def loop(): Stream[Weather] = 
    checkWeather() #:: loop

  loop

}
[/code]

We will get a Stream that will have an inner method <code>loop()</code> that defines the way of evaluating the Stream (invoking method <code>checkWeather()</code>). 

And that's all folks :-) 
Fear us, Al Roker!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>638</wp:post_id>
  <wp:post_date>2015-10-05 12:00:40</wp:post_date>
  <wp:post_date_gmt>2015-10-05 10:00:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scala-jet-streams-2</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="collection"><![CDATA[collection]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="iterator"><![CDATA[iterator]]></category>
  <category domain="post_tag" nicename="jets"><![CDATA[jets]]></category>
  <category domain="post_tag" nicename="lazy"><![CDATA[lazy]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="stream"><![CDATA[stream]]></category>
  <category domain="post_tag" nicename="traversable"><![CDATA[traversable]]></category>
  <category domain="post_tag" nicename="weather"><![CDATA[weather]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[15493240430]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/650975385300013056";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Abstract alge..what?: Monoids</title>
  <link>https://scalerablog.wordpress.com/2015/09/14/abstract-alge-what-monoids/</link>
  <pubDate>Mon, 14 Sep 2015 10:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=645</guid>
  <description/>
  <content:encoded><![CDATA[We are like the fascicles of tin soldier collections and the free enrollment at gyms ... back in September! And with something that seems a little harsh but that surely after reading a few lines will be easier. Today we initiate a series of posts in which we'll discuss some functional abstractions, that are very related to the world of mathematics, with the aim of being gradually introduced into the world of purely functional Scala libraries, such as as <em><a href="https://github.com/scalaz/scalaz">Scalaz</a></em> or <em><a href="https://github.com/non/cats" target="_blank">Cats</a></em>. To do this, we will rely on some features and techniques that have already been discussed, such as <a href="https://scalerablog.wordpress.com/2015/07/27/type-classes-in-scala/" target="_blank">type classes</a>.

Today, we'll start with <strong>monoids</strong>.

<strong>Monoids, monoids everywhere...</strong>

Monoid? Weird word. Let's see what Wikipedia has to say about monoids:
<blockquote><em><span style="font-weight:400;">"Algebraic structure with a single associative binary operation and an identity element. Monoids are studied in semigroup theory as they are semigroups with identity."</span></em></blockquote>
<a href="https://scalerablog.files.wordpress.com/2015/09/i-dont-understand.jpg"><img class="size-medium wp-image-608 aligncenter" src="https://scalerablog.files.wordpress.com/2015/09/i-dont-understand.jpg?w=300" alt="i-dont-understand" width="300" height="226" /></a>

Hmmm... yes, right. What the hell? Let's face it gradually.
<ul>
	<li><strong>Binary operation</strong>: ok, I get this one. It's an operation with two operands. In order to follow the same convention, we are going to call this operation in a generic way with the symbol |+|.</li>
</ul>
However, the binary operation must comply with two rules:
<ol>
	<li>It must comply with the <strong>associative property</strong>, ie:  a |+| (b + c) = (a + b) |+| c</li>
	<li>And besides, it must have a <strong>neutral element</strong>.:   a |+| neutralElement = a</li>
</ol>
Hmmmm, that makes sense. For instance, the addition of integers follows the rules of monoids:
<ul>
	<li>Associative property: 1 + (2 + 3) = (1 + 2) + 3</li>
	<li>The neutral element is zero: 1 + 0 = 1</li>
</ul>
Same reasoning applies to the multiplication of integers (whose neutral element is 1), and the concatenation of strings as well (being the empty string "", the neutral element). Great! I'm starting to get it.

<strong>Monoids in Scalaz</strong>

In order to work with monoids, in this post we will be using the Scalaz library. Scalaz offers us a wide range of options, abstractions and functionalities. Today we will only give you a glimpse of Scalaz in order to write an example. We promise to talk at great length about this library in the future :)

The first thing to do is to import Scalaz in our project. To do so, we have to include this library in the dependencies of our project:
<pre>libraryDependencies <span class="pl-k">+</span><span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>org.scalaz<span class="pl-pds">"</span></span> <span class="pl-k">%%</span> <span class="pl-s"><span class="pl-pds">"</span>scalaz-core<span class="pl-pds">"</span></span> <span class="pl-k">%</span> <span class="pl-s"><span class="pl-pds">"</span>7.1.3<span class="pl-pds">"</span></span></pre>
and now we write the following imports:

[code language="scala"]
import scalaz._, Scalaz._
[/code]

If we get a sneak peek at the library, we can find the Monoid  <a href="https://github.com/scalaz/scalaz/blob/series/7.2.x/core/src/main/scala/scalaz/Monoid.scala">Monoid</a> class, or the class <a href="https://github.com/scalaz/scalaz/blob/series/7.2.x/core/src/main/scala/scalaz/Semigroup.scala">Semigroup</a>. They define the functionality we will make use of.

The Monoid class defines the <a href="https://github.com/scalaz/scalaz/blob/series/7.2.x/core/src/main/scala/scalaz/Monoid.scala#L23">zero</a> method,, which serves us to indicate which is the neutral element. Furthermore, in the <a href="https://github.com/scalaz/scalaz/blob/series/7.2.x/core/src/main/scala/scalaz/Monoid.scala#L75">MonoidLaw</a> trait, the fundamental rule that a neutral element must comply with is defined.

But, where is the information regarding the associative property?. Well, it is in the Semigroup class. It seems that monoids are an specialization of semigroups. Semigroups are responsible for the associative rule, while monoids add the rule of the neutral element. In fact, if we go to the Semigroup class, we can find the <a href="https://github.com/scalaz/scalaz/blob/series/7.2.x/core/src/main/scala/scalaz/Semigroup.scala#L22">append</a> method, which represents our binary operation |+|, and a bit further down we can see how the <a href="https://github.com/scalaz/scalaz/blob/series/7.2.x/core/src/main/scala/scalaz/Semigroup.scala#L78">associative property</a> is defined.

The next thing we must know is that Scalaz is based on a structure of type classes. This is why we will have to implement implicit objects, defining the inherent behaviour of our structures with respect to the monadic properties.

After this brief but (I hope) sufficient explanation, we will see how to apply all this knowledge to a simple example.

<strong>Creating our first monoid</strong>

Now finally, we will create our own monoid with Scalaz. Let's start by creating new data types. We'll create two types of atoms: oxygen and hydrogen.

[code language="scala"]
trait Atom
case object Oxygen extends Atom
case object Hydrogen extends Atom
[/code]

And finally, the molecule type. This type will have a certain number of atoms (which may be of different types), and a molecular stability.

[code language="scala"]
case class Molecule(atoms: Map[Atom, Int], stability: Double)
[/code]

<p style="text-align:center;"><a href="https://scalerablog.files.wordpress.com/2015/09/jesse-pinkman-yeah-bitch-science.jpg"><img class="alignnone size-medium wp-image-609" src="https://scalerablog.files.wordpress.com/2015/09/jesse-pinkman-yeah-bitch-science.jpg?w=300" alt="jesse-pinkman-yeah-bitch-science" width="300" height="187" /></a></p>
We want to work with our molecule type as if it were a monoid. For that purpose, and by using the Scalaz type classes, we'll define an implicit object that defines the monadic behaviour of the molecule:

[code language="scala"]
implicit object MoleculeIsMonoid extends Monoid[Molecule] {

  def zero: Molecule = Molecule(Map(), 1)
  def append(f1: Molecule, f2: =&gt; Molecule): Molecule = f1.fusion(f2)

}
[/code]

We have decided that the neutral molecule is the one that has no atoms, and whose stability is 1, the maximum stability possible.

In addition, we have decided that the addition of molecules is delegated to a function called fusion. Let's see how it's defined:

[code language="scala"]
case class Molecule(atoms: Map[Atom, Int], stability: Double) {

def fusion(other: Molecule): Molecule =
  Molecule(
    atoms = atoms |+| other.atoms,
    stability = stability * other.stability
  )
}
[/code]

As we can see, the fusion of two molecules is the union of the atoms that compose them as if they were monoids. It turns out that Scalaz provides us with the functionality to address the combination of maps as monoids. In addition, we will combine the stabilities as if they were two probabilities, that is, multiplying them both.
<blockquote>The append method can also be represented by the symbol | + |, just as we had initially defined it.</blockquote>
And that's all! We can now merge molecules using monoids and the operations that Scalaz provides us with for such abstractions:

[code language="scala"]
val m1 = Molecule(Map(Oxygen -&gt; 1, Hydrogen -&gt; 2), 0.2)
val m2 = Molecule(Map(Oxygen -&gt; 1), 0.3)

m1 |+| m2
//Molecule(Map(Oxygen -&gt; 2, Hydrogen -&gt; 2), 0.06)

List(m1, m2, m2, m1).foldLeft(Molecule(Map(), 1))(_ |+| _)
//Molecule(Map(Oxygen -&gt; 4, Hydrogen -&gt; 4), 0.0036)

Some(m1) |+| Some(m2)
//Some(Molecule(Map(Oxygen -&gt; 2, Hydrogen -&gt; 2), 0.06))
[/code]

<p style="text-align:left;"><img class="alignnone wp-image-612 aligncenter" src="https://scalerablog.files.wordpress.com/2015/09/46196561.jpg?w=237" alt="46196561" width="188" height="236" /></p>
<strong>Conclusion</strong>

By the time you get to this point, I hope you'll have lost the fear of bizarre words. As we have seen, algebraic abstractions are just a way of naming items that comply with some properties. Then, we can benefit from this abstraction to treat different operations in the same way. Today, we've seen monoids. Later on, other concepts you might have heard about will be discussed, such as the famous monads. Now you know, show off your knowledge about monoids to your friends and family :)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>645</wp:post_id>
  <wp:post_date>2015-09-14 12:00:00</wp:post_date>
  <wp:post_date_gmt>2015-09-14 10:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>abstract-alge-what-monoids</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="advanced"><![CDATA[advanced]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="monoid"><![CDATA[monoid]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[14765587424]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/643373217831251968";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>For comprehension y la importancia de la belleza</title>
  <link>https://scalerablog.wordpress.com/2015/09/23/for-comprehension-y-la-importancia-de-la-belleza/</link>
  <pubDate>Wed, 23 Sep 2015 15:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=676</guid>
  <description/>
  <content:encoded><![CDATA[Existen multitud de dudas existenciales en el mundo moderno en el que vivimos. Pero hay una duda que supera a todas ellas. ¿Qué hace realmente una <em><strong>for comprehension</strong></em>?

La respuesta a esta intrincada cuestión es....nada nuevo. Las estructuras <em>for comprehension</em> son simplemente <strong><em>syntactic sugar</em></strong>. Por debajo, en función de como construyamos el bloque, habrá llamadas a <em>map</em>, <em>flatmap</em>, <em>withFilter</em> o <em>foreach</em>.

Las for comprehension contarán con dos partes clave:
<ul>
	<li>El bloque for mediante el cual se realizan consultas anidadas</li>
	<li>El bloque yield donde se agrupan y tratan las consultas realizadas anteriormente</li>
</ul>
Para entender estos conceptos vamos a ver un pequeño ejemplo:

[code language="scala"]
for {
  x &lt;- List(1, 2, 3)
  y &lt;- List(true, false) 
} yield (x, y)
[/code]

El resultado de esta expresión será la combinación mediante tuplas de la primera lista con la segunda:

[code language="scala"]
List(
  (1, true),
  (1, false),
  (2, true),
  (2, false),
  (3, true),
  (3, false)
)
[/code]

Esta for comprehension realmente realizará las siguientes acciones:

[code language="scala"]
List(1, 2, 3).flatMap(x =&gt;
  List(true, false).map( y =&gt; (x, y))
)
[/code]

Como se puede observar, mediante los bloques for todo se vuelve mucho más legible. Lo único que hacemos es hilar varios flatmap para culminar con un map. Vamos a ver otro ejemplo:

[code language="scala"]
for {
  x &lt;- List(1, 2)
  y &lt;- List(true, false)
  z &lt;- List(&quot;a&quot;, &quot;b&quot;) 
} yield (x, y, z)
[/code]

cuyo equivalente será:

[code language="scala"]
List(1, 2, 3).flatMap(x =&gt;
  List(true, false).flatMap( y =&gt;
    List(&quot;a&quot;, &quot;b&quot;).map(z =&gt; (x, y, z))
  )
)
[/code]

y el resultado producido será:

[code language="scala"]
List(
  (1, true, &quot;a&quot;),
  (1, true, &quot;b&quot;),
  (1, false, &quot;a&quot;),
  (1, false, &quot;b&quot;),
  (2, true, &quot;a&quot;),
  (2, true, &quot;b&quot;),
  (2, false, &quot;a&quot;),
  (2, false, &quot;b&quot;)
)
[/code]

Además, también podemos utilizar filtros mediante sentencias if embebidas:

[code language="scala"]
for {
  x &lt;- List(1, 2, 3, 4, 5, 6, 7)
  if x &lt; 3
  y &lt;- List(&quot;a&quot;, &quot;b&quot;) 
} yield (x, y)

//result: List((1,a), (1,b), (2,a), (2,b))

[/code]

cuyo equivalente es:

[code language="scala"]
List(1, 2, 3, 4, 5, 6, 7).withFilter(_ &lt; 3).flatMap( x =&gt; 
  List(&quot;a&quot;, &quot;b&quot;).map(
    y =&gt; (x, y)
  )
)
[/code]

Existe la posibilidad de que no solo queramos crear una nueva colección, sino realizar una acción con cada uno de los elementos. En ese caso no utilizaremos el bloque yield. Esto provocará que la traducción, al no querer realizar transformaciones a una colección, en vez de ser un método map, sea mediante el método foreach. Tiene bastante sentido ya que en este caso solo queremos realizar acciones por cada evento generado y el resultado final será de tipo <em>Unit</em>.

[code language="scala"]
for {
  x &lt;- List(1, 2, 3)
  y &lt;- List(true, false) } println(s&quot;($x , $y)&quot;) List(1, 2, 3).foreach(x =&gt;
  List(true, false).foreach( y =&gt; 
    println(s&quot;($x , $y)&quot;)
  )
)
[/code]

Después de todos estos ejemplos, esperamos que utilicéis las for comprehension para hacer vuestro código más legible siempre que sea posible. Aunque todos sepamos que la magia se crea en el interior.

<a href="https://scalerablog.files.wordpress.com/2015/09/35dunb.jpg"><img class="size-medium wp-image-685 aligncenter" src="https://scalerablog.files.wordpress.com/2015/09/35dunb.jpg?w=300" alt="35dunb" width="300" height="225" /></a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>676</wp:post_id>
  <wp:post_date>2015-09-23 17:00:00</wp:post_date>
  <wp:post_date_gmt>2015-09-23 15:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>for-comprehension-y-la-importancia-de-la-belleza</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="flatmap"><![CDATA[flatmap]]></category>
  <category domain="post_tag" nicename="for"><![CDATA[for]]></category>
  <category domain="post_tag" nicename="map"><![CDATA[map]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[15089301771]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/646704511503851520";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>28</wp:comment_id>
    <wp:comment_author><![CDATA[Teoría de Cate-movidas: Mónadas | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/10/07/teoria-de-cate-movidas-monadas/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.77</wp:comment_author_IP>
    <wp:comment_date>2015-10-07 17:13:11</wp:comment_date>
    <wp:comment_date_gmt>2015-10-07 15:13:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Y debido a que tiene definida una función flatMap y un método apply (o lo que es lo mismo, un método bind y un método point), podemos utilizar for comprehension para hacer nuestro código más legible, como vimos hace dos semanas: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1444231176</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1444231176.243441104888916015625;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1444230791.9585649967193603515625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-10-07 15:13:11</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>For comprehension and importance of beauty</title>
  <link>https://scalerablog.wordpress.com/2015/09/28/for-comprehension-and-importance-of-beauty/</link>
  <pubDate>Mon, 28 Sep 2015 10:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=693</guid>
  <description/>
  <content:encoded><![CDATA[There are many existential questions in the modern world we live in. But there is one question that surpasses them all. What does a <strong><em>for comprehension </em></strong>really do?

The answer to this intricate matter is... nothing new. For comprehension structures are just <strong><em>syntactic sugar</em></strong>. Underneath, and depending on how the block is built, there will be calls to <em>map, flatMap, withFilter or foreach</em>.

For comprehension structures will have two key parts:
<ul>
	<li>The for block, by which nested queries are performed</li>
	<li>The yield block, where previous queries are grouped and treated</li>
</ul>
In order to understand these concepts, let's take a look at a small example:

[code language="scala"]
for {
  x &lt;- List(1, 2, 3)
  y &lt;- List(true, false) 
} yield (x, y)
[/code]

The result of this expression is the combination in tuples of the first list with the second:

[code language="scala"]
List(
  (1, true),
  (1, false),
  (2, true),
  (2, false),
  (3, true),
  (3, false)
)
[/code]

What this for comprehension is really doing is performing the following operations:

[code language="scala"]
List(1, 2, 3).flatMap(x =&gt;
  List(true, false).map( y =&gt; (x, y))
)
[/code]

As can be seen, with <em>for</em> blocks everything becomes much more readable. All that needs to be done is to join several flatMaps to conclude with a map. Let's see another example:

[code language="scala"]
for {
  x &lt;- List(1, 2)
  y &lt;- List(true, false)
  z &lt;- List(&quot;a&quot;, &quot;b&quot;) 
} yield (x, y, z)
[/code]

which is equivalent to:

[code language="scala"]
List(1, 2, 3).flatMap(x =&gt;
  List(true, false).flatMap( y =&gt;
    List(&quot;a&quot;, &quot;b&quot;).map(z =&gt; (x, y, z))
  )
)
[/code]

and the result produced is:

[code language="scala"]
List(
  (1, true, &quot;a&quot;),
  (1, true, &quot;b&quot;),
  (1, false, &quot;a&quot;),
  (1, false, &quot;b&quot;),
  (2, true, &quot;a&quot;),
  (2, true, &quot;b&quot;),
  (2, false, &quot;a&quot;),
  (2, false, &quot;b&quot;)
)
[/code]

Moreover, we can also apply filters by using embedded if statements:

[code language="scala"]
for {
  x &lt;- List(1, 2, 3, 4, 5, 6, 7)
  if x &lt; 3
  y &lt;- List(&quot;a&quot;, &quot;b&quot;) 
} yield (x, y)

//result: List((1,a), (1,b), (2,a), (2,b))

[/code]

whose equivalent is:

[code language="scala"]
List(1, 2, 3, 4, 5, 6, 7)
  .withFilter(_ &lt; 3)
  .flatMap( x =&gt;
    List(&quot;a&quot;, &quot;b&quot;).map(
      y =&gt; (x, y)
    )
  )
[/code]

It may happen that not only we want to create a new collection, but also we want some operations to be applied to each one of the elements. In such a situation, we will not use the yield block. This will change the translation as we don't want to make changes to a collection and thus, instead of being a map method, it will be the foreach method. This makes perfect sense since, in this case, we only want to perform actions for each generated event and the type of the final result will be <em>Unit</em>.

[code language="scala"]
for {
  x &lt;- List(1, 2, 3)
  y &lt;- List(true, false)
} println(s&quot;($x , $y)&quot;) 

List(1, 2, 3).foreach(x =&gt;
  List(true, false).foreach( y =&gt;
    println(s&quot;($x , $y)&quot;)
  )
)
[/code]

After all these examples, we hope that you use the for comprehension to make your code more readable whenever possible. Although we all know that the magic lies within.

<a href="https://scalerablog.files.wordpress.com/2015/09/35dunb.jpg"><img class="size-medium wp-image-685 aligncenter" src="https://scalerablog.files.wordpress.com/2015/09/35dunb.jpg?w=300" alt="35dunb" width="300" height="225" /></a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>693</wp:post_id>
  <wp:post_date>2015-09-28 12:00:00</wp:post_date>
  <wp:post_date_gmt>2015-09-28 10:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>for-comprehension-and-importance-of-beauty</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="flatmap"><![CDATA[flatmap]]></category>
  <category domain="post_tag" nicename="for"><![CDATA[for]]></category>
  <category domain="post_tag" nicename="map"><![CDATA[map]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[15246014196]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/648441584002854912";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>30</wp:comment_id>
    <wp:comment_author><![CDATA[Abstract alge&#8230; what? Monads | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/10/12/abstract-alge-what-monads/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.100.49</wp:comment_author_IP>
    <wp:comment_date>2015-10-12 17:15:31</wp:comment_date>
    <wp:comment_date_gmt>2015-10-12 15:15:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] And, as they&#8217;ll have a flatMap and an apply methods (or same thing, a bind and a point methods), we&#8217;ll be able to use the for comprehension structure to make our code more readable, as we learned two weeks ago: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1444662932.430963993072509765625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1444668273.48416996002197265625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1444752536</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1444752536.8459150791168212890625;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-10-12 15:15:31</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Teoría de Cate-movidas: Mónadas</title>
  <link>https://scalerablog.wordpress.com/2015/10/07/teoria-de-cate-movidas-monadas/</link>
  <pubDate>Wed, 07 Oct 2015 15:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=711</guid>
  <description/>
  <content:encoded><![CDATA[Hoy ha llegado el día. Hoy veremos unas pinceladas de las famosas <strong>mónadas</strong>.
Una mónada, al igual que un monoide, parece un concepto sacado de lo más profundo del infierno. Parece imposible de entender. Pero nada más lejos de la realidad. Vamos a intentar poner un poco de luz sobre este concepto.

Existen numerosas definiciones de lo que es una mónada. Alguna más complicada, alguna más sencilla.

<a href="https://scalerablog.files.wordpress.com/2015/10/44b0bd758f8ee5c81362923f0d5c8e017c9ddf623925e60c29a4c015b89fbb45.jpg"><img class="size-medium wp-image-712 aligncenter" src="https://scalerablog.files.wordpress.com/2015/10/44b0bd758f8ee5c81362923f0d5c8e017c9ddf623925e60c29a4c015b89fbb45.jpg?w=300" alt="44b0bd758f8ee5c81362923f0d5c8e017c9ddf623925e60c29a4c015b89fbb45" width="300" height="198" /></a>

Pero como nos gustan las definiciones sencillas, en este primer contacto con las mónadas vamos a decir que son estructuras algebraicas que tienen un <strong>constructor</strong> y un método <strong><em>flatMap</em></strong> que, como vimos en <a href="https://scalerablog.wordpress.com/2015/04/22/traversable-ops-map-flatten-flatmap/">anteriores posts</a>, es la concatenación de un método <em>map</em> y un <em>flatten</em>.

<strong>¿Qué necesitamos para crear una mónada?</strong>

Como acabamos de comentar, básicamente necesitamos dos métodos: un constructor (comúnmente llamado <em>apply</em>) y un método <em>flatMap</em>.

Además, existen unas leyes monádicas que hay que cumplir. Dichas leyes exigen una serie de relaciones entre las funciones anteriormente mencionadas. Pero, para bien o para mal, no vamos a analizarlas en este post para no hacerlo muy denso.

<strong>Ejemplo: El tipo Option</strong>

El tipo <em>Option</em>, como ya hemos dicho en varios post, es una mónada.

<a href="https://scalerablog.files.wordpress.com/2015/10/bdu68sacyaafkkr.jpg"><img class="alignnone size-medium wp-image-714" src="https://scalerablog.files.wordpress.com/2015/10/bdu68sacyaafkkr.jpg?w=300" alt="Bdu68sACYAAfkkr" width="300" height="211" /></a>

Vamos a introducirnos en las tripas de Scala para ver como está definida:

[code language="scala"]
def apply[A](x: A): Option[A] =
  if (x == null) None else Some(x)

def flatMap[B](f: A =&gt; Option[B]): Option[B] =
  if (isEmpty) None else f(this.get)
[/code]

Como se puede ver, el tipo <em>Option</em> tiene un constructor (<em>apply</em>) y un método <em>flatMap</em>. Gracias a estos dos métodos (y a que se cumplen las leyes monádicas), podemos decir que el tipo <em>Option</em> es una mónada.

Sin embargo, en la librería básica de Scala, no está definido directamente el tipo <em>Monad</em>. Pero para eso está Scalaz. Vamos a ver como define Scalaz el tipo <em>Option</em> como mónada:

[code language="scala"]
def point[A](a: =&gt; A) = Some(a)

def bind[A, B](fa: Option[A])(f: A =&gt; Option[B]) =
  fa flatMap f
[/code]

Como se puede ver, en Scalaz, el método <em>flatMap</em> es llamado <strong><em>bind</em></strong>. A su vez, el método <strong><em>point</em></strong> llama a un constructor, por lo que realmente se llama al método <em>apply</em>. Por tanto, si definimos estos dos métodos para nuestros tipos propios (y además cumplen las leyes monádicas), podemos definir nuestras propias mónadas.

Y debido a que tiene definida una función <em>flatMap</em> y un método <em>apply</em> (o lo que es lo mismo, un método bind y un método point), podemos utilizar <strong><em>for comprehension</em></strong> para hacer nuestro código más legible, <a href="https://scalerablog.wordpress.com/2015/09/23/for-comprehension-y-la-importancia-de-la-belleza/">como vimos hace dos semanas</a>:

[code language="scala"]
for {
  x &lt;- Some(1)
  y &lt;- Some(2)
} yield x + y //Some(3)
[/code]

<strong>Conclusión</strong>

Las mónadas son mucho más de lo que hemos contado en este post. Es todo un mundo por explorar. Además de las ya mencionadas leyes monádicas, existen distintos tipos de mónadas ya definidas, como la mónada Reader. Además, el uso de mónadas está orientado a evitar los efectos de lado, un tema bastante importante en el ámbito de la programación funcional pura. Pero todo a su tiempo :)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>711</wp:post_id>
  <wp:post_date>2015-10-07 17:00:00</wp:post_date>
  <wp:post_date_gmt>2015-10-07 15:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>teoria-de-cate-movidas-monadas</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="advanced"><![CDATA[advanced]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="monad"><![CDATA[monad]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[15575069273]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/651777270206476288";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>37</wp:comment_id>
    <wp:comment_author><![CDATA[miguelbucarest]]></wp:comment_author>
    <wp:comment_author_email>miguel.s.address@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>213.229.163.5</wp:comment_author_IP>
    <wp:comment_date>2015-11-03 17:45:38</wp:comment_date>
    <wp:comment_date_gmt>2015-11-03 15:45:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[cual sería el uso o ventaja de las mónadas?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>14635623</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1446565538.5527689456939697265625;s:5:"event";s:9:"check-ham";s:4:"user";s:14:"miguelbucarest";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1446651062</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1446651062</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1446569596.788330078125;s:5:"event";s:9:"check-ham";s:4:"user";s:14:"miguelbucarest";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1446651063.042665004730224609375;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-11-03 15:45:38</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>32</wp:comment_id>
    <wp:comment_author><![CDATA[Teoría de Cate-movidas: Mónada Reader | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/10/21/teoria-de-cate-movidas-monada-reader/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.32</wp:comment_author_IP>
    <wp:comment_date>2015-10-21 17:26:01</wp:comment_date>
    <wp:comment_date_gmt>2015-10-21 15:26:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] de perder el miedo a las mónadas se abre un mundo de posibilidades. Hoy vamos a ver una mónada en concreto: la mónada Reader. Esta [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1445441161.2192099094390869140625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1445441197</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1445441197.7404229640960693359375;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-10-21 15:26:01</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>39</wp:comment_id>
    <wp:comment_author><![CDATA[dvallejonava]]></wp:comment_author>
    <wp:comment_author_email>d.vallejo.nava@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2.138.162.88</wp:comment_author_IP>
    <wp:comment_date>2015-11-04 17:54:55</wp:comment_date>
    <wp:comment_date_gmt>2015-11-04 15:54:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Uno de los usos más importantes de las mónadas es la posibilidad de combinación que tienen entre ellas gracias al método flatmap. Por ejemplo, mediante la mónada Reader (que encontrarás en otro post de este blog), puede combinar varias funciones de tipo Function1, es decir, que solo tienen un argumento de entrada.

En este post se comenta de forma muy breve otro ejemplo de combinación mediante el tipo Option. Si se tienen varias instancias de tipo Option, pueden combinarse entre si utilizando una for comprehension. Si utilizamos otro tipo que sea mónada (o bien nos creamos un tipo propio que lo sea) podemos combinar dichas mónadas de igual manera.

Podemos beneficiarnos de esta capacidad de combinación para ir creando cada vez funciones más complicadas sin la necesidad de tener que evaluar el resultado.

Si estás interesado te recomiendo este post sobre mónadas en Scala que implementa ejemplos propios y realiza una explicación más extensa: http://scabl.blogspot.com.es/2013/02/monads-in-scala-1.html]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>37</wp:comment_parent>
    <wp:comment_user_id>81583895</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1446652496</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1446652496.9866759777069091796875;s:5:"event";s:9:"check-ham";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1446652497</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-11-04 15:54:55</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>48</wp:comment_id>
    <wp:comment_author><![CDATA[miguelbucarest]]></wp:comment_author>
    <wp:comment_author_email>miguel.s.address@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>213.229.163.5</wp:comment_author_IP>
    <wp:comment_date>2015-11-26 18:22:31</wp:comment_date>
    <wp:comment_date_gmt>2015-11-26 16:22:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Muchas gracias, no me habia llegado el aviso de tu respuesta. muy interesante que el flatmap tenga que cepillarse los nulls/none tambien :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>39</wp:comment_parent>
    <wp:comment_user_id>14635623</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1448554954</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1448554952</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1448554953.0392029285430908203125;s:5:"event";s:9:"check-ham";s:4:"user";s:14:"miguelbucarest";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-11-26 16:22:31</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>70</wp:comment_id>
    <wp:comment_author><![CDATA[Martin algañaraz]]></wp:comment_author>
    <wp:comment_author_email>idcmardelplata@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/+Martinalgañaraz</wp:comment_author_url>
    <wp:comment_author_IP>181.114.225.226</wp:comment_author_IP>
    <wp:comment_date>2016-02-08 16:10:34</wp:comment_date>
    <wp:comment_date_gmt>2016-02-08 14:10:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Las monadas no son mas que un patrón de diseño para la composición de funciones en lenguajes funcionales. Se trate de envolver todo en un contexto y aplicarle "transformaciones (funciones)" a lo que esta dentro de ese envoltorio. Eso nos permite manejar los errores de una manera mas sencilla (con la monada maybe), la programación asíncrona y la entrada/salida. No conozco Scala pero algo sencillo puede ser esto en javascript (aclaro que esto es un funtor no una monada, pero es la base para entenderlas).

var Contenedor = function(item) {
    this.__item = item;
}

Contenedor.prototype.of = function(item) //Aqui la clave de todo
{                                                                //Siempre que se cree un nuevo objeto con este metodo
   return new Contenedor (item);               //el valor sera envuelto y nunca dejara de estarlo
}                                                               

Contenedor.prototype.map = function(fn){     //Esta función "desenvuelve" el ítem del contexto, le 
   return Contenedor.of ( fn ( this.__item));     //aplica la función pasada como argumento y 
}                                                                      //retorna el resultado envuelto en un nuevo contexto

Y la forma de uso seria.

var elemento = Contenedor.of("Un simple string");

elemento.map(toUpperCase)
              .map(substr(0,2)
              .map(console.log);


La idea de esto, es que todas las funciones que modifiquen el item sean pasadas a trabes de map (o como lo quieran llamar). De esta manera nos aseguramos que nuestros datos o puedan ser modificados "accidentalmente" por ninguna función fuera del contexto.

La gracia de esto es que map se puede modificar del modo que deseemos ( funciona como una especie de decorador en python ). Un ej sencillo:

Contenedor.prototype.map = function(fn){    
   console.log("La funcion ", fn.name, " a sido llamada");  
   return Contenedor.of ( fn ( this.__item));    
}                                                                     

La idea de las monadas es la de emparejar los argumentos de entrada con los de retorno, permitiéndonos de esa manera poder componer funciones sin importar la cantidad de argumentos que tenga cada una.


Un saludo grande y espero poder haber arrojado algo de luz sobre el tema.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1454940636.24090099334716796875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value>googleplus</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value>https://lh3.googleusercontent.com/-oa5vCpSSWds/AAAAAAAAAAI/AAAAAAAALZk/s-sNGOg8gSo/photo.jpg?sz=50</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value>110110726758217197408</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1454945177</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1454945177</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1454945039.8620278835296630859375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1454945177.7234499454498291015625;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-02-08 14:10:34</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>ScalaJs: Javascript para paganos backend (Parte I)</title>
  <link>https://scalerablog.wordpress.com/2015/12/02/scalajs-javascript-para-paganos-backend-parte-i/</link>
  <pubDate>Wed, 02 Dec 2015 10:00:24 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=720</guid>
  <description/>
  <content:encoded><![CDATA[No tengo ni idea de front. Lo reconozco. Soy uno de esos cavernícolas backend que <del>se niega</del> no puede salir de su cueva backend. Sin embargo, la gente de <a href="http://www.scala-js.org/" target="_blank">ScalaJs</a> ha desarrollado algo que acerca un poco más el mundo del frontend a gente como yo.

<a href="https://scalerablog.files.wordpress.com/2015/12/izcunxh.gif" rel="attachment wp-att-944"><img class="aligncenter size-medium wp-image-944" src="https://scalerablog.files.wordpress.com/2015/12/izcunxh.gif?w=300" alt="iZcUNxH" width="300" height="168" /></a>
<h2>ScalaJs: ¿Qué es?</h2>
ScalaJs es una librería que permite traducir código Scala a código Javascript. Así de simple. Además, de cara a los desarrolladores de front, permite integrarse con las principales librerías JS como AngularJs o React.
¿Qué ofrece entonces que no haga ya JS? Codificar front usando un lenguaje fuertemente tipado.
<a href="https://scalerablog.files.wordpress.com/2015/12/49775773.jpg" rel="attachment wp-att-945"><img class="aligncenter size-medium wp-image-945" src="https://scalerablog.files.wordpress.com/2015/12/49775773.jpg?w=300" alt="49775773" width="300" height="262" /></a>
Gracias a esto, sé lo que devuelve mi expresión (olvida los <code>null</code>, <code>NaN</code> y resultados mágicos).
Si bien es cierto que al principio generaba excesivo boilerplate al compilar las fuentes Scala a JS, el optimizador de ScalaJS ha mejorado bastante desde sus inicios.
<h2>Mi primer proyecto ScalaJs</h2>
Desde Scalera, hemos <del>contratado a un mono</del> probado en nuestras carnes la librería y queremos daros las principales claves para montar vuestro primer mini-proyecto ScalaJs basado en canvas. El ejemplo en el que nos hemos basado, podéis encontrarlo <a href="https://github.com/lihaoyi/workbench-example-app" target="_blank">aquí</a>.
<h3>Montando el proyecto SBT</h3>
Una vez creado el scaffolding básico,

[code language="xml"]
scalajs-example/
  project/
    build.sbt
  src/main/
    resources/
    scala/scalera/scalajs/example
  build.sbt
[/code]

Tendremos que añadir dos plugins a nuestro proyecto (en <code>project/build.sbt</code>):
<ul>
	<li><a href="http://www.scala-js.org/doc/sbt-plugin.html" target="_blank">sbt-scalajs</a> : Nos permitirá invocar desde SBT directamente a la tarea de optimización que generará el fichero JS a partir de las fuentes Scala</li>
	<li><a href="https://github.com/lihaoyi/workbench" target="_blank">workbench</a> : Plugin desarrollado por <a href="https://github.com/lihaoyi" target="_blank">Li Haoyi</a> que permite desplegar tu proyecto ScalaJS en local de manera muy sencilla. Solo con arrancar SBT, ejecuta un servidor web en localhost que despliega tu aplicación :-)</li>
</ul>
Nuestro fichero debería quedar como sigue:

[code language="scala"]
resolvers += &quot;spray repo&quot; at &quot;http://repo.spray.io&quot;
resolvers += &quot;Typesafe repository&quot; at &quot;http://repo.typesafe.com/typesafe/releases/&quot;
addSbtPlugin(&quot;org.scala-js&quot; % &quot;sbt-scalajs&quot; % &quot;0.6.1&quot;)
addSbtPlugin(&quot;com.lihaoyi&quot; % &quot;workbench&quot; % &quot;0.2.3&quot;)
[/code]

El tema de añadir los resolvers es necesario para el plugin de workbench, según ha detectado gente que lo ha <a href="https://github.com/lihaoyi/workbench/issues/8" target="_blank">probado</a>.

<h3>Definiendo el <code>build.sbt</code></h3>
Aparte de indicar el nombre del proyecto, la organización y demás...

[code language="scala"]
import com.lihaoyi.workbench.Plugin._
enablePlugins(ScalaJSPlugin)
workbenchSettings

organization := &quot;scalera&quot;
version := &quot;1.0&quot;
scalaVersion := &quot;2.11.2&quot;
name := &quot;scalajs-example&quot;

libraryDependencies ++= Seq(
  &quot;org.scala-js&quot; %%% &quot;scalajs-dom&quot; % &quot;0.8.0&quot;,
  &quot;com.lihaoyi&quot; %%% &quot;scalatags&quot; % &quot;0.5.3&quot;)

bootSnippet := &quot;scalera.scalajs.example.Boot().main(document.getElementById('canvas'));&quot;
updateBrowsers &lt;&lt;= updateBrowsers.triggeredBy(fastOptJS in Compile)
[/code]

es necesario habilitar el plugin de sbt-scalajs e importar las settings de <code>workbench</code>. Posteriormente, añadiremos en las dependencias las librerías auxiliares que usaremos (<code>scalajs-dom</code> para realizar operaciones sobre el dom de manera fácil y <code>scalatags</code> para usar un DSL sencillo para escribir etiquetas XML/HTML).

Adicionalmente, indicaremos un par de cosas más:
<ul>
	<li><code>bootSnippet</code> : El snippet que indica el punto de entrada a la aplicación.</li>
	<li><code>updateBrowser</code> : Indicamos que propiciaremos un reseteo (parcial) del contenido del browser cuando se llame a la tarea de <code>fastOptJS</code>.</li>
</ul>
<h3>Añadiendo código Scala</h3>
Ya tenemos creado el proyecto SBT en el cual se enmarcará nuestra aplicación, añadamos pues algo de lógica creando el fichero <code>src/main/scalera/scalajs/example/Boot.scala</code>:

[code language="scala"]
package scalera.scalajs.example
 
import scala.scalajs.js.annotation.JSExport
 
import org.scalajs.dom
import org.scalajs.dom.html
 
@JSExport
object Boot {
 
  @JSExport
  def main(canvas: html.Canvas): Unit = {
 
    println(&quot;Hello world!&quot;)
 
    val ctx = canvas.getContext(&quot;2d&quot;)
      .asInstanceOf[dom.CanvasRenderingContext2D]
 
    val width = ctx.canvas.width
 
    val height = ctx.canvas.height
 
    def run: Unit = {
      ctx.clearRect(0, 0, width, height)
      ctx.fillStyle = &quot;black&quot;
      ctx.fillRect(0, 0, width, height)
    }
 
    dom.setInterval(() =&gt; run, 1000)
 
  }
}
[/code]

Imports aparte, lo que llama la atención de este snippet, es lo siguiente:
<ul>
	<li>Los <code>@JSExport</code>. Básicamente sirven para indicar a ScalaJs, qué elementos deben exportarse a javascript, de manera que sean accesibles desde cualquier otro script JS que importe el fichero generado (o desde el HTML).</li>
	<li>El <code>println("Hello world!")</code>. La pregunta del millón es, ¿esto donde se imprimirá? En la consola del browser, my friends.</li>
	<li>El context <code>ctx</code> representa la selección del canvas que vamos a usar.</li>
	<li>El método <code>run</code> borra la superficie del canvas, selecciona el estilo de relleno a 'negro' y pinta un rectángulo en la superficie del canvas.</li>
	<li><code>dom.setInterval(() =&gt; run, 1000)</code> : Causa la ejecución del método <code>run</code> cada segundo.</li>
</ul>
Ya nos falta poco...
<h3>Algo de HTML no hace daño...</h3>
Vale, ¿cómo visualizamos el pedazo de aplicación que acabamos de crear? Tendremos que crear un <code>index.html</code>, aunque sea básico, que invoque nuestro <code>main</code>.

Creamos dicho fichero en <code>src/main/resources</code> con un contenido muy simple:

[code language="html"]
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
 &lt;title&gt;Scalera Scalajs-example&lt;/title&gt;
 &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;
&lt;/head&gt;
&lt;body style=&quot;margin: 0px&quot;&gt;


&lt;div&gt;
 &lt;canvas style=&quot;display: block;padding:0;margin:auto;width=800&quot; id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;600&quot;/&gt;
&lt;/div&gt;


&lt;script type=&quot;text/javascript&quot; src=&quot;../scalera-scalajs-example-fastopt.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/workbench.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
 scalera.scalajs.example.Boot().main(document.getElementById('canvas'));
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
[/code]

Como veis, el HTML lo único que hace es declarar un canvas e importar 3 scripts:
<ul>
	<li><code>../scalera-scalajs-example-fastopt.js</code> : El fichero JS generado a partir nuestras fuentes Scala.</li>
	<li><code>/workbench.js</code> : el script que carga el plugin de <code>workbench</code>.</li>
	<li>Un script anónimo que carga el objeto Boot (exportado a JS mediante la etiqueta <code>@JSExport</code>) y ejecuta el método main pasándole el canvas que hemos declarado más arriba</li>
</ul>
<h3>Demo</h3>
Para probar que funciona nuestro proyecto, bastará con ejecutar <code>sbt</code> sobre el directorio raiz de nuestro proyecto, y el plugin de workbench se encargará de levantar el servidor web.

Podremos acceder a la url <code>http://localhost:12345/target/scala-2.11/classes/index.html</code> y veremos, en primer lugar, que se ha pintado un precioso cuadro que cambia de color cada segundo en todo el canvas, y por otra parte, si abrimos la consola del navegador, veremos que ha impreso nuestro brutal <strong>Hello world!</strong>
<h2>Vale, ¿y lo malo?</h2>
A pesar de la pinta que tiene nuestro proyecto de ejemplo, al implementarlo nos encontramos con algunas dificultades que tenemos que mencionar (para que no os sintáis engañados):
<ul>
	<li>Usar dependencias scala: ScalaJs no puede usar clases/objetos de dependencias que no tengan la naturaleza de proyecto ScalaJs a su vez. Limita bastante pero tiene sentido si piensas que ScalaJs tiene que ser capaz de migrar a JS todo código Scala involucrado en un <code>@JSExport</code></li>
	<li>Testing : ¿ScalaJS y Scalatest juntos? Con dificultad. Pero échale un vistazo a <a href="https://github.com/lihaoyi/utest" target="_blank">uTest</a> ...</li>
</ul>
<h2>Conclusiones</h2>
ScalaJs mola. No queremos decir con esto que sea mejor que desarrollar nativamente en JS, ni óptimo, pero sí que facilita que gente totalmente atea en materia de front se acerque un poco más a este mundillo y que ofrece muchas posibilidades.

En futuros posts veremos algunos ejemplos sobre como usar el <code>CanvasRenderingContext2D</code> o sobre el funcionamiento de las anotaciones <code>@JSExport</code>.

¡Agur de limón! :-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>720</wp:post_id>
  <wp:post_date>2015-12-02 12:00:24</wp:post_date>
  <wp:post_date_gmt>2015-12-02 10:00:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scalajs-javascript-para-paganos-backend-parte-i</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="canvas"><![CDATA[canvas]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="dom"><![CDATA[dom]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="scalajs"><![CDATA[scalajs]]></category>
  <category domain="post_tag" nicename="tag"><![CDATA[tag]]></category>
  <category domain="post_tag" nicename="tutorial"><![CDATA[tutorial]]></category>
  <category domain="post_tag" nicename="workshop"><![CDATA[workshop]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[17398316087]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/671994610604838912";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Abstract alge... what? Monads</title>
  <link>https://scalerablog.wordpress.com/2015/10/12/abstract-alge-what-monads/</link>
  <pubDate>Mon, 12 Oct 2015 15:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=722</guid>
  <description/>
  <content:encoded><![CDATA[The day has finally come. Today we'll take a look at the noteworthy <strong>monads</strong>.

A monad, just like a monoid, may seem to be a concept taken from the deepest hell. It seems almost impossible to understand. Nothing could be further from the truth. Let's try to shed light on this concept.

There are many definitions of what a monad is. Some are complicated, others are easier.

<a href="https://scalerablog.files.wordpress.com/2015/10/44b0bd758f8ee5c81362923f0d5c8e017c9ddf623925e60c29a4c015b89fbb45.jpg"><img class="size-medium wp-image-712 aligncenter" src="https://scalerablog.files.wordpress.com/2015/10/44b0bd758f8ee5c81362923f0d5c8e017c9ddf623925e60c29a4c015b89fbb45.jpg?w=300" alt="44b0bd758f8ee5c81362923f0d5c8e017c9ddf623925e60c29a4c015b89fbb45" width="300" height="198" /></a>

As we are really fond of simple definitions, in this first contact with monads we'll say that they are algebraic structures that have a <strong>constructor</strong> and a <em><strong>flatMap</strong></em> method which, as we already saw in <a href="https://scalerablog.wordpress.com/2015/05/29/traversable-ops-map-flatten-flatmap-2/">previous posts</a>, is a concatenation of a <em>map</em> method and a <em>flatten</em>.

<strong>What do we need to create a monad?</strong>

As we have already said, we need basically two methods: a constructor (commonly called <em>apply</em>) and a <em>flatMap</em> method.

In addition, there are some monadic laws to comply with. Those laws require that certain relations exist between the abovementioned functions. However, for better or worse, we are not going to analyse them in this post in order not to complicate it unnecessarily.

<strong>Case: Option type
</strong>

<em>Option</em> type, as already mentioned in some other posts, is a monad.

<a href="https://scalerablog.files.wordpress.com/2015/10/bdu68sacyaafkkr.jpg"><img class="alignnone size-medium wp-image-714" src="https://scalerablog.files.wordpress.com/2015/10/bdu68sacyaafkkr.jpg?w=300" alt="Bdu68sACYAAfkkr" width="300" height="211" /></a>

Let's get into the insides of Scala to see how it's defined:

[code language="scala"]
def apply[A](x: A): Option[A] =
  if (x == null) None else Some(x)

def flatMap[B](f: A =&gt; Option[B]): Option[B] =
  if (isEmpty) None else f(this.get)
[/code]

As can be appreciated, <em>Option</em> type has a constructor (<em>apply</em>) and a <em>flatMap</em> method. Thanks to these two methods (and to the compliance with monadic laws), we can say that <em>Option</em> type is a monad.

However, in Scala's basic library, the <em>Monad</em> type is not defined. This is where Scalaz comes in. Let's see how Scalaz defines the <em>Option</em> type as a monad:

[code language="scala"]
def point[A](a: =&gt; A) = Some(a)

def bind[A, B](fa: Option[A])(f: A =&gt; Option[B]) =
  fa flatMap f
[/code]

As can be seen, in Scalaz, the <em>flatMap</em> method is called <em><strong>bind</strong></em>. In turn, the <strong><em>point</em></strong> method calls a constructor and therefore, the <em>apply</em> method is called. Henceforth, if we define these two methods for our own types (them complying with monadic laws too), we'll be able to create our own monads.

And, as they'll have a flatMap and an apply methods (or same thing, a bind and a point methods), we'll be able to use the <strong><em>for comprehension</em></strong> structure to make our code more readable, <a href="https://scalerablog.wordpress.com/2015/09/28/for-comprehension-and-importance-of-beauty/">as we learned two weeks ago</a>:

[code language="scala"]
for {
  x &lt;- Some(1)
  y &lt;- Some(2)
} yield x + y //Some(3)
[/code]

<strong>Conclusion</strong>

Monads are much more than we have described in this post. It's a whole new world to explore. Apart from the abovementioned monadic laws, there are some predefined monads, such as the Reader one. Furthermore, the use of monads is geared towards avoiding side effects, which is quite important in pure functional programming. But all in due time :)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>722</wp:post_id>
  <wp:post_date>2015-10-12 17:00:00</wp:post_date>
  <wp:post_date_gmt>2015-10-12 15:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>abstract-alge-what-monads</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="advanced"><![CDATA[advanced]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="monad"><![CDATA[monad]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/653589803766706176";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[15744894954]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>34</wp:comment_id>
    <wp:comment_author><![CDATA[Abstract alge&#8230; what? The Reader monad | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/10/26/abstract-alge-what-the-reader-monad/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.100.193</wp:comment_author_IP>
    <wp:comment_date>2015-10-26 12:18:53</wp:comment_date>
    <wp:comment_date_gmt>2015-10-26 10:18:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] losing our fear of monads, a whole new world of possibilities has opened up. Today we&#8217;ll take a look at one specific [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1445854734.42860698699951171875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1445854810</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1445854810.50245189666748046875;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-10-26 10:18:53</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Traversable ops - partition, span y otras chicas del montón</title>
  <link>https://scalerablog.wordpress.com/2015/10/14/traversable-ops-partition-span-y-otras-chicas-del-monton/</link>
  <pubDate>Wed, 14 Oct 2015 10:00:08 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=750</guid>
  <description/>
  <content:encoded><![CDATA[¿Nunca te ha pasado que te encuentras con una colección y quieres quedarte con dos partes de la colección: la que cumple un cierto predicado y el resto? ¿Acabas recurriendo a un filter y un filterNot? Tranquilo, en la <del>teletienda</del> entrada de hoy, veremos algunos de los métodos más comunes para dividir colecciones.
<h2>takeWhile</h2>
Para una colección <code>Traversable[A]</code>, tenemos la notación:

[code language="scala"]
def takeWhile(p: A =&gt; Boolean): Traversable[A]
[/code]

Este método recibe como argumento la condición que deben cumplir los N primeros elementos a recolectar de la colección actual. <em>Don't worry</em>: se ve mejor con un ejemplo:

[code language="scala"]
val numbers = List(2, 4, 5, 6, 7)
val firstEven = numbers.takeWhile(_ % 2 == 0)
//List(2, 4)
[/code]

Como podéis ver, la lista que se obtiene es el resultado de obtener los primeros elementos de la colección mientras se cumpla la condición indicada.
<h2>dropWhile</h2>
Al igual que su hermano mayor, <code>dropWhile</code> recibe como argumento una función, solo que su comportamiento se basa en eliminar todos los elementos desde el principio, hasta que deje de darse la condición que pasamos como argumento.

Por ejemplo:

[code language="scala"]
val names = List(&quot;Julio&quot;, &quot;Jose&quot;, &quot;Alberto&quot;, &quot;Javier&quot;)
val survivors = names.dropWhile(_.startsWith(&quot;J&quot;))
//List(&quot;Alberto&quot;,&quot;Javier&quot;)
[/code]

Fijaros que aunque hay otros elementos en la lista que cumplen la condición, el método <code>dropWhile</code> solamente eliminará los N primeros elementos mientras que todos ellos cumplan la condición. En el momento en que esta aserción no puede ser comprobada, el método deja de eliminar elementos.
<h2>span</h2>
Pero como decíamos en la introducción, ¿qué ocurre si quiero aplicar una de estas funciones sin perder el resto de elementos? En ese caso tu amigo es <code>span</code>

Su notación es

[code language="scala"]
def span(p: A =&gt; Boolean): (Traversable[A], Traversable[A])
[/code]

Y su funcionamiento, para que os hagáis una idea, es como devolver para una colección <code>t</code> y un predicado (función) <code>f</code>, <code>(t takeWhile f, t dropWhile f)</code>, pero (y cito textualmente de la <a href="http://www.scala-lang.org/api/current/index.html#scala.collection.Traversable">documentación de Scala</a>) "posiblemente más eficiente".

Ejemplos, ejemplos everywhere...

[code language="scala"]
case class Event(timeStamp: Long)

val events: Stream[Event] = ???

val systemCrashTimestamp: Long = ???

val (eventsBeforeCrash,eventsAfterCrash) = 
  events.span(_.timeStamp &lt;= systemCrashTimeStamp)
[/code]

En este ejemplo, modelamos posibles eventos acontecidos en un sistema. Mediante un <code>Stream</code>, accedemos a los eventos acontecidos en el sistem a monitorizar. Por otra parte, se nos notifica del instante de un error fatal en el sistema (<code>systemCrashTimeStamp</code>).

<a href="https://scalerablog.files.wordpress.com/2015/10/942.jpg"><img class="aligncenter size-medium wp-image-754" src="https://scalerablog.files.wordpress.com/2015/10/942.jpg?w=222" alt="942" width="222" height="300" /></a>

Para separar los eventos que acontecieron antes del pete de la muerte, de los que siguieron después; usamos <code>span</code> (<em>et voilà!</em>)
<h2>partition</h2>
Ahora bien, si os fijasteis bien en los ejemplos que poníamos más arriba con <code>takeWhile</code> y <code>dropWhile</code> se podía intuir una problemática que consiste en separar los elementos que cumplen una cierta condición, de los que no; y takeWhile solo se quedaba con los primeros que lo cumplían, pero no con el resto.

Una primera aproximación, que seguro que alguno habréis usado antes de conocer el último método de este post, es la siguiente:

[code language="scala"]
val numbers = List(2, 3, 4, 5, 6, 7)

val isEven: Int =&gt; Boolean = _ % 2 == 0

val even = numbers.filter(isEven)

val odd = numbers.filterNot(isEven)
[/code]

Not bad. Pero al igual que con el método <code>span</code> podemos pensar en <code>partition</code> que para una colección <code>t</code> y un predicado (función) <code>f</code>, se comporta como sigue <code>(t filter f, t filterNot f)</code>; haciendo la implementación mucho más sencilla (<em>"y posiblemente más eficiente"</em>):

[code language="scala"]
val numbers = List(2, 3, 4, 5, 6, 7)

val isEven: Int =&gt; Boolean = _ % 2 == 0

val (even, odd) = numbers.partition(isEven)
[/code]

<a href="https://scalerablog.files.wordpress.com/2015/10/2395690.jpg"><img class="aligncenter size-medium wp-image-757" src="https://scalerablog.files.wordpress.com/2015/10/2395690.jpg?w=300" alt="2395690" width="300" height="300" /></a>

Hasta el próximo tip.
¡Yogur de limón!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>750</wp:post_id>
  <wp:post_date>2015-10-14 12:00:08</wp:post_date>
  <wp:post_date_gmt>2015-10-14 10:00:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>traversable-ops-partition-span-y-otras-chicas-del-monton</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="dropwhile"><![CDATA[dropwhile]]></category>
  <category domain="post_tag" nicename="faq"><![CDATA[faq]]></category>
  <category domain="post_tag" nicename="ops"><![CDATA[ops]]></category>
  <category domain="post_tag" nicename="partition"><![CDATA[partition]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="span"><![CDATA[span]]></category>
  <category domain="post_tag" nicename="takewhile"><![CDATA[takewhile]]></category>
  <category domain="post_tag" nicename="traversable"><![CDATA[traversable]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[15809249285]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/654239192252223488";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Codemotion 2015:  Akka voló sobre el nido del Future</title>
  <link>https://scalerablog.wordpress.com/2015/10/28/codemotion-2015-akka-volo-sobre-el-nido-del-future/</link>
  <pubDate>Wed, 28 Oct 2015 10:00:13 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=761</guid>
  <description/>
  <content:encoded><![CDATA[Antes del típico parón de verano (como en la Liga), comentamos en otra <a href="https://scalerablog.wordpress.com/2015/07/29/granizado-de-scala/" target="_blank">minientrada</a> la remota, vaga, ínfima posibilidad de daros la brasa en el <a href="http://www.codemotionworld.com/" target="_blank">Codemotion</a> de este año ...y confirmado queda: el <strong>viernes 27 de noviembre</strong> en el <strong>track 7</strong>(salvo cambios en la agenda por parte de la organización), ofreceremos la charla "<a href="http://2015.codemotion.es/agenda.html#5677904553836544/48514003" target="_blank">Akka voló sobre el nido del Future</a>".

En ella desvariaremos un poco sobre asíncronía en Scala y daremos una breve introducción al modelo de actores que implementa Akka.

Aquellos que tengáis la posibilidad de pasaros por Madrid sobre esas fechas, sois más que bienvenidos a este evento que, año tras año, parece que asisten y exponen más locos del mundillo Scala.

<a href="https://scalerablog.files.wordpress.com/2015/10/elluch-alguien-volo-sobre-el-nido-del-cuco.jpg"><img class="aligncenter size-medium wp-image-762" src="https://scalerablog.files.wordpress.com/2015/10/elluch-alguien-volo-sobre-el-nido-del-cuco.jpg?w=300" alt="Elluch-alguien-volo-sobre-el-nido-del-cuco" width="300" height="201" /></a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>761</wp:post_id>
  <wp:post_date>2015-10-28 12:00:13</wp:post_date>
  <wp:post_date_gmt>2015-10-28 10:00:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>codemotion-2015-akka-volo-sobre-el-nido-del-future</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_format" nicename="post-format-aside"><![CDATA[Minientrada]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[16288309386]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/659312235211128836";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Traversable ops - partition, span, among many other things</title>
  <link>https://scalerablog.wordpress.com/2015/10/19/traversable-ops-partition-span-among-many-other-things/</link>
  <pubDate>Mon, 19 Oct 2015 10:00:39 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=766</guid>
  <description/>
  <content:encoded><![CDATA[Has ever happened to you that you have a collection and you want to split it into two parts: one that satisfies certain assertion and the other one that doesn't? In that case, do you resort to use a filter and a filterNot? Don't worry, in this <del>teleshopping ad</del> post, we'll see some not-so-popular but common methods for splitting collections.

<h2>takeWhile</h2>

For a <code>Traversable[A]</code> collection, we have the following method:

[code language="scala"]
def takeWhile(p: A =&gt; Boolean): Traversable[A]
[/code]

It gets as parameter the condition that has to be checked by the first N elements to be collected from current collection. <em>Don't worry</em>, an example illustrates it better:

[code language="scala"]
val numbers = List(2, 4, 5, 6, 7)
val firstEven = numbers.takeWhile(_ % 2 == 0)
//List(2, 4)
[/code]

As you can see, the list you get is the result of getting the first elements in the collection while the given assertion is checked.

<h2>dropWhile</h2>

Like his elder brother, <code>dropWhile</code> receives as parameter a function, but its behavior is based on removing all elements from the beginning until the given condition is not checked.

E.g.:

[code language="scala"]
val names = List(&quot;Julio&quot;, &quot;Jose&quot;, &quot;Alberto&quot;, &quot;Javier&quot;)
val survivors = names.dropWhile(_.startsWith(&quot;J&quot;))
//List(&quot;Alberto&quot;,&quot;Javier&quot;)
[/code]

Even though there are some other elements in the list that check the condition, method <code>dropWhile</code> only drop the first N elements as long as they all check the condition. At the very first moment the assertion is not validated, the method stop removing elements.

<h2>span</h2>

But as we were talking at the introduction, what happens if I want to apply one of this functions without loosing the remaining elements in the collection? In that case, <code>span</code> is your friend.

Its signature is:

[code language="scala"]
def span(p: A =&gt; Boolean): (Traversable[A], Traversable[A])
[/code]

And the way it works, just to picture it, is returning, for a <code>t</code> collection and a constraint(function) <code>f</code>, <code>(t takeWhile f, t dropWhile f)</code>, but quoting  <a href="http://www.scala-lang.org/api/current/index.html#scala.collection.Traversable">Scala api</a>) "possibly[sic] more efficient than".

Examples, examples everywhere...

[code language="scala"]
case class Event(timeStamp: Long)

val events: Stream[Event] = ???

val systemCrashTimestamp: Long = ???

val (eventsBeforeCrash,eventsAfterCrash) = 
  events.span(_.timeStamp &lt;= systemCrashTimeStamp)
[/code]

In this example, we're modeling possible events that may happen to a system. By reading some <code>Stream</code>, we access all events that occurred to the system to monitorize. On the other hand, we're notified that some fatal-terrible error take place in the system (<code>systemCrashTimeStamp</code>).

<a href="https://scalerablog.files.wordpress.com/2015/10/942.jpg"><img class="aligncenter size-medium wp-image-754" src="https://scalerablog.files.wordpress.com/2015/10/942.jpg?w=222" alt="942" width="222" height="300" /></a>

For splitting events that took place before the death-fatal-error, from the other that happened later; we can use <code>span</code> (<em>et voilà!</em>)

<h2>partition</h2>

Ok then, if you looked closer before with <code>takeWhile</code> and <code>dropWhile</code> examples, a lil' problem could be inferred: if you split collections this way, takeWhile only took first elements that checked the condition, but not all of them.

A first logical approach (that you may have used at some point), is to write something like this:

[code language="scala"]
val numbers = List(2, 3, 4, 5, 6, 7)

val isEven: Int =&gt; Boolean = _ % 2 == 0

val even = numbers.filter(isEven)

val odd = numbers.filterNot(isEven)
[/code]

Not bad. But like method <code>span</code>, we can think about <code>partition</code> like a method that, given a collection called <code>t</code> and a function <code>f</code>, behaves as follows: <code>(t filter f, t filterNot f)</code>; making implementation much easier (and <em>"possibly[sic] more efficient than"</em>):

[code language="scala"]
val numbers = List(2, 3, 4, 5, 6, 7)

val isEven: Int =&gt; Boolean = _ % 2 == 0

val (even, odd) = numbers.partition(isEven)
[/code]

<a href="https://scalerablog.files.wordpress.com/2015/10/2395690.jpg"><img class="aligncenter size-medium wp-image-757" src="https://scalerablog.files.wordpress.com/2015/10/2395690.jpg?w=300" alt="2395690" width="300" height="300" /></a>

Until next tip.
Peace out!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>766</wp:post_id>
  <wp:post_date>2015-10-19 12:00:39</wp:post_date>
  <wp:post_date_gmt>2015-10-19 10:00:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>traversable-ops-partition-span-among-many-other-things</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="post_tag" nicename="dropwhile"><![CDATA[dropwhile]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="faq"><![CDATA[faq]]></category>
  <category domain="post_tag" nicename="ops"><![CDATA[ops]]></category>
  <category domain="post_tag" nicename="partition"><![CDATA[partition]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="span"><![CDATA[span]]></category>
  <category domain="post_tag" nicename="takewhile"><![CDATA[takewhile]]></category>
  <category domain="post_tag" nicename="traversable"><![CDATA[traversable]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[15975684521]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/656051918762934272";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Teoría de Cate-movidas: Mónada Reader</title>
  <link>https://scalerablog.wordpress.com/2015/10/21/teoria-de-cate-movidas-monada-reader/</link>
  <pubDate>Wed, 21 Oct 2015 15:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=773</guid>
  <description/>
  <content:encoded><![CDATA[Después de perder el miedo a las <a href="https://scalerablog.wordpress.com/2015/10/07/teoria-de-cate-movidas-monadas/">mónadas</a> se abre un mundo de posibilidades. Hoy vamos a ver una mónada en concreto: la mónada Reader. Esta mónada nos permitirá realizar inyección de dependencias en nuestra aplicación. Hace unas semanas vimos como utilizar el <a href="https://scalerablog.wordpress.com/2015/07/08/tarta-de-scala-al-estilo-tradicional/">Cake Pattern</a>. Si no te gustó demasiado, presta atención :)

La mónada Reader está presente en Scalaz, por lo que si queremos utilizarla, debemos importar esta librería en nuestro proyecto.

[code language="scala"]
import scalaz.Reader
[/code]

El constructor de la mónada Reader recibe una función unitaria, es decir, una función con un solo argumento. Con la mónada podemos trabajar con la función unitaria directamente y de forma transparente, como si fuera una instancia de tipo Function1.

[code language="scala"]
import scalaz.Reader

val plus100 = Reader((n: Int) =&gt; n + 100)
plus100(1) //101
[/code]

¿Y ya está? Pues no. La gracia de usar la mónada reader es que una vez instanciada podemos utilizar el método map para transformar el resultado de la función:

[code language="scala"]
import scalaz.Reader

val plus100 = Reader((n: Int) =&gt; n + 100)
plus100(1) //101

val doublePlus100 = plus100.map(_ * 2)
doublePlus100(1) //202
[/code]

<strong>¿Y cómo nos ayuda esto con la inyección de dependencias?</strong>

Utilizando esta mónada, podemos inyectar dependencias en un componente, al igual que hacíamos con el Cake Pattern. Vamos a utilizar un ejemplo sencillo. Aprovechando que se trata de la mónada Reader, vamos a utilizar un ejemplo basado en una biblioteca.

<a href="https://scalerablog.files.wordpress.com/2015/10/6400b4d28d122bfa1876eda6a27d169e.jpg"><img class="size-medium wp-image-776 aligncenter" src="https://scalerablog.files.wordpress.com/2015/10/6400b4d28d122bfa1876eda6a27d169e.jpg?w=300" alt="6400b4d28d122bfa1876eda6a27d169e" width="300" height="186" /></a>

En la biblioteca será necesario inyectar un repositorio. La implementación genérica será la siguiente:

[code language="scala"]
case class Book(isbn: String, name: String)

trait Repository {
  def get(isbn: String): Book
  def getAll: List[Book]
}
[/code]

Para inyectar la dependencia, se utilizará como parámetro de entrada de la función unitaria el repositorio de forma genérica.

[code language="scala"]
trait Library {
  import scalaz.Reader

  def getBook(isbn: String) =
    Reader(
      (repository: Repository) =&gt; repository.get(isbn)
    )

  def getAllBooks =
    Reader(
      (repository: Repository) =&gt; repository.getAll
    )
}
[/code]

Más adelante, vamos a querer conocer determinada información de los libros, por ejemplo, el nombre. Para ello se utilizará la función map, que nos permitirá cambiar el resultado de la consulta.

[code language="scala"]
object LibraryInfo extends Library {

  def bookName(isbn: String) =
    getBook(isbn) map (_.name)

}
[/code]

Finalmente, vamos a utilizar esta información por ejemplo en una API REST:

[code language="scala"]
import scalaz.Reader

class UniversityApp(repository: Repository) extends Library {
  
  //GET ~/books/{id}/name
  def getBookName(isbn: String) =
    run(LibraryInfo.bookName(isbn))

  //GET ~/books/
  def getAll = run(getAllBooks)

  private def run[A](reader: Reader[Repository, A]): String = {
    reader(repository).toString
  }
}

object UniversityApp extends UniversityApp(new RepositoryImpl{})
[/code]

Lo más importante es el método privado <em>run</em>. Este método es el encargado de aplicar el repositorio implementado en cada una de las mónadas readers que hemos definido en nuestro programa.

Además, utilizamos un argumento en nuestra aplicación para definir la implementación del repositorio que queremos inyectar. De esta manera, podemos inyectar un repositorio de prueba cuando tengamos que hacer tests, facilitando en gran medida la construcción de los mismos.

¡Esto es todo amigos!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>773</wp:post_id>
  <wp:post_date>2015-10-21 17:00:00</wp:post_date>
  <wp:post_date_gmt>2015-10-21 15:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>teoria-de-cate-movidas-monada-reader</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="advanced"><![CDATA[advanced]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="monad"><![CDATA[monad]]></category>
  <category domain="post_tag" nicename="reader"><![CDATA[reader]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[16055260234]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/656853941385211904";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>73</wp:comment_id>
    <wp:comment_author><![CDATA[miguelbucarest]]></wp:comment_author>
    <wp:comment_author_email>miguel.s.address@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.32.235.74</wp:comment_author_IP>
    <wp:comment_date>2016-02-12 17:40:26</wp:comment_date>
    <wp:comment_date_gmt>2016-02-12 15:40:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hola!

Como siempre gracias por los posts :-D

para la funcion run hay algo que no entiendo,
 
private def run[A](reader: Reader[Repository, A]): String = {
    reader(repository).toString
}

por que se define el reader de tipo Reader[Repository, A]?

en getAllBooks veo que lo que devuelve es un Reader que recibe/usa el repositorioRepositoryImpl que se creó 

def getAllBooks =
    Reader(
      (repository: Repository) =&gt; repository.getAll
    )

object UniversityApp extends UniversityApp(new RepositoryImpl{})

Pero me chirría el segundo tipo A... qué me estoy perdiendo?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>14635623</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1455291627</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1455291627.972424030303955078125;s:5:"event";s:9:"check-ham";s:4:"user";s:14:"miguelbucarest";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1455291628</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-02-12 15:40:26</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>75</wp:comment_id>
    <wp:comment_author><![CDATA[dvallejonava]]></wp:comment_author>
    <wp:comment_author_email>d.vallejo.nava@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>95.121.137.201</wp:comment_author_IP>
    <wp:comment_date>2016-02-13 13:07:14</wp:comment_date>
    <wp:comment_date_gmt>2016-02-13 11:07:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Gracias por el apoyo al blog :)

La mónada Reader está parametrizada mediante dos parámetros distintos. Lo puedes ver como una función de un solo argumento. Por tanto: Reader[A, B] será una función de tipo A -&gt; B, donde, dado un A podremos ser capaces de obtener algo de tipo B.

Si por ejemplo definimos una mónada Reader que dado un Repositorio nos devuelva un libro, el tipo de la mónada será Reader[Repository, Book].  Este sería el caso del método getBook. Por otro lado, el método getAllBooks será una mónada Reader de tipo Reader[Repository, List[Book]]. 

Debido a que queremos crear un método run que pueda ser utilizado con cualquiera de las dos mónadas, definimos que se utilizará para mónadas Reader de tipo [Repository, A], y que el tipo de salida se infiera directamente en función de si utilizamos getBook o getAllBooks.

Gracias por tu feedback ;)

Un saludo]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>73</wp:comment_parent>
    <wp:comment_user_id>81583895</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1455361634</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1455361634.31198406219482421875;s:5:"event";s:9:"check-ham";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1455361634</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-02-13 11:07:14</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Abstract alge... what? The Reader monad</title>
  <link>https://scalerablog.wordpress.com/2015/10/26/abstract-alge-what-the-reader-monad/</link>
  <pubDate>Mon, 26 Oct 2015 10:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=778</guid>
  <description/>
  <content:encoded><![CDATA[By losing our fear of <a href="https://scalerablog.wordpress.com/2015/10/12/abstract-alge-what-monads/">monads</a>, a whole new world of possibilities has opened up. Today we'll take a look at one specific monad: the Reader monad. This monad will allow us to perform the dependency injection in our application.A few weeks ago we saw how to use <a href="https://scalerablog.wordpress.com/2015/07/13/traditionally-baked-scala-cake/">Cake Pattern</a>. If you didn't like that that much, pay attention :)

The monad Reader belongs to Scalaz and thus, if we want to use it, we have to import this library in our project.

[code language="scala"]
import scalaz.Reader
[/code]

The constructor of the Reader monad gets a unary function as input, that is, a function with just one argument. With the monad, we'll be able to work with the unary function in a direct and transparent way, as if it were an instance of the Function1 type.

[code language="scala"]
import scalaz.Reader

val plus100 = Reader((n: Int) =&gt; n + 100)
plus100(1) //101
[/code]

And that's all? Well, no. The good thing about using the Reader monad is that once it is instantiated, we can use the map method to transform the result of the function:

[code language="scala"]
import scalaz.Reader

val plus100 = Reader((n: Int) =&gt; n + 100)
plus100(1) //101

val doublePlus100 = plus100.map(_ * 2)
doublePlus100(1) //202
[/code]

<strong>And how can this be helpful with dependency injection?</strong>

By using this monad, we'll be able to inject dependencies in a component, same thing that we could do with Cake Pattern. Let's look at a simple example. Since we're talking about the Reader monad, let's use an example based on a library.

<a href="https://scalerablog.files.wordpress.com/2015/10/6400b4d28d122bfa1876eda6a27d169e.jpg"><img class="size-medium wp-image-776 aligncenter" src="https://scalerablog.files.wordpress.com/2015/10/6400b4d28d122bfa1876eda6a27d169e.jpg?w=300" alt="6400b4d28d122bfa1876eda6a27d169e" width="300" height="186" /></a>

It is required that our library has a repository injected to it. The generic implementation will be the following one:

[code language="scala"]
case class Book(isbn: String, name: String)

trait Repository {
  def get(isbn: String): Book
  def getAll: List[Book]
}
[/code]

In order to inject the dependency, the repository will be used as input argument to the unary function in a generic way.

[code language="scala"]
trait Library {
  import scalaz.Reader

  def getBook(isbn: String) =
    Reader(
      (repository: Repository) =&gt; repository.get(isbn)
    )

  def getAllBooks =
    Reader(
      (repository: Repository) =&gt; repository.getAll
    )
}
[/code]

Further on, we may want to know some information about the books, for instance, the title. For that, map function will be used, which will allow us to modify the result of the query.

[code language="scala"]
object LibraryInfo extends Library {

  def bookName(isbn: String) =
    getBook(isbn) map (_.name)

}
[/code]

Eventually, we will use that information, for example, in a REST API:

[code language="scala"]
import scalaz.Reader

class UniversityApp(repository: Repository) extends Library {
  
  //GET ~/books/{id}/name
  def getBookName(isbn: String) =
    run(LibraryInfo.bookName(isbn))

  //GET ~/books/
  def getAll = run(getAllBooks)

  private def run[A](reader: Reader[Repository, A]): String = {
    reader(repository).toString
  }
}

object UniversityApp extends UniversityApp(new RepositoryImpl{})
[/code]

The most important thing here is the private method <em>run</em>. This method is the one in charge of applying the implemented repository to every Reader monad that we have defined in our program.

Besides, we use an argument in our application to define the implementation of the repository we want to inject. This way, we can inject a test repository when tests need to be performed, facilitating to a great extent the construction of them.

That's all folks!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>778</wp:post_id>
  <wp:post_date>2015-10-26 12:00:00</wp:post_date>
  <wp:post_date_gmt>2015-10-26 10:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>abstract-alge-what-the-reader-monad</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="advanced"><![CDATA[advanced]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="monad"><![CDATA[monad]]></category>
  <category domain="post_tag" nicename="reader"><![CDATA[reader]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[16217472156]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/658588581842190337";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Curry, por favor...</title>
  <link>https://scalerablog.wordpress.com/2015/11/04/curry-por-favor/</link>
  <pubDate>Wed, 04 Nov 2015 10:00:53 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=796</guid>
  <description/>
  <content:encoded><![CDATA[Uno de los aportes de Scala de los que no podemos dejar pasar la ocasión de hablar acerca de ellos es el currying.

<a href="https://scalerablog.files.wordpress.com/2015/11/4252082-curry.jpg"><img class="aligncenter size-medium wp-image-805" src="https://scalerablog.files.wordpress.com/2015/11/4252082-curry.jpg?w=300" alt="4252082-curry" width="300" height="225" /></a>
<h2>La teoría</h2>
Si tenemos una función <code>(T,U) =&gt; V</code>, currificar la función supone descomponer la función en otra más sencilla que permite construir el resultado de manera incremental. En este caso pasaríamos a tener una función <code>T =&gt; (U =&gt; V)</code>, es decir, a partir de un <code>T</code> obtenemos una función que solo necesita un <code>U</code> para generar un <code>V</code>. ¿Lioso? Veámoslo mejor con el siguiente ejemplo.

Supongamos que tenemos una <code>case class</code> que modela un estudiante:

[code language="scala"]
case class Student(
  name: String,
  age: Int,
  enrolled: Boolean)
[/code]

Podríamos tener adicionalmente un método que nos instanciara un estudiante como, por ejemplo, el método <code>apply</code> que se ha generado automáticamente para la <code>case class</code>:

[code language="scala"]
//Auto generated code below
object Student {

  def apply(
    name: String, 
    age: Int, 
    enrolled: Boolean): Student =
    new Student(name, age, enrolled)

}
[/code]

Utilizando dicho método, podemos construir un estudiante como sigue:

[code language="scala"]
Student(&quot;john&quot;, 18, enrolled=true)
[/code]

Hasta aquí fácil. Ahora supongamos la siguiente situación:
<blockquote>En nuestro proceso de admisión de alumnos, el candidato tiene que pasar por una serie de ventanillas para aportar su documentación poco a poco (en la ventanilla A indicaría el nombre, en la ventanilla B indicaría la edad; y en la ventanilla C le daríamos el visto bueno, o no, para formar parte de la escuela).</blockquote>
<h2>Primera aproximación: Hacer clases es gratis</h2>
Podemos definir nuestras ventanillas como alias de funciones transformadoras. Es decir:

[code language="scala"]
type WindowA = String =&gt; NotAStudientYet
type WindowB = (NotAStudentYet, Int) =&gt; AlmostAStudent
type WindowC = (AlmostAStudent, Boolean) =&gt; Student

case class NotAStudentYet(name: String)
case class AlmostAStudent(name: String, age: Int)
[/code]

Fijaros que, por una parte, las ventanillas se representan mediante funciones.
La primera ventanilla es una función que, a partir de un nombre, genera algo "que aún no es estudiante".
La segunda ventanilla, teniendo algo "que aún no es estudiante" y recibiendo una edad, devuelve algo que "casi es un estudiante".
Y la última ventanilla recibe algo "que casi es un estudiante" y una aprobación de admisión (aprobada o denegada) y genera un estudiante.

Para ello, en esta primera aproximación, hemos generado dos case classes nuevas, que van a servir de acumuladores, para finalmente crear un estudiante.

La implementación sería algo del estilo:

[code language="scala"]
val windowA: WindowA = 
  (name) =&gt; 
    NotAStudentYet(name)

val windowB: WindowB = 
  (notStudent, age) =&gt; 
    AlmostStudent(notStudent.name, age)

val windowC: WindowC = 
  (almost, enrolled) =&gt; 
    Student(almost.name, almost.age, enrolled)
[/code]

...sinceramente, no es posible que para hacer tal cosa tengamos que definirnos dos clases adicionales. Optemos por dar otro enfoque.
<h2>Segunda aproximación: Funciones, funciones everywhere ...</h2>
Probemos a definir funciones que devuelvan otras funciones (funciones de orden superior):

[code language="scala"]
type WindowA = String =&gt; WindowB
type WindowB = Int =&gt; WindowC
type WindowC = Boolean =&gt; Student

val windowA: WindowA = 
  (name: String) =&gt; {
    val windowB: WindowB =
      (age: Int) =&gt; {
        val windowC: WindowC =
          (enrolled: Boolean) =&gt;
            Student(name, age, enrolled)
        windowC
      }
    windowB
  }
[/code]

Fijaros que a partir de pequeñas funciones, vamos dando valores a los parámetros que construirán nuestro estudiante. Es más fácil si intentamos leerlo desde la función más interior a la mas exterior(primero <code>windowC</code>, después <code>windowB</code> y finalmente <code>windowA</code>). Para invocar nuestra función basta con ejecutar:

[code language="scala"]
val student = windowA(&quot;john&quot;)(18)(true)
[/code]

<h2>Tercera aproximación: ¿Seguro que no existe nada que haga esto?</h2>
Por supuesto que lo hay. Dentro del companion de <code>Function</code> en Scala, se encuentra el método <code>curried</code>, cuyo cometido es descomponer una función que recibe N argumentos en N funciones concatenadas, como veíamos al principio del post, y en el último ejemplo.

Para aplicar esta maravilla al ejemplo expuesto bastaría con escribir:

[code language="scala"]
val f = (Sudent.apply _).curried
//f: String =&gt; (Int =&gt; (Boolean =&gt; Student))

f(&quot;john&quot;)(18)(true)
//Student(&quot;john&quot;, 18, true)
[/code]

Existe además la función inversa <code>uncurried</code>, que dadas N funciones encadenadas, por ejemplo, <code>Int =&gt; (String =&gt; (Boolean =&gt; Double)))</code> devuelve una única función que recibe N argumentos: <code>(Int, String, Boolean) =&gt; Double</code>:

[code language="scala"]
val myApply = Function.uncurried(f)
//myApply: (String, Int, Boolean) =&gt; Student

myApply(&quot;john&quot;,18,true)
//Student(&quot;john&quot;,18,true)
[/code]

Fácil, sencillo y para toda la familia.
Agur de limón :-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>796</wp:post_id>
  <wp:post_date>2015-11-04 12:00:53</wp:post_date>
  <wp:post_date_gmt>2015-11-04 10:00:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>curry-por-favor</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="post_tag" nicename="case"><![CDATA[case]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="class"><![CDATA[class]]></category>
  <category domain="post_tag" nicename="currify"><![CDATA[currify]]></category>
  <category domain="post_tag" nicename="function"><![CDATA[function]]></category>
  <category domain="post_tag" nicename="method"><![CDATA[method]]></category>
  <category domain="post_tag" nicename="partial"><![CDATA[partial]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[16524027318]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/661849169049485312";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>40</wp:comment_id>
    <wp:comment_author><![CDATA[Chema Cortés]]></wp:comment_author>
    <wp:comment_author_email>pych3m4@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://ch3m4.org</wp:comment_author_url>
    <wp:comment_author_IP>195.55.130.66</wp:comment_author_IP>
    <wp:comment_date>2015-11-04 18:27:58</wp:comment_date>
    <wp:comment_date_gmt>2015-11-04 16:27:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Umm! Imaginemos que en alguna de las "ventanillas" se produjera un error (pe: que la edad estuviera limitada a menores de 25 años). El control de errores haría que la currificación perdiera la elegancia que le ves.

El problema que planteas lo veo más un caso para usar "monads" que para currificación, o mejor para para un "Future[Student]".]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1446654478.558764934539794921875;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"pych3m4";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1446654478</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>16533597903</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1446655081</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1446655081</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1446655082.1736619472503662109375;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-11-04 16:27:58</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>41</wp:comment_id>
    <wp:comment_author><![CDATA[jpaniego]]></wp:comment_author>
    <wp:comment_author_email>javiersantospaniego@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>207.228.179.133</wp:comment_author_IP>
    <wp:comment_date>2015-11-04 18:59:43</wp:comment_date>
    <wp:comment_date_gmt>2015-11-04 16:59:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[En efecto, en ningún momento se ha tenido en cuenta la validación en los ejemplos. 
Tuvimos dudas sobre enlazar el tema con la mónada Reader, de la cual habló David en otro post, pero para ser un tema que hemos etiquetado como "beginner", nos parecía un poco heavy enlazar ambos conceptos.

Gracias por tu comentario :-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>40</wp:comment_parent>
    <wp:comment_user_id>59615419</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1446656383</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1446656384.3413848876953125;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>16534153225</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1446656385</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-11-04 16:59:43</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Curry, please...</title>
  <link>https://scalerablog.wordpress.com/2015/11/09/curry-please/</link>
  <pubDate>Mon, 09 Nov 2015 10:00:48 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=811</guid>
  <description/>
  <content:encoded><![CDATA[One of the Scala's rock starts that we cannot miss the chance to speak about is currying.

<a href="https://scalerablog.files.wordpress.com/2015/11/4252082-curry.jpg"><img class="aligncenter size-medium wp-image-805" src="https://scalerablog.files.wordpress.com/2015/11/4252082-curry.jpg?w=300" alt="4252082-curry" width="300" height="225" /></a>
<h2>What theory says</h2>
If we have a function <code>(T,U) =&gt; V</code>, currying it implies decomposing the function in a simpler one that allows building the result incrementally. In that case, we would get a function <code>T =&gt; (U =&gt; V)</code>, what means that, from a <code>T</code> value we get a function whose only need is a <code>U</code> value for generating a <code>V</code> one. Messy? Let's take a better look with next example.

Let's suppose that we have a <code>case class</code> for modeling the student entity:

[code language="scala"]
case class Student(
  name: String,
  age: Int,
  enrolled: Boolean)
[/code]

We could have a method for instantiate a student: oh wait, like method <code>apply</code>, which has been automatically generated by creating the <code>case class</code>:

[code language="scala"]
//Auto generated code below
object Student {

  def apply(
    name: String, 
    age: Int, 
    enrolled: Boolean): Student =
    new Student(name, age, enrolled)

}
[/code]

By using such method, we can create a <code>Student</code> as shown below:

[code language="scala"]
Student(&quot;john&quot;, 18, enrolled=true)
[/code]

So easy so far. So let's imagine next requirement:
<blockquote>In our student admission process, the candidate has to provide his/her personal data sequentially in a set of windows (At window A name must be provided. At window B so must the age. And finally, at window C, we would admit or not the candidate by setting the 'enrolled' attribute).</blockquote>
<h2>First approach: Classes are free!</h2>
We can define our windows as type aliases of transforming functions (so redundant...). I mean:

[code language="scala"]
type WindowA = String =&gt; NotAStudientYet
type WindowB = (NotAStudentYet, Int) =&gt; AlmostAStudent
type WindowC = (AlmostAStudent, Boolean) =&gt; Student

case class NotAStudentYet(name: String)
case class AlmostAStudent(name: String, age: Int)
[/code]

Take a look that windows are represented as functions.
So first window is a function that, given a name, it generates a "not-a-student-yet-like" object.
Second window takes as parameters a NotAStudientYet and the age of the subject, and it returns an "almost-a-student".
And the last one takes an "almost-a-student" and an admission or rejection parameter, which will finally allow generating a Student.

So for our purpose, with this first approach, we have created a couple of new classes that will be used as data-accumulators for, at the end, creating a Student.

The implementation should look like:

[code language="scala"]
val windowA: WindowA = 
  (name) =&gt; 
    NotAStudentYet(name)

val windowB: WindowB = 
  (notStudent, age) =&gt; 
    AlmostStudent(notStudent.name, age)

val windowC: WindowC = 
  (almost, enrolled) =&gt; 
    Student(almost.name, almost.age, enrolled)
[/code]

...sincerely, there's no way to think that for doing such a thing, we have define additional classes. Let's try another way.
<h2>Second approach: functions, functions everywhere ...</h2>
Let's have a try to defining functions that return another functions (higher order functions):

[code language="scala"]
type WindowA = String =&gt; WindowB
type WindowB = Int =&gt; WindowC
type WindowC = Boolean =&gt; Student

val windowA: WindowA = 
  (name: String) =&gt; {
    val windowB: WindowB =
      (age: Int) =&gt; {
        val windowC: WindowC =
          (enrolled: Boolean) =&gt;
            Student(name, age, enrolled)
        windowC
      }
    windowB
  }
[/code]

By using a bunch of little functions, we're setting values to all parameters that will build our Student. It's pretty easier if we try to read the code from the most inside function to the most outside one (first <code>windowC</code>, then <code>windowB</code> and finally <code>windowA</code>). For invoking our function it's enough with executing:

[code language="scala"]
val student = windowA(&quot;john&quot;)(18)(true)
[/code]

<h2>Third approach: U sure there's nothing existing for this?</h2>
Of course it is. Inside the <code>Function</code> companion object in Scala, you can find <code>curried</code> method, which purpose is to separate a function that takes N parameters, in N concatenated functions, as we were previously discussing and with the last example as well.

For applying this wonder to the exposed example, it's as easy as writing:

[code language="scala"]
val f = (Sudent.apply _).curried
//f: String =&gt; (Int =&gt; (Boolean =&gt; Student))

f(&quot;john&quot;)(18)(true)
//Student(&quot;john&quot;, 18, true)
[/code]

The reverse function called <code>uncurried</code> can also be found at the same <code>Function</code> companion object, so that N concatenated functions, for example, <code>Int =&gt; (String =&gt; (Boolean =&gt; Double)))</code> are converted to a single function that takes N different parameters: <code>(Int, String, Boolean) =&gt; Double</code>:

[code language="scala"]
val myApply = Function.uncurried(f)
//myApply: (String, Int, Boolean) =&gt; Student

myApply(&quot;john&quot;,18,true)
//Student(&quot;john&quot;,18,true)
[/code]

Easy peasy.
Peace out! :-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>811</wp:post_id>
  <wp:post_date>2015-11-09 12:00:48</wp:post_date>
  <wp:post_date_gmt>2015-11-09 10:00:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>curry-please</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="post_tag" nicename="case"><![CDATA[case]]></category>
  <category domain="post_tag" nicename="class"><![CDATA[class]]></category>
  <category domain="post_tag" nicename="currify"><![CDATA[currify]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="function"><![CDATA[function]]></category>
  <category domain="post_tag" nicename="method"><![CDATA[method]]></category>
  <category domain="post_tag" nicename="partial"><![CDATA[partial]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[16679728477]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/663664157384818688";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Akka: Varias formas de matar a un actor</title>
  <link>https://scalerablog.wordpress.com/2015/11/11/varias-formas-de-matar-a-un-actor/</link>
  <pubDate>Wed, 11 Nov 2015 14:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=815</guid>
  <description/>
  <content:encoded><![CDATA[A pesar de que ya han pasado algunos días desde Halloween, hoy podremos saciar nuestro instinto asesino.

<img class="size-full wp-image-817 aligncenter" src="https://scalerablog.files.wordpress.com/2015/11/17c8f21e452c8161a7f19b8fc3f7d1a5.jpg" alt="17c8f21e452c8161a7f19b8fc3f7d1a5" width="250" height="250" />

En este post volvemos a tocar el toolkit Akka, diseñado para crear aplicaciones distribuidas utilizando actores. Dichos actores funcionan muy bien y son muy útiles pero llega un momento en el que hay que acabar con ellos. ¿Cómo podemos hacerlo? ¿Podemos hacer que parezca un accidente? ¿Son muy resistentes al cianuro? Hoy esperamos responder a alguna de estas preguntas.

<strong>Forma 1: Envenenamiento</strong>

<a href="https://scalerablog.files.wordpress.com/2015/11/tumblr_n6da8xjdli1t4x1pbo1_500.gif"><img class="size-medium wp-image-821 aligncenter" src="https://scalerablog.files.wordpress.com/2015/11/tumblr_n6da8xjdli1t4x1pbo1_500.gif?w=300" alt="tumblr_n6da8xJdLi1t4x1pbo1_500" width="300" height="211" /></a>

Lo más sencillo que podemos hacer para matar a un actor es enviarle un mensaje de tipo <em>PoisonPill. </em>De esta forma, en cuanto se trate el mensaje, el actor morirá.

[code language="scala"]
seanBeanCharacter ! PoisonPill
[/code]

Este mecanismo no sirve sólo para el asesinato, sino también para el suicidio. Para ello basta con que el actor se envíe a si mismo un PoisonPill.

[code language="scala"]
self ! PoisonPill
[/code]

<strong>Forma 2: Parada cardiaca</strong>

<img class="size-medium wp-image-820 aligncenter" src="https://scalerablog.files.wordpress.com/2015/11/jack-30-rock-heart-attack-study.gif?w=300" alt="jack-30-rock-heart-attack-study" width="300" height="174" />

Otra opción que tenemos es parar el actor. Para ello podemos hacer uso del método stop.

[code language="scala"]
context.stop(seanBeanCharacter)
[/code]

La diferencia fundamental entre utilizar un <em>PoisonPill</em> y una llamada al método <em>stop</em>, es que el método <em>stop </em>realiza una parada inmediata del actor. En el caso de las <em>PoisonPill</em>, al ser un mensaje más que recibe el actor, es necesario esperar a que se trate dicho mensaje para que el actor muera.

<strong>Forma 3: Provocar una hemorragia interna</strong>

<img class="size-medium wp-image-819 aligncenter" src="https://scalerablog.files.wordpress.com/2015/11/tumblr_mk2nondhhx1qasthro1_r1_500.gif?w=300" alt="tumblr_mk2nondHhx1qasthro1_r1_500" width="300" height="187" />

Finalmente, podemos hacer que un actor sufra una excepción enviandole el mensaje de tipo Kill.

[code language="scala"]
seanBeanCharacter ! Kill
[/code]

Este mensaje, cuando sea tratado por el actor, generará una excepción de tipo <em>ActorKilledException</em>. Este tipo de muerte lo podemos usar cuando queramos manejar este tipo de excepción en la política de supervisión. Es posible decidir que acción realizará un supervisor cuando un actor suyo lance una excepción de este tipo.

<strong>Última voluntad</strong>

Todos los actores, por muy mal que sea la película, tienen derecho a una última voluntad. Dicha última voluntad está materializada por una serie de acciones, como parar a los actores que tiene bajo su supervisión. Además, es posible añadir funcionalidad propia sobrescribiendo el método <strong><em>postStop</em></strong>.

Y esto es todo. Solo recordad una cosa. Si usáis alguna de estas técnicas, en ningún caso conocéis a los chicos de Scalera :p]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>815</wp:post_id>
  <wp:post_date>2015-11-11 16:00:00</wp:post_date>
  <wp:post_date_gmt>2015-11-11 14:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>varias-formas-de-matar-a-un-actor</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="actors"><![CDATA[actors]]></category>
  <category domain="post_tag" nicename="akka"><![CDATA[akka]]></category>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[16753010032]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/664442616394592256";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Scalera wants you</title>
  <link>https://scalerablog.wordpress.com/2015/11/25/scalera-wants-you/</link>
  <pubDate>Wed, 25 Nov 2015 10:00:05 +0000</pubDate>
  <dc:creator>scalerablog</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=832</guid>
  <description/>
  <content:encoded><![CDATA[Si cumples los básicos requisitos del puzzle (edad de 0 a 99+) y tienes conocimientos sobre Scala e ideas locas que contar a los demás: te estamos buscando.

<a href="https://scalerablog.files.wordpress.com/2015/11/scalerawantsyou.png"><img class="aligncenter wp-image-836" src="https://scalerablog.files.wordpress.com/2015/11/scalerawantsyou.png?w=700" alt="scalerawantsyou" width="450" height="606" /></a>

Vista la buena acogida del blog entre la gente, nos gustaría haceros aún más partícipes. Es por eso que ponemos en marcha esta iniciativa para buscar colaboradores con ganas de compartir conocimientos, ideas prácticas, soluciones a problemas comunes sobre Scala y su ecosistema. Si contribuyes al blog con al menos 3 posts publicados, te obsequiaremos con la exclusiva, a la par que casual, camiseta del staff de Scalera.

<a href="https://scalerablog.files.wordpress.com/2015/11/tshirt_proposals-02.png"><img class="aligncenter wp-image-839 size-large" src="https://scalerablog.files.wordpress.com/2015/11/tshirt_proposals-02.png?w=700" alt="tshirt_proposals-02" width="700" height="398" /></a>

Si estás interesado:
<span style="text-decoration:underline;"><strong>scalerablog at gmail dot com</strong></span>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>832</wp:post_id>
  <wp:post_date>2015-11-25 12:00:05</wp:post_date>
  <wp:post_date_gmt>2015-11-25 10:00:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scalera-wants-you</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="add"><![CDATA[add]]></category>
  <category domain="post_tag" nicename="author"><![CDATA[author]]></category>
  <category domain="post_tag" nicename="blog"><![CDATA[blog]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="collaboration"><![CDATA[collaboration]]></category>
  <category domain="post_tag" nicename="post"><![CDATA[post]]></category>
  <category domain="post_format" nicename="post-format-aside"><![CDATA[Minientrada]]></category>
  <category domain="post_tag" nicename="recruitment"><![CDATA[recruitment]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/669456554337419264";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[17184797855]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Akka: Several ways to kill an actor</title>
  <link>https://scalerablog.wordpress.com/2015/11/16/844/</link>
  <pubDate>Mon, 16 Nov 2015 10:00:00 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=844</guid>
  <description/>
  <content:encoded><![CDATA[Though it has been a few days since Halloween, today we will be able to satisfy our killer instinct.

<img class="size-full wp-image-817 aligncenter" src="https://scalerablog.files.wordpress.com/2015/11/17c8f21e452c8161a7f19b8fc3f7d1a5.jpg" alt="17c8f21e452c8161a7f19b8fc3f7d1a5" width="250" height="250" />

In this post we go back to playing with Akka, the toolkit designed to create distributed applications using actors. Actors work very well and are very helpful but the time comes when you have to kill them. How can we do it? Can we make it look like an accident? Are they highly resistant to cyanide? Today we hope to answer some of these questions.

<strong>First way: Poisoning</strong>

<a href="https://scalerablog.files.wordpress.com/2015/11/tumblr_n6da8xjdli1t4x1pbo1_500.gif"><img class="size-medium wp-image-821 aligncenter" src="https://scalerablog.files.wordpress.com/2015/11/tumblr_n6da8xjdli1t4x1pbo1_500.gif?w=300" alt="tumblr_n6da8xJdLi1t4x1pbo1_500" width="300" height="211" /></a>

The simplest thing you can do in order to kill an actor is send a message of <em>PoisonPill</em> type. As soon as the message is handled, the actor dies.

[code language="scala"]
seanBeanCharacter ! PoisonPill
[/code]

This mechanism does not only work for murder, but also for suicide. An actor can send a PoisonPill message to himself.

[code language="scala"]
self ! PoisonPill
[/code]

<strong>Second way: Cardiac arrest</strong>

<img class="size-medium wp-image-820 aligncenter" src="https://scalerablog.files.wordpress.com/2015/11/jack-30-rock-heart-attack-study.gif?w=300" alt="jack-30-rock-heart-attack-study" width="300" height="174" />

Another option we have is to stop the actor. For this purpose, we use the stop method.

[code language="scala"]
context.stop(seanBeanCharacter)
[/code]

The fundamental difference between using a <em> PoisonPill </em> and calling the <em>stop</em> method, is that the method <em> stop </em> performs an immediate stop of the actor. In the case of <em> PoisonPill </em>, because it is just another message in the mailbox, it is necessary to wait for it to be handled.

<strong>Third way: Cause an internal bleeding</strong>

<img class="size-medium wp-image-819 aligncenter" src="https://scalerablog.files.wordpress.com/2015/11/tumblr_mk2nondhhx1qasthro1_r1_500.gif?w=300" alt="tumblr_mk2nondHhx1qasthro1_r1_500" width="300" height="187" />

Finally, we can make an actor throw an exception, by sending him a message of type Kill.

[code language="scala"]
seanBeanCharacter ! Kill
[/code]

This message, when handled by the actor, forces an exception of type <em> ActorKilledException </em>to be thrown. We can use this kind of killing when we want to handle this type of emergency in the supervision policy. You are allowed to decide what action has to be performed by a supervisor when a player throws an exception of this kind.

<strong>Last will</strong>

All actors, no matter how bad the film is, are entitled to a last will. This last will is materialized by a series of actions, such as stopping the actors it has under its supervision. It is also possible to add customized functionality by overwriting the <strong> <em> poststop </em> </strong> method.

And that's all for now. Just remember one thing. May you use any of these techniques, you don't know the Scalera guys at all :P]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>844</wp:post_id>
  <wp:post_date>2015-11-16 12:00:00</wp:post_date>
  <wp:post_date_gmt>2015-11-16 10:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>844</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="actors"><![CDATA[actors]]></category>
  <category domain="post_tag" nicename="akka"><![CDATA[akka]]></category>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/666197289187196928";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[16901552205]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Shapeless: Introducción y HLists (Parte 1)</title>
  <link>https://scalerablog.wordpress.com/2015/11/18/shapeless-introduccion-y-hlists-parte-1/</link>
  <pubDate>Wed, 18 Nov 2015 15:00:18 +0000</pubDate>
  <dc:creator>javifdev</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=858</guid>
  <description/>
  <content:encoded><![CDATA[Mis buenos amigos de Scalera me preguntaron si quería escribir un post para el blog, y me hicieron una oferta que no pude rechazar, <em>"Te invitamos a una cerveza"</em> dijeron... ¡y aquí estoy! No puedo decir que no a <del>una buena cerveza</del> un buen amigo. Este es el primer post que escribo relacionado con Scala, así que tened paciencia conmigo.
<h2>¿Qué es Shapeless?</h2>
Shapeless es una librería creada por Miles Sabin, cuyo propósito es mejorar la programación genérica en Scala.

<img class=" wp-image-881 aligncenter" src="https://scalerablog.files.wordpress.com/2015/11/post3_sp.jpg" alt="post3_sp" width="288" height="352" />

Para conseguirlo utiliza una serie de macros y técnicas avanzadas a nivel del sistema de tipos, que muchos simplemente llaman whitchcraft (brujería), que llevan al lenguaje al límite. Hay muchos temas que tratar cuando hablamos de Shapeless, pero en esta primera parte nos vamos a centrar en los principios básicos, la estructura más popular... sí, estás en lo cierto, ¡estoy hablando de las <code>HList</code>s!
<h2>HLists</h2>
Esta es probablemente la característica más famosa de Shapeless, y el mejor punto de partida (en mi opinión) para empezar, así que comencemos introduciendo qué es una <code>HList</code>.

El nombre <code>HList</code> proviene de <em>Heterogeneous List</em> (listas heterogeneas), en otras palabras, una lista con elementos que pueden ser de distinto tipo. Eso es todo, el concepto es muy simple, pero las consecuencias son muy interesantes. Esto nos permite tener una lista formada por un <code>String</code> y un <code>Int</code> por ejemplo. Puede que estes pensando ahora mismo... <em>Ya puedo hacer eso con una lista normal y corriente</em>. Bueno, vamos a ver si es verdad:

[code language="scala"]
scala&gt; List(&quot;scalera&quot;, 3)
res0: List[Any] = List(scalera, 3)
[/code]

Aunque pueda parecer que esta lista tiene dos elementos de distinto tipo, la verdad es que desde el punto de vista del sistema de tipos estos dos elementos son del mismo tipo, <code>Any</code>. No se puede hacer nada útil con esta lista, si quisieras hacerlo tendrías que hacer algún que otro casting, con los peligros que eso conlleva...

¿Cómo solucionan este problema las <code>HList</code>? Pues muy sencillo, una <code>HList</code> guarda el tipo de todos y cada uno de los elementos que la componen. De esta manera sabemos que tipo tiene el primer elemento, el segundo, etc. Vamos a probar con el ejemplo anterior, esta vez utilizando una <code>HList</code>.

La sintaxis para crear una <code>HList</code> es la misma que para crear una <code>List</code>, sólo cambiaremos el nombre del constructor:

[code language="scala"]
scala&gt; HList(&quot;scalera&quot;, 3)
res0: shapeless.::[String,shapeless.::[Int,shapeless.HNil]] = scalera :: 3 :: HNil
[/code]

El tipo de retorno es un poco confuso, pero podemos utilizar notación infija para simplificarlo, el tipo de retorno quedaría <code>String :: Int :: HNil</code>. Como puedes ver, tenemos todos los tipos guardados, ¡No perdemos ninguna información! Es más, ¡Podemos saber estáticamente el tamaño de la lista!

Así pues, podemos decir que las <code>HList</code>s son más potentes con las <code>List</code>s estandar de Scala, y aquí hay un ejemplo para probarlo:

[code language="scala"]
val list: List[Any] = &quot;John Doe&quot; :: 26 :: Nil
val hlist: String :: Int :: HNil = &quot;John Doe&quot; :: 26 :: HNil
list.head.toUpperCase // error: value toUpperCase is not a member of Any
hlist.head.toUpperCase // success: &quot;JOHN DOE&quot;
[/code]

Como habrás podido ver, se pueden utilizar distintas sintaxis para construir una <code>HList</code>, al igual que para construir <code>List</code>s:

[code language="scala"]
HList(&quot;scalera&quot;, 3) &lt;===&gt; &quot;scalera&quot; :: 3 :: HNil
List(1, 2, 3) &lt;===&gt; 1 :: 2 :: 3 :: Nil
[/code]

Además, puedes comprobar que muchos de los metodos definidos para <code>List</code>s se pueden utilizar también para <code>HList</code>s.

[code language="scala"]
val hlist = 1 :: &quot;two&quot; :: 3 :: &quot;four&quot; :: HNil
hlist.head // 1
hlist.tail // &quot;two&quot; :: 3 :: &quot;four&quot; :: HNil
hlist take 2 // 1 :: &quot;two&quot; :: HNil
[/code]

Hasta ahora hemos visto que <code>HList</code> tiene similaridades con <code>List</code>, siendo la primera más potente, pero a parte de <code>List</code>, hay otras estructuras en Scala que son más parecidas a <code>HList</code>. Estas estructuras son las tuplas y las case classes.

Estas tres estructuras (hlists, tuplas y case classes) tienen la misma forma, puden guardar la misma información, y se puede ir de una a la otra sin perdida de información. Veamos un ejemplo:

[code language="scala"]
case class User(name: String, age: Int)
 
type UserTuple = (String, Int)
type UserHList = String :: Int :: HNil
 
val user: User = User(&quot;John Doe&quot;, 26)
val userTuple: UserTuple = (&quot;John Doe&quot;, 26)
val userHList: UserHList = &quot;John Doe&quot; :: 26 :: HNil
 
def fromUserToUserHList(user: User): UserHList = ???
def fromUserHListToUser(userHList: UserHList): User = ???
 
//...
[/code]

Sería bastante directo implementar estas funciones, y te animo a que lo intentes. Es un buen ejercicio para tomar contacto con las <code>HList</code>s.
<h3>¿Por qué querría usar HList entonces?</h3>
Si una <code>HList</code> es muy parecida a una case class o una tupla, ¿Por qué son importantes? ¿Qué puedes hacer con una <code>HList</code> que no puedas hacer con una case class o una tupla? Pues bien, la gran diferencia es que <code>HList</code> es una abstracción más potente, abstrae sobre la aridad de las tuplas por ejemplo. No puedes escribir una función sobre tuplas, por que <code>Tuple2</code> y <code>Tuple3</code> no están relacionadas, sin embargo, puedes crear una función sobre <code>HList</code> y ejecutarla con <code>HList</code>s de tamaño arbitrario. Aunque esto queda fuera del ámbito de este post.
<h2>Conclusiones</h2>
Hemos visto que <code>HList</code> es una abstracción muy potente que nos brinda las ventajas de las listas y las tuplas al mismo tiempo. Sin embargo, esto es solo la punta del iceberg, ya que su verdadero potencial sale a relucir cuando las combinamos con otra typeclass de Shapeless, <code>Generic</code>. Pero esto lo dejaremos para otro post...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>858</wp:post_id>
  <wp:post_date>2015-11-18 17:00:18</wp:post_date>
  <wp:post_date_gmt>2015-11-18 15:00:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>shapeless-introduccion-y-hlists-parte-1</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="generic"><![CDATA[generic]]></category>
  <category domain="post_tag" nicename="heterogeneous"><![CDATA[heterogeneous]]></category>
  <category domain="post_tag" nicename="hlist"><![CDATA[hlist]]></category>
  <category domain="post_tag" nicename="list"><![CDATA[list]]></category>
  <category domain="post_tag" nicename="miles"><![CDATA[Miles]]></category>
  <category domain="post_tag" nicename="sabin"><![CDATA[Sabin]]></category>
  <category domain="post_tag" nicename="shapeless"><![CDATA[shapeless]]></category>
  <category domain="post_tag" nicename="syntax"><![CDATA[syntax]]></category>
  <category domain="post_tag" nicename="type"><![CDATA[type]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[81583895]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[16976299083]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/666994360479711232";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>47</wp:comment_id>
    <wp:comment_author><![CDATA[Giuseppe]]></wp:comment_author>
    <wp:comment_author_email>dicarlo.giuseppe@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>31.201.223.21</wp:comment_author_IP>
    <wp:comment_date>2015-11-26 11:00:48</wp:comment_date>
    <wp:comment_date_gmt>2015-11-26 09:00:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hola,
Muy interesante el articulo, no conocía la librería shapeless y la verdad que mirando un poco por encima la documentación parece muy interesante. El tipo Any en scala lo uso muy poco porqué es un poco tedioso, y tenia la necesita de algo como Shapeless.

Pues, espero que te hayan pagado la cerveza :)

Un saludo
Giuseppe]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1448528535</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1448528535</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1448528535.7963631153106689453125;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1448528449.476663112640380859375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-11-26 09:00:48</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>60</wp:comment_id>
    <wp:comment_author><![CDATA[&#8230;y próspero año nuevo! | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/12/23/y-prospero-ano-nuevo/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.82.193</wp:comment_author_IP>
    <wp:comment_date>2015-12-23 12:34:44</wp:comment_date>
    <wp:comment_date_gmt>2015-12-23 10:34:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] hemos contado con la colaboración de Javier Fuentes para un excelente post sobre Shapeless (aún le debemos unas cervezas). Y para el mes que viene tenemos otro post pactado [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1451248880</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1451248880.8158280849456787109375;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1450866884.1184899806976318359375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1450871019.463304042816162109375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-12-23 10:34:44</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>61</wp:comment_id>
    <wp:comment_author><![CDATA[&#8230;and happy new year! | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2015/12/28/and-happy-new-year/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.112.73</wp:comment_author_IP>
    <wp:comment_date>2015-12-28 12:42:28</wp:comment_date>
    <wp:comment_date_gmt>2015-12-28 10:42:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] we got lucky and counted on Javier Fuentes collaboration, as you can see at his awesome post about Shapeless (we still owe him some beers). And for next month, we have nearly arranged some other post with [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1451299348.8837959766387939453125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1451322976</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1451303547.5346400737762451171875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1451322977.3992519378662109375;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-12-28 10:42:28</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>113</wp:comment_id>
    <wp:comment_author><![CDATA[Shapeless: funciones polimórficas | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2016/06/01/shapeless-funciones-polimorficas/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.30</wp:comment_author_IP>
    <wp:comment_date>2016-06-01 12:01:08</wp:comment_date>
    <wp:comment_date_gmt>2016-06-01 10:01:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] ya un tiempo, nuestro amigo Javier Fuentes nos ilustró con una introducción a Shapeless. Unos meseses después, en el meetup de Scala en Madrid, dio una interesante charla sobre [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1464776652</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1464776653.5836870670318603515625;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1464775268.5594971179962158203125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-06-01 10:01:08</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Scalera wants you *</title>
  <link>https://scalerablog.wordpress.com/2015/11/30/scalera-wants-you-2/</link>
  <pubDate>Mon, 30 Nov 2015 10:00:52 +0000</pubDate>
  <dc:creator>scalerablog</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=890</guid>
  <description/>
  <content:encoded><![CDATA[If you fit into puzzles basic requirements (age from 0 to 99+) and you master (or only know a bit about) Scala and you have crazy ideas to share: we want you.

<a href="https://scalerablog.files.wordpress.com/2015/11/scalerawantsyou.png"><img class="aligncenter wp-image-836" src="https://scalerablog.files.wordpress.com/2015/11/scalerawantsyou.png?w=700" alt="scalerawantsyou" width="450" height="606" /></a>

Given the awesome welcome that the blog has experimented among people, we would like to get you even more involved. That's why we propose this initiative to look for new collaborators that really aim to share knowledge, practical ideas, common problem solutions related to Scala and its environment. So, if you contribute with at least 3 published posts, we will present a brand new exclusive casual Scalera's staff tshirt to you. 

<a href="https://scalerablog.files.wordpress.com/2015/11/tshirt_proposals-02.png"><img class="aligncenter wp-image-839 size-large" src="https://scalerablog.files.wordpress.com/2015/11/tshirt_proposals-02.png?w=700" alt="tshirt_proposals-02" width="700" height="398" /></a>

If you're interested, please contact us:
<span style="text-decoration:underline;"><strong>scalerablog at gmail dot com</strong></span>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>890</wp:post_id>
  <wp:post_date>2015-11-30 12:00:52</wp:post_date>
  <wp:post_date_gmt>2015-11-30 10:00:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scalera-wants-you-2</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="add"><![CDATA[add]]></category>
  <category domain="post_tag" nicename="author"><![CDATA[author]]></category>
  <category domain="post_tag" nicename="blog"><![CDATA[blog]]></category>
  <category domain="post_tag" nicename="collaboration"><![CDATA[collaboration]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="post"><![CDATA[post]]></category>
  <category domain="post_format" nicename="post-format-aside"><![CDATA[Minientrada]]></category>
  <category domain="post_tag" nicename="recruitment"><![CDATA[recruitment]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[17329243543]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/671267859100622849";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Scalera challenge: De la Tierra a la Luna</title>
  <link>https://scalerablog.wordpress.com/2016/01/20/scalera-challenge-de-la-tierra-a-la-luna/</link>
  <pubDate>Wed, 20 Jan 2016 10:00:04 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=893</guid>
  <description/>
  <content:encoded><![CDATA[Hemos entrado en el nuevo año, y hemos querido hacerlo pisando fuerte. Como prometimos, uno de nuestros propósitos para este año es tratar de innovar y hacer más participativo el blog. Por ello, os presentamos nuestro primer desafío Scalera, para poner a prueba vuestras cabezitas :-)

<h2> De la Tierra a la Luna </h2>

<a href="https://scalerablog.files.wordpress.com/2016/01/forever-alone-moon_o_1332879.jpg" rel="attachment wp-att-1262"><img src="https://scalerablog.files.wordpress.com/2016/01/forever-alone-moon_o_1332879.jpg?w=300" alt="forever-alone-moon_o_1332879" width="300" height="231" class="aligncenter size-medium wp-image-1262" /></a>

La ESA (Agencia Espacial Europea) quiere mandar dos robots (rovers) a la Luna. Para aterrizar disponen de un sofisticado sistema: un paracaídas. El problema es que todo apunta a que los robots no aterrizaran en el mismo sitio...
Una vez aterrizados, justo encima de sus propios paracaídas, en la Luna, la cual tiene una superficie discreta de tamaño infinito, ambos rovers deben encontrarse para empezar el desarrollo de la misión juntos.

El reto consiste en programar, utilizando un conjunto de instrucciones limitado, el rover de manera que se acaben encontrando. Ten en cuenta, que el mismo programa será cargado en ambos robots y los rovers no tienen forma programática de saber su identificador.

<h2> DSL de navegación</h2>

El set de instrucciones para programar los rovers se compone de:

<ul>	
<li><strong>MOVE &lt;direction&gt;</strong> : Mueve el rover una unidad del espacio discreto hacia la izquierda o la derecha.
</li>
<li><strong>IF FOUND PARACHUTE &lt;command&gt;</strong> : Si el rover encuentra un paracaídas en la parcela de suelo donde se encuentra, entonces ejecuta la instrucción indicada.
</li>
<li><strong>NOP</strong>: El rover no hace nada...
</li>
<li><strong>GOTO &lt;lineId&gt;</strong> : Salta a la instrucción que se encuentra en la línea indicada.
</li>
</ul>

<h2> ¡Participa! </h2>

<a href="https://scalerablog.files.wordpress.com/2016/01/moonrover_example.png" rel="attachment wp-att-1263"><img src="https://scalerablog.files.wordpress.com/2016/01/moonrover_example.png?w=300" alt="moonrover_example" width="300" height="224" class="aligncenter size-large wp-image-1263" /></a>

Puedes encontrar el proyecto para empezar a programar tus robot <a href="https://github.com/Scalera/moonrover" target="_blank">en github</a>.
Encontrarás toda la información técnica necesaria en el fichero <strong>README.md</strong>.

Para participar solo teneis que mandarnos a <strong><u>scalerablog at gmail dot com</u></strong> el fichero <strong>Launch.scala</strong> con el programa que habéis usado y vuestro usuario de twitter para mencionaros en nuestro hall de la fama virtual :-P

El plazo de participación finaliza en dos semanas naturales desde la fecha de publicación de este post.

Entre las mejores soluciones (menos ticks de reloj empleados, menos lineas de programa) sortearemos una camiseta del blog :-)

¡Ánimo y mucha suerte!

<blockquote><em>Cuántas cosas negadas la víspera han sido una realidad al día siguiente</em>
<br>Julio Verne</blockquote>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>893</wp:post_id>
  <wp:post_date>2016-01-20 12:00:04</wp:post_date>
  <wp:post_date_gmt>2016-01-20 10:00:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scalera-challenge-de-la-tierra-a-la-luna</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="challenge"><![CDATA[challenge]]></category>
  <category domain="post_tag" nicename="command"><![CDATA[command]]></category>
  <category domain="post_tag" nicename="dsl"><![CDATA[dsl]]></category>
  <category domain="post_tag" nicename="esa"><![CDATA[esa]]></category>
  <category domain="post_tag" nicename="goto"><![CDATA[goto]]></category>
  <category domain="post_tag" nicename="moon"><![CDATA[moon]]></category>
  <category domain="post_tag" nicename="move"><![CDATA[move]]></category>
  <category domain="post_tag" nicename="nop"><![CDATA[nop]]></category>
  <category domain="post_tag" nicename="prize"><![CDATA[prize]]></category>
  <category domain="post_tag" nicename="robot"><![CDATA[robot]]></category>
  <category domain="post_tag" nicename="rover"><![CDATA[rover]]></category>
  <category domain="post_tag" nicename="scalera"><![CDATA[scalera]]></category>
  <category domain="post_tag" nicename="space"><![CDATA[space]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18935011010]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/689749448331624449";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>65</wp:comment_id>
    <wp:comment_author><![CDATA[Chema Cortés]]></wp:comment_author>
    <wp:comment_author_email>dev.xtrem@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://blog.ch3m4.org</wp:comment_author_url>
    <wp:comment_author_IP>195.55.130.66</wp:comment_author_IP>
    <wp:comment_date>2016-01-26 14:24:20</wp:comment_date>
    <wp:comment_date_gmt>2016-01-26 12:24:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Me parece una gran idea. El "simulador " funciona perfectamente. Reconozco que no lo conseguí hacer funcionar con eclipse, pero con Idea15 lo maneja estupendamente (ya sé que no hace falta IDE, pero uno tiene sus costumbres).

Espero que la gente se anime y le pierda el miedo a programar con scala. Pronto os enviaré mi contribución.

Hubiera estado bien ir conociendo el tanteo de las soluciones a medida que os van llegando, tal vez un "hall de la fama" actualizado, algún referente para incitar a mejorar los programas. (Como referencia, yo he conseguido bajar bastante de los 100 ticks para el encuentro de los robots)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>19142215061</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1453817014</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1453817014</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1453815502.498917102813720703125;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"pych3m4";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1453817015.07981109619140625;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value>1</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1453811060.427153110504150390625;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"pych3m4";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-01-26 12:24:20</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>63</wp:comment_id>
    <wp:comment_author><![CDATA[Sebastián Ortega]]></wp:comment_author>
    <wp:comment_author_email>mehequedadoenblanco@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.coinffeine.com</wp:comment_author_url>
    <wp:comment_author_IP>80.103.61.214</wp:comment_author_IP>
    <wp:comment_date>2016-01-25 23:26:20</wp:comment_date>
    <wp:comment_date_gmt>2016-01-25 21:26:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Salvo que está implementado en Scala no le veo mucha relación con el lenguaje. Vais a poner algún post explicando los detalles del simulador?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>3180069</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1453757183</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1453757182</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1453757182.60188007354736328125;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"maizz";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-01-25 21:26:20</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>64</wp:comment_id>
    <wp:comment_author><![CDATA[jpaniego]]></wp:comment_author>
    <wp:comment_author_email>javiersantospaniego@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>79.156.252.156</wp:comment_author_IP>
    <wp:comment_date>2016-01-25 23:54:09</wp:comment_date>
    <wp:comment_date_gmt>2016-01-25 21:54:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Aparte de estar implementado en Scala, el objetivo del post era promover la participación en el blog y dar a conocer las posibilidades que ofrece el lenguaje.

Consideramos pues que ha sido un éxito ya que contamos incluso con tu aportación de soluciones, las cuales agradecemos profundamente :-)

En futuros posts comentaremos la implementación del simulador y la visualización con ScalaJs.

Un saludo.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>59615419</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>19119976960</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1453758850</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1453758849</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1453758850.0113461017608642578125;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-01-25 21:54:09</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>66</wp:comment_id>
    <wp:comment_author><![CDATA[jpaniego]]></wp:comment_author>
    <wp:comment_author_email>javiersantospaniego@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.82.197.162</wp:comment_author_IP>
    <wp:comment_date>2016-01-26 17:03:45</wp:comment_date>
    <wp:comment_date_gmt>2016-01-26 15:03:45</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[La verdad es que no queríamos publicar datos de las soluciones para no condicionar a la gente en ningún aspecto. 
Pero sí podría ser una buena idea, cuando hablemos en otro post sobre como hemos implementado el simulador para el challenge; indicar los tipos de soluciones que hemos recibido y como se podía mejorar el número de ticks aprovechando la implementación del simulador.

Muchas gracias por tu comentario, Chema :-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>65</wp:comment_parent>
    <wp:comment_user_id>59615419</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1453820626</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1453820627.20318889617919921875;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>19143979843</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1453820627</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-01-26 15:03:45</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>67</wp:comment_id>
    <wp:comment_author><![CDATA[Juan Bono]]></wp:comment_author>
    <wp:comment_author_email>juanbono94@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://www.facebook.com/app_scoped_user_id/1166069060071319/</wp:comment_author_url>
    <wp:comment_author_IP>200.3.185.150</wp:comment_author_IP>
    <wp:comment_date>2016-01-30 20:14:33</wp:comment_date>
    <wp:comment_date_gmt>2016-01-30 18:14:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Muy buenoo y divertido! 
Una pequeña consulta, que atributo del programa es mas valorado? Menor cantidad de ticks o menor cantidad de lineas de código? Porque me encontré ante una situación donde reducir uno aumenta la cantidad del otro. 
Saludos y felicitaciones por el blog!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value>facebook</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value/>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value>1166069060071319</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>19290506316</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1454177673.0751268863677978515625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1454178209.0388519763946533203125;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1454178208</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1454178208</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-01-30 18:14:33</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>68</wp:comment_id>
    <wp:comment_author><![CDATA[jpaniego]]></wp:comment_author>
    <wp:comment_author_email>javiersantospaniego@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>79.148.49.153</wp:comment_author_IP>
    <wp:comment_date>2016-01-30 22:08:53</wp:comment_date>
    <wp:comment_date_gmt>2016-01-30 20:08:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Muchas gracias por el feedback Juan :-) Te animamos a intentarlo con ambos criterios. Hay gente que nos ha mandado las dos soluciones (algunas bastante originales).
¡Un saludo !]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>67</wp:comment_parent>
    <wp:comment_user_id>59615419</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1454184535</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>19293017185</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1454184534</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1454184534.648602008819580078125;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-01-30 20:08:53</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>94</wp:comment_id>
    <wp:comment_author><![CDATA[Scala: Un lenguaje para gobernarlos a todos (I) | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2016/04/13/scala-un-lenguaje-para-gobernarlos-a-todos-i/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.117.230</wp:comment_author_IP>
    <wp:comment_date>2016-04-13 12:10:07</wp:comment_date>
    <wp:comment_date_gmt>2016-04-13 10:10:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] (llegados a este punto, un ávido lector de Scalera probablemente se de cuenta de que el anterior reto Scalera incluía un bonito DSL). Este API puede cambiarse para seguir el enfoque funcional arriba [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1460542470</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1460542470.713715076446533203125;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1460542209.0141880512237548828125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-04-13 10:10:07</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Shapeless: Introduction and HLists (Part 1)</title>
  <link>https://scalerablog.wordpress.com/2015/11/23/shapeless-introduction-and-hlists-part-1/</link>
  <pubDate>Mon, 23 Nov 2015 10:00:46 +0000</pubDate>
  <dc:creator>javifdev</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=895</guid>
  <description/>
  <content:encoded><![CDATA[My good friends from Scalera asked me if I would want to write a post for them, and they made me an offer I couldn't refuse, <em>"We'll get you a beer"</em> they said... and here I am! I can't say no to a good <del>beer</del> friend. This is the very first post I've ever written about Scala, so please bear with me.
<h2>What is Shapeless?</h2>
Shapeless is a library created by Miles Sabin that aims to improve generic programming in Scala.

<a href="https://scalerablog.files.wordpress.com/2015/11/post3_en.jpg"><img class="aligncenter size-medium wp-image-941" src="https://scalerablog.files.wordpress.com/2015/11/post3_en.jpg?w=300" alt="post3_en" width="300" height="284" /></a>

To achieve this it makes use of a bunch of macros and type level tricks, sometimes called whitchcraft, that push the language to its limits. There is a lot to talk about Shapeless, but in this first part we are going to focus on the basics, the most popular structure... yes, you're right, we are talking about <code>HList</code>`s!!!
<h2>HLists</h2>
This is probably the most known feature of Shapeless, and the best start point (IMO) to tackle it, so let's get started introducing what an <code>HList</code> is.

<code>HList</code> stands for Heterogeneous List, i.e. a list of elements of possibly different types. That's it, the concept is real simple, the consecuences are far more interesting. This allows us to have a list containing a <code>String</code> and an <code>Int</code>. But you might be thinking... I can do that with a regular Scala <code>List</code>. Well, let's take a look:

[code language="scala"]
scala&gt; List(&quot;scalera&quot;, 3)
res0: List[Any] = List(scalera, 3)
[/code]

Although it seems this is a <code>List</code> with two elements of different type, the fact is that from a type level point of view these two elements have the same type, <code>Any</code>. You can't do anything useful with this <code>List</code>, in order to do so you must do some ugly castings here and there.

How do <code>HList</code>s solve this problem? Well, an <code>HList</code> stores the type of every element in the list. This way we know the type of the first element, the type of the second element, and so forth. Let's try the same example we saw before, this time using an <code>HList</code>.

The syntax for creating an <code>HList</code> is the same as for creating a <code>List</code>, we just have to replace the constructor name:

[code language="scala"]
scala&gt; HList(&quot;scalera&quot;, 3)
res0: shapeless.::[String,shapeless.::[Int,shapeless.HNil]] = scalera :: 3 :: HNil
[/code]

The result type is a little bit confusing, but we can use infix notation to make it cleaner, the result type then would be <code>String :: Int :: HNil</code>. As you can see, we have all the types stored, we are not losing any info! Furthermore, we statically know the size of the list!

So we can say that <code>HList</code>s are more powerful than <code>List</code>s, and here is an example to prove it:

[code language="scala"]
val list: List[Any] = &quot;John Doe&quot; :: 26 :: Nil
val hlist: String :: Int :: HNil = &quot;John Doe&quot; :: 26 :: HNil

list.head.toUpperCase // error: value toUpperCase is not a member of Any
hlist.head.toUpperCase // success: &quot;JOHN DOE&quot;
[/code]

Notice you can use two different syntax in order to build <code>HList</code>s, similar to what you can do for regular <code>List</code>s:

[code language="scala"]
HList(&quot;scalera&quot;, 3) &lt;===&gt; &quot;scalera&quot; :: 3 :: HNil
List(1, 2, 3) &lt;===&gt; 1 :: 2 :: 3 :: Nil
[/code]

Also, you can tell from the example above we have similar methods to work with <code>HList</code>s

[code language="scala"]
val hlist = 1 :: &quot;two&quot; :: 3 :: &quot;four&quot; :: HNil
hlist.head // 1
hlist.tail // &quot;two&quot; :: 3 :: &quot;four&quot; :: HNil
hlist take 2 // 1 :: &quot;two&quot; :: HNil
[/code]

So far we've seen that <code>HList</code>s have similarities with regular <code>List</code>s, being the formers more powerful, but besides <code>List</code>s, there are other Scala structures more similar to <code>HList</code>s. These structures are tuples and case classes.

All these three data structures(hlists, tuples and case classes) have the same shape, they can store the same information, and you can go from one to another without losing any information. Let's see an example:

[code language="scala"]
case class User(name: String, age: Int)
type UserTuple = (String, Int)
type UserHList = String :: Int :: HNil

val user: User = User(&quot;John Doe&quot;, 26)
val userTuple: UserTuple = (&quot;John Doe&quot;, 26)
val userHList: UserHList = &quot;John Doe&quot; :: 26 :: HNil

def fromUserToUserHList(user: User): UserHList = ???
def fromUserHListToUser(userHList: UserHList): User = ???
...
[/code]

It would be straightforward to implement these functions and I encourage you to try to do so. It's a good exercise to get used to <code>HList</code>s.
<h2>Why would I use HLists then?</h2>
So, if an <code>HList</code> is very similar to a case class or a tuple, what's the big deal? What can you do with an <code>HList</code> you can't with a case class or tuple? Well, the big difference is that <code>HList</code>s are a more powerful abstraction, it abstracts over tuple arity for instance. You can't write a method over tuples, because <code>Tuple2</code> and <code>Tuple3</code> are not related to each other, but you can create a method for <code>HList</code>s and run it with <code>HList</code>s of arbitrary size. This is out of the scope of this post though.
<h2>Conclusions</h2>
We've seen that <code>HList</code>s are a powerful abstraction that provides us with the advantages of both lists and tuples. This is only the tip of the iceberg though, as its power really shines when we combined with other Shapeless type class, <code>Generic</code>. But we'll leave it for another post...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>895</wp:post_id>
  <wp:post_date>2015-11-23 12:00:46</wp:post_date>
  <wp:post_date_gmt>2015-11-23 10:00:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>shapeless-introduction-and-hlists-part-1</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="generic"><![CDATA[generic]]></category>
  <category domain="post_tag" nicename="heterogeneous"><![CDATA[heterogeneous]]></category>
  <category domain="post_tag" nicename="hlist"><![CDATA[hlist]]></category>
  <category domain="post_tag" nicename="list"><![CDATA[list]]></category>
  <category domain="post_tag" nicename="miles"><![CDATA[Miles]]></category>
  <category domain="post_tag" nicename="sabin"><![CDATA[Sabin]]></category>
  <category domain="post_tag" nicename="shapeless"><![CDATA[shapeless]]></category>
  <category domain="post_tag" nicename="syntax"><![CDATA[syntax]]></category>
  <category domain="post_tag" nicename="type"><![CDATA[type]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/668730995001028609";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[17119937334]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>49</wp:comment_id>
    <wp:comment_author><![CDATA[0100000000]]></wp:comment_author>
    <wp:comment_author_email>contact@scalastic.io</wp:comment_author_email>
    <wp:comment_author_url>https://scalastic.io</wp:comment_author_url>
    <wp:comment_author_IP>80.215.228.232</wp:comment_author_IP>
    <wp:comment_date>2015-11-29 12:00:00</wp:comment_date>
    <wp:comment_date_gmt>2015-11-29 10:00:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Was wondering what's all this buzz about shapeless. Now I understand a beat more ! Thanks.
Suerte,

Jean-Jerome]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1448796239.0600640773773193359375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1448874706</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1448874707</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1448791201</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>17328209008</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1448874707.537621021270751953125;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1448791200.7864429950714111328125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-11-29 10:00:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>117</wp:comment_id>
    <wp:comment_author><![CDATA[Shapeless: polymorphic functions | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2016/06/06/shapeless-polymorphic-functions/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.99.176</wp:comment_author_IP>
    <wp:comment_date>2016-06-06 12:01:19</wp:comment_date>
    <wp:comment_date_gmt>2016-06-06 10:01:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] ago, our friend Javier Fuentes illustrated us with an introduction to Shapeless. Some months after that, at Scala Madrid meetup, he offered a pretty interesting speech about [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1465208711</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1465207280.5998380184173583984375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1465208711.528974056243896484375;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-06-06 10:01:19</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>ScalaJs: Javascript for heathens (Part I)</title>
  <link>https://scalerablog.wordpress.com/2015/12/07/scalajs-javascript-for-heathens-part-i/</link>
  <pubDate>Mon, 07 Dec 2015 10:00:57 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=964</guid>
  <description/>
  <content:encoded><![CDATA[I have no idea of frontend development. I assume it. I'm one of those backend cavemen that <del>refuse</del> can't get out of their backend cave. However, <a href="http://www.scala-js.org/" target="_blank">ScalaJs</a> people have developed something that helps getting people like me closer to the frontend world.

<a href="https://scalerablog.files.wordpress.com/2015/12/izcunxh.gif" rel="attachment wp-att-944"><img class="aligncenter size-medium wp-image-944" src="https://scalerablog.files.wordpress.com/2015/12/izcunxh.gif?w=300" alt="iZcUNxH" width="300" height="168" /></a>
<h2>ScalaJs: what's that?</h2>
ScalaJs is a library that allows translating Scala code to Javascript. As simple as that. Besides, toward to frontend developers, it is easily integrated with the top JS libraries like AngularJS or React.
What can it offer then, appart from what JS does? Coding frontend using a strongly typed language.
<a href="https://scalerablog.files.wordpress.com/2015/12/49775773.jpg" rel="attachment wp-att-945"><img class="aligncenter size-medium wp-image-945" src="https://scalerablog.files.wordpress.com/2015/12/49775773.jpg?w=300" alt="49775773" width="300" height="262" /></a>
Thanks this, I actually know what my expression returns (forget about <code>null</code>, <code>NaN</code> and magical results).
Even that it's true that the ScalaJS optimizer generated a lot of boilerplate at the beginning, it has improved a lot the way it generates JS code.
<h2>My first ScalaJs project</h2>
From Scalera, we've <del>hired a monkey</del> tested ourselves the library and wanted to shate the main keys for introducing you to your first ScalaJs mini-project, based on canvas. You can find <a href="https://github.com/lihaoyi/workbench-example-app" target="_blank">here</a> the example project which we have used as template.
<h3>Setting up the SBT project</h3>
Once created the basic scaffolding,

[code language="xml"]
scalajs-example/
  project/
    build.sbt
  src/main/
    resources/
    scala/scalera/scalajs/example
  build.sbt
[/code]

We'll have to add two plugins to our project (at <code>project/build.sbt</code>):
<ul>
	<li><a href="http://www.scala-js.org/doc/sbt-plugin.html" target="_blank">sbt-scalajs</a> : It allows us invoking, directly from SBT, the optimization task that will generate the JS file from the Scala sources.</li>
	<li><a href="https://github.com/lihaoyi/workbench" target="_blank">workbench</a> : Developed by <a href="https://github.com/lihaoyi" target="_blank">Li Haoyi</a> , it's a plugin that manages to deploy your ScalaJS project locally in a pretty simple way. Just executing SBT, it launches a web server at localhost where you can find your application deployed :-)</li>
</ul>
Our file should like this:

[code language="scala"]
resolvers += &quot;spray repo&quot; at &quot;http://repo.spray.io&quot;
resolvers += &quot;Typesafe repository&quot; at &quot;http://repo.typesafe.com/typesafe/releases/&quot;
addSbtPlugin(&quot;org.scala-js&quot; % &quot;sbt-scalajs&quot; % &quot;0.6.1&quot;)
addSbtPlugin(&quot;com.lihaoyi&quot; % &quot;workbench&quot; % &quot;0.2.3&quot;)
[/code]

Some workbench plugin users have detected the need of adding those resolver due to certain <a href="https://github.com/lihaoyi/workbench/issues/8" target="_blank">issue</a>.

<h3>Defining the <code>build.sbt</code> file</h3>
Appart from providing the project name, organization and so...

[code language="scala"]
import com.lihaoyi.workbench.Plugin._
enablePlugins(ScalaJSPlugin)
workbenchSettings

organization := &quot;scalera&quot;
version := &quot;1.0&quot;
scalaVersion := &quot;2.11.2&quot;
name := &quot;scalajs-example&quot;

libraryDependencies ++= Seq(
  &quot;org.scala-js&quot; %%% &quot;scalajs-dom&quot; % &quot;0.8.0&quot;,
  &quot;com.lihaoyi&quot; %%% &quot;scalatags&quot; % &quot;0.5.3&quot;)

bootSnippet := &quot;scalera.scalajs.example.Boot().main(document.getElementById('canvas'));&quot;
updateBrowsers &lt;&lt;= updateBrowsers.triggeredBy(fastOptJS in Compile)
[/code]

it's necessary to enable the sbt-scalajs plugin and import <code>workbench</code> settings. Afterwards, we'll add at the libraryDependencies each of the needed (<code>scalajs-dom</code> for easily performing changes over the dom; and <code>scalatags</code> that provides a simple DSL for writting XML/HTML tags).

In addition, we'll add a couple of extra things:
<ul>
	<li><code>bootSnippet</code> : The snippet that points to the application main.</li>
	<li><code>updateBrowser</code> : At this line we're trying to say that a (partial) web browser reset shall be performed every time the <code>fastOptJS</code> task is called.</li>
</ul>
<h3>Adding some Scala code</h3>
We've already created the SBT project that will conform the frame of our app. Let's add then some Scala logic by adding the file <code>src/main/scalera/scalajs/example/Boot.scala</code>:

[code language="scala"]
package scalera.scalajs.example
 
import scala.scalajs.js.annotation.JSExport
 
import org.scalajs.dom
import org.scalajs.dom.html
 
@JSExport
object Boot {
 
  @JSExport
  def main(canvas: html.Canvas): Unit = {
 
    println(&quot;Hello world!&quot;)
 
    val ctx = canvas.getContext(&quot;2d&quot;)
      .asInstanceOf[dom.CanvasRenderingContext2D]
 
    val width = ctx.canvas.width
 
    val height = ctx.canvas.height
 
    def run: Unit = {
      ctx.clearRect(0, 0, width, height)
      ctx.fillStyle = &quot;black&quot;
      ctx.fillRect(0, 0, width, height)
    }
 
    dom.setInterval(() =&gt; run, 1000)
 
  }
}
[/code]

Appart from some imports, what really attracts our attention in this snippet is:
<ul>
	<li>The <code>@JSExport</code>s. They're used for indicating ScalaJs which elements must be exported to Javascript, so they can be accessed somewhere else (any other JS script or even the HTML).</li>
	<li>The <code>println("Hello world!")</code>. The million dollar question is, where will it be printed? In the browser's console, <em>amigos</em>.</li>
	<li>The <code>ctx</code> context represents the canvas selection that we're going to use.</li>
	<li>The <code>run</code> method cleans the canvas surface, select the 'black' fill style, and paints a rectangle on the canvas surface.</li>
	<li><code>dom.setInterval(() =&gt; run, 1000)</code> : It causes the <code>run</code> method execution every second.</li>
</ul>
We're almost done...
<h3>Some HTML hurts no one...</h3>
Ok, how do we visualize the awesome application we have just created? We'll have to create an <code>index.html</code> file, as simple to be able to invoke our <code>main</code> method.

Let's create such file at <code>src/main/resources</code> with the following content:

[code language="html"]
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
 &lt;title&gt;Scalera Scalajs-example&lt;/title&gt;
 &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;
&lt;/head&gt;
&lt;body style=&quot;margin: 0px&quot;&gt;


&lt;div&gt;
 &lt;canvas style=&quot;display: block;padding:0;margin:auto;width=800&quot; id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;600&quot;/&gt;
&lt;/div&gt;


&lt;script type=&quot;text/javascript&quot; src=&quot;../scalera-scalajs-example-fastopt.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/workbench.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
 scalera.scalajs.example.Boot().main(document.getElementById('canvas'));
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
[/code]

As you can see, the only thing that the HTML does is declaring a canvas and import 3 scripts:
<ul>
	<li><code>../scalera-scalajs-example-fastopt.js</code> : The JS file generated from our Scala sources.</li>
	<li><code>/workbench.js</code> : script that loads the <code>workbench</code> plugin.</li>
	<li>An anonymous script that loads the Boot object (exported to JS by using the <code>@JSExport</code> tag) and executes the main method providing the canvas that we previously declared.</li>
</ul>
<h3>Demo</h3>
To prove that our project works, it will be enough to execute <code>sbt</code> over the project's root folder, and the workbench plugin will take care of launching the web server.

We'll be able to access  <code>http://localhost:12345/target/scala-2.11/classes/index.html</code> url and will see, at first place, that there's a wonderful black rectangle that fulfils all the canvas; and, on the other hand, if we open the browser console, we'll see printed our rocking <strong>Hello world!</strong>.
<h2>Ok, what about cons?</h2>
Despite of the amazing look of our example project, we've found some difficulties when coding it. And we have to mention them (just to avoid the feeling of tricking you):
<ul>
	<li>Using Scala dependencies: ScalaJs cannot use classes/objects of dependencies that don't have a ScalaJs project nature as well. It's quite limiting but it makes sense if you think about the idea of ScalaJs being able to export to JS all involved Scala source code with a <code>@JSExport</code> tag.</li>
	<li>Testing : ¿ScalaJS and Scalatest together? Hard to believe. But take a look at <a href="https://github.com/lihaoyi/utest" target="_blank">uTest</a> ...</li>
</ul>
<h2>Conclusion</h2>
ScalaJs rocks. We don't mean that it's better than natively JS development, but it helps indeed that total frontend heathens get closer to this world that provides a lot of possibilities.

At future posts, we'll see some examples about how to use <code>CanvasRenderingContext2D</code> or about how <code>@JSExport</code> tags work.

Peace out! :-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>964</wp:post_id>
  <wp:post_date>2015-12-07 12:00:57</wp:post_date>
  <wp:post_date_gmt>2015-12-07 10:00:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scalajs-javascript-for-heathens-part-i</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="canvas"><![CDATA[canvas]]></category>
  <category domain="post_tag" nicename="dom"><![CDATA[dom]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="export"><![CDATA[export]]></category>
  <category domain="post_tag" nicename="fastoptjs"><![CDATA[fastoptjs]]></category>
  <category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="scalajs"><![CDATA[scalajs]]></category>
  <category domain="post_tag" nicename="tag"><![CDATA[tag]]></category>
  <category domain="post_tag" nicename="tutorial"><![CDATA[tutorial]]></category>
  <category domain="post_tag" nicename="workshop"><![CDATA[workshop]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[17555499307]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/673818842787766274";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Leyendo el futuro en Scala</title>
  <link>https://scalerablog.wordpress.com/2015/12/09/leyendo-el-futuro-en-scala/</link>
  <pubDate>Wed, 09 Dec 2015 15:00:16 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=970</guid>
  <description/>
  <content:encoded><![CDATA[<p style="text-align:justify;">Hoy explotaremos nuestras habilidades místicas para intentar adivinar el futuro. Para ello, utilizaremos el tipo <strong><em>Future</em></strong> que nos proporciona Scala.</p>
<a href="https://scalerablog.files.wordpress.com/2015/12/a7cae161ea16b893de40b46acadedad9b57373e6ebacfe9cd4bb57a32686517a.jpg" rel="attachment wp-att-971"><img class="size-medium wp-image-971 aligncenter" src="https://scalerablog.files.wordpress.com/2015/12/a7cae161ea16b893de40b46acadedad9b57373e6ebacfe9cd4bb57a32686517a.jpg?w=300" alt="a7cae161ea16b893de40b46acadedad9b57373e6ebacfe9cd4bb57a32686517a" width="300" height="225" /></a>

<strong>Espera, espera, ¿qué es el tipo Future?</strong>
<p style="text-align:justify;">El tipo <em>Future</em> en Scala se utiliza para computar operaciones costosas en segundo plano sin que se bloquee el hilo de ejecución principal. En dicho <em>Future</em>, se generará el resultado de una o más operaciones. Para ello, se lanzará un thread paralelo.
Por ejemplo, si nos levantamos un día con la necesidad de saber cuales son los mil primeros números primos, deberíamos hacerlo así:</p>
[code language="scala"]

def getFirstMillionOfPrimes: List[Int] = ???

val f: Future[List[Int]] = Future{ getFirstMillionOfPrimes }
[/code]
<p style="text-align:justify;">Una vez que el resultado del Futuro se ha calculado, se puede obtener dicho resultado principalmente de dos formas distintas:</p>

<ul>
	<li style="text-align:justify;">De forma <strong>bloqueante</strong>: bloqueando la ejecución hasta que el futuro se haya completado.</li>
	<li style="text-align:justify;">De forma <strong>no bloqueante</strong>: dejando pendiente la ejecución de una función que se ejecutará cuando el futuro se haya completado. Vamos, un callback de toda la vida.</li>
</ul>
Vamos a ver como se realizaría.

<strong>Modo vidente de pacotilla</strong>
<p style="text-align:justify;">Una de las opciones es realizar una llamada bloqueante sobre el futuro. Esta llamada bloqueante esperará hasta que el futuro se haya completado, y una vez completado devolverá su resultado.</p>
Para ello se utiliza la llamada <strong><em>Await.result</em></strong>:

[code language="scala"]

val f: Future[Int] = Future{
  Thread.sleep(10000)
  2
}

println(Await.result(f,12.seconds))  //2
[/code]
Como se puede ver, es necesario definir un timeout para no esperar indefinidamente. En caso de que el <em>Future</em> tarde más en computar el resultado que el timeout definido, saltará una excepción de timeout.</p>
<p style="text-align:justify;">Esta forma de obtener el resultado no es recomendable ya que al bloquear la ejecución del programa, estamos realizando justo lo que se pretende evitar utilizando el tipo <em>Future</em>. Sin embargo, en algunas ocaciones se utiliza, por ejemplo, a la hora de realizar testing.</p>
<strong>Modo vidente auténtico (con título acreditativo) </strong>
<p style="text-align:justify;">¿Y entonces cómo debemos trabajar con los <em>Future</em>? Pues muy sencillo, mediante callbacks.</p>
<p style="text-align:justify;">Los callbacks nos permitirán realizar una o varias acciones una vez que se resuelva el futuro. Pero, y aquí está la magia, lo hará de forma no bloqueante. El callback se definirá y será llamado de forma transparente cuando el futuro se complete. Mientras tanto, el programa seguirá su ejecución.</p>
<p style="text-align:justify;">Para  tratar el resultado se utilizarán los tipos <em>Success</em> y <em>Failure</em>. Esto es debido a que se utilizará un <strong><em>Try</em></strong> para intentar obtener el valor del futuro. Ya comentamos este tipo en otro <a href="https://scalerablog.wordpress.com/2015/06/24/capturando-excepciones-en-scala-el-tipo-try/">post</a>, pero vamos a ver como aplicaría a los futuros:</p>

<ul>
	<li style="text-align:justify;">Si el futuro ha conseguido calcular con éxito su cometido, se devuelve el resultado encapsulado en un tipo <em>Success</em>.</li>
	<li style="text-align:justify;">En caso contrario, si algo ha ido mal, se devolverá la excepción producida envuelta en un tipo <em>Failure</em>.</li>
</ul>
<img class=" size-medium wp-image-972 aligncenter" src="https://scalerablog.files.wordpress.com/2015/12/crystal-ball-failure_300px.jpg?w=240" alt="crystal-ball-failure_300px" width="240" height="195" />

¿Y cómo se define un callback? Pues muy sencillo:

[code language="scala"]

f.onComplete( (t: Try[Int]) =&gt; println(t) )
//Success(2)

[/code]
<p style="text-align:justify;">En este caso, esperamos a que se complete el futuro que había definido previamente, e imprimimos su resultado. Como hemos visto, dicho resultado estará encapsulado en un tipo Try.</p>
<p style="text-align:justify;">Además, podemos definir callbacks que solo se ejecutarán si el futuro ha ido bien o si el futuro ha ido mal:</p>
[code language="scala"]

f.onSuccess( n =&gt; println(n) )
//2

f.onFailure( throwable =&gt; println(throwable.getMessage) )
//it will never print an error (because it equals Success(2))

[/code]
<p style="text-align:justify;">Esto de los callbacks está muy bien. Sin embargo, una de las operaciones más usadas contra el tipo <em>Future</em> son las transformaciones. Mediante estas transformaciones, podremos cambiar el resultado del Futuro sin esperar explícitamente a que se obtenga el valor computado. Pero, debido a la gran cantidad de transformaciones que se pueden aplicar a un futuro, creo que ese tema merece su propio post dedicado. Así que, nada más por hoy. Hasta otra! :)</p>
<p style="text-align:justify;"></p>
&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>970</wp:post_id>
  <wp:post_date>2015-12-09 17:00:16</wp:post_date>
  <wp:post_date_gmt>2015-12-09 15:00:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>leyendo-el-futuro-en-scala</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[81583895]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[17630298478]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/674607392248586240";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>53</wp:comment_id>
    <wp:comment_author><![CDATA[miguelbucarest]]></wp:comment_author>
    <wp:comment_author_email>miguel.s.address@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>213.229.163.5</wp:comment_author_IP>
    <wp:comment_date>2015-12-14 14:43:50</wp:comment_date>
    <wp:comment_date_gmt>2015-12-14 12:43:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[muy guay el post, ahora a esperar el siguiente ;) para ver formas idiomáticas de trabajar con esto

Intuyo que el 'onComplete' puede darte tanto un Success(x) como un Failure(error), no? en ese caso habría que tirar de pattern matching?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>14635623</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1450097032</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1450097033</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1450097032.6848380565643310546875;s:5:"event";s:9:"check-ham";s:4:"user";s:14:"miguelbucarest";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-12-14 12:43:50</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>54</wp:comment_id>
    <wp:comment_author><![CDATA[dvallejonava]]></wp:comment_author>
    <wp:comment_author_email>d.vallejo.nava@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2.138.162.88</wp:comment_author_IP>
    <wp:comment_date>2015-12-14 21:30:47</wp:comment_date>
    <wp:comment_date_gmt>2015-12-14 19:30:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Muchas gracias por tu feedback :)

Efectivamente, en el método onComplete se trabaja directamente con el tipo Try. Dicho tipo Try será, o bien un Success, o bien un Failure. Y, por supuesto, dicho Try se podría evaluar mediante Pattern Matching.

Un saludo!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>53</wp:comment_parent>
    <wp:comment_user_id>81583895</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1450121447</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1450121447</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1450121447.15688800811767578125;s:5:"event";s:9:"check-ham";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-12-14 19:30:47</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>103</wp:comment_id>
    <wp:comment_author><![CDATA[Transformando el futuro | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2016/05/04/transformando-el-futuro/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.33</wp:comment_author_IP>
    <wp:comment_date>2016-05-04 17:10:35</wp:comment_date>
    <wp:comment_date_gmt>2016-05-04 15:10:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] ya unas cuantas semanas estuvimos hablando sobre el tipo Future para crear llamadas asíncronas. Vimos como trabajar con llamadas bloqueantes [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1462374635.2725360393524169921875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1462374775</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1462374775.9397389888763427734375;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-05-04 15:10:35</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Scala: One language to rule them all (I)</title>
  <link>https://scalerablog.wordpress.com/2016/04/18/scala-one-language-to-rule-them-all-i/</link>
  <pubDate>Mon, 18 Apr 2016 10:00:06 +0000</pubDate>
  <dc:creator>pfcoperez</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1043</guid>
  <description/>
  <content:encoded><![CDATA[<em>In the beginning, there were not programming languages, just machine code. <a href="https://en.wikipedia.org/wiki/Automatic_programming">Automatic programming</a> came to save all us by casting power rings to rule the machines: Programming languages. They diversified, inspired new ones, constituted a rich ecosystem. Among them appeared a highly useful kind of computer languages: DSLs.</em>
<h1>DSLs</h1>
<strong>D</strong>omain <strong>S</strong>pecific (computer) <strong>L</strong>anguages have been around for quite a long time. The academic description of this kind of languages states that they are centred and used for an specific application domain. <strong>DSLs</strong> are <strong>small </strong>and <strong>concise</strong> which implies that they guide their users in the process of describing actions, entities or relations within their domain of application. What's more important, they are made to fit their purpose.
<blockquote><em>If I am doing statistics research, why should worry about memory management?!!</em></blockquote>
It isn't surprising that a whole kingdom of these mini-languages has evolved and took over machine learning tools, scientific programming, hardware design and management, modeling...
<h1>Wasn't this a blog on Scala? Leave the history for academics!</h1>
Yeah this might sound as the stories from the past. However, in the context of the current times, when we all seem obsessed by data acquisition, storage and analysis and taking into account that this data is usually complex to manage because of its variability. We are forced to deal with dozens of different ways of managing data and many of them pass through the use of DSLs: SQL, HiveQL, CQL, bash, grep, awk, R, C'mon! How can I even finish the list! Let's forget of what is to come.

What if a tool would give as the power to create simple, guided and short languages to perform specific domain tasks within.  What if Scala was a kind of DSL where the D stands for the Domain of Creating new DSLs?!

When its creators named Scala they were not just thinking on its capabilities in code reuse and  potential use in horizontal concurrent environments; they also kept in mind the extensibility of the language. Some of the features in that direction are:
<ul>
	<li><strong>Infix notation: </strong><code>objectA.method(objectB)</code> can be written as <code><code>objectA method objectB</code></code></li>
	<li><strong>Lack of operators:</strong> There are no operators as separated entities, just methods. Precedence order and associativity rules are provided by the last character of each method name.This way, any method name NOT ending with `:` gets associated from left to right:
<em>obj1 + obj2 </em>is the same as writing<em> <em>obj1.+(obj2) </em></em>whereas<em> <em>obj1 +: obj2</em></em> is as writing<em><em> <em>obj2.+:(obj1).
</em></em></em>Similarly, operator precedence is provided by a priority list of method name ending characters. e.g: `*` gets a higher priority than `+`, <em>obj1 + obj2 * obj3  </em>is always interpreted as <em>obj1 + (<em>obj2 * obj3</em>).</em>The mentioned precedence priority list is as follows:
<ul>
	<li>Any letter, no matter case.</li>
	<li>|</li>
	<li>^</li>
	<li>&amp;</li>
	<li>Symbols = and !</li>
	<li>Symbols &lt; and &gt;</li>
	<li>:</li>
	<li>Arithmetic operations + and -</li>
	<li>Arithmetic operations  *, / and %</li>
	<li>Any other special character.</li>
</ul>
</li>
	<li><strong>Advanced object oriented features:</strong> <em>object, trait, ...</em></li>
</ul>
These features can be combined to model and build <a href="http://martinfowler.com/bliki/InternalDslStyle.html">internal DSLs</a> within the Scala programming language.
<h1>Scala DSLs 101</h1>
Infix notation is the main feature to create our own embedded languages.

Consider the following trait:

[code language="scala"]
trait MovingRobot {
  def moveForward(): MovingRobot = {
    println(&quot;Robot moved one position forward&quot;)
    this
  }
  def moveBackward(): MovingRobot = {
    println(&quot;Robot moved one position backward&quot;)
    this
  }
}
[/code]

Which can be mixed in an object declaration as:

[code language="scala"]
object robot extends MovingRobot
[/code]

Its methods can be called using traditional dot notation:

[code language="scala"]
robot.moveForward.moveBackward
[/code]

But infix notation give us a more natural way to talk with this simple bot:

[code language="scala"]
robot moveForward() moveBackward
robot moveForward
robot moveBackward
[/code]

This is the simplest  of all possible DSLs.
<h2>State transitions</h2>
Yes, simple but rather imperative and useless.  Commands are not changing the system state besides the lateral effect behind <em>println:</em>

<a href="https://scalerablog.files.wordpress.com/2016/03/simpliest_automaton.png" rel="attachment wp-att-2227"><img class="aligncenter size-full wp-image-2227" src="https://scalerablog.files.wordpress.com/2016/03/simpliest_automaton.png" alt="simpliest_automaton" width="336" height="260" /></a>

At this point, there are two options to model the effects of the DSL instructions:
<ul>
	<li><strong>The mutable approach:</strong> Somehow easiest to Scala new comers from imperative languages but it is way more bug prone. This one is rather similar to the approach followed by so many builders in Java. Check Java's <em><a href="https://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html">StringBuilder</a>:
</em>
The builder state is the string that is being composed. Methods, such as <em><strong><a href="https://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html#append(double)">append</a></strong>(double d), </em>return a reference to the instance of the builder whose state has been altered by the very same method.  Hence, the same reference is always returned since is the same <em>StringBuilder </em>instance which is mutating call after call, sounds familiar?!<a href="https://scalerablog.files.wordpress.com/2016/03/mutable_state.png" rel="attachment wp-att-2228"><img class="aligncenter size-full wp-image-2228" src="https://scalerablog.files.wordpress.com/2016/03/mutable_state.png" alt="mutable_state" width="278" height="160" /></a></li>
	<li><strong>The immutable one (or the path of wisdom):</strong> Do not change anything, return a new state with the attributes derived from the previous state your action. From now, this post will only cover this approach.</li>
</ul>
The beauty of the second solution is that each action returns a new state object having a 1 to 1 relation with the system state. That is, the code entities are a perfect reflection of all the changes. Moreover the state is immutable by definition.
<blockquote><span class="rh_me"><a href="http://www.wordreference.com/definition/state">state</a></span> <em class="tooltip rh_pron">/steɪt/</em>  <span class="rh_pdef"><span class="rh_pos">n., adj., v.,</span> <b>stat•ed, stat•ing.</b> </span>
<span class="rh_empos">n.</span>
<ol>
	<li id="advanced_1" value="1"><span class="rh_def">the condition of a person or thing with respect to circumstances or experiences;
the way something is<span class="rh_ex"><span class="rh_lab">[countable; usually singular]</span>the state of one's health.</span></span></li>
	<li id="advanced_2" value="2"><span class="rh_def">the condition of substances with respect to structure, form, etc.<span class="rh_ex"><span class="rh_lab">[countable]</span>Water in a gaseous state is steam.</span></span></li>
</ol>
(www.wordreference.com)</blockquote>
Discussing why<a href="http://www.ibm.com/developerworks/java/library/j-jtp02183/index.html"> immutability drives to way less buggy systems</a> is out of the scope of this post, hundreds of explanations can be found by googling "immutability reduces bugs". Even Java creators decided it was better, at least for their strings.

<a href="https://scalerablog.files.wordpress.com/2016/03/state_transition.png" rel="attachment wp-att-2229"><img class="aligncenter size-full wp-image-2229" src="https://scalerablog.files.wordpress.com/2016/03/state_transition.png" alt="state_transition" width="588" height="246" /></a>

Each transition returning a whole new state reduces its responsibility  to just one: To generate a new state hence simplifying the DSL design. No changes in the state are to be expected beyond explicit transition calls.
<h2>The nitty-gritties of immutable state transitions</h2>
Following the utterly complex example of our uni-dimensional robot API (at this point you must have realized that the <a href="https://scalerablog.wordpress.com/2016/01/20/scalera-challenge-from-earth-to-the-moon/">previous Scalera Challenge</a> included a beautiful DSL), it can be altered to make it follow the above-described functional approach:

[code language="scala"]
// All states extend `RobotState`
trait RobotState {
  def position: Int
}

// Transitions which can be mixed with any state for which they
// make sense.

trait MovementTransitions {
  self: RobotState =&amp;amp;gt;

  def moveForward(nSteps: Int = 1): RobotState with MovementTransitions

  def moveBackward(nSteps: Int = 1): RobotState with MovementTransitions

}

// States
// In this example, states only differ in the robot position so they all
// are represented by the same case class.
case class Robot(position: Int) extends RobotState with MovementTransitions {

  def moveForward(nSteps: Int = 1) =
    Robot(position + nSteps)

  def moveBackward(nSteps: Int = 1) =
    Robot(position - nSteps)

}

// Initial state
val robot = new Robot(0)
[/code]

And its use:

[code language="scala"]
robot moveForward(10) moveBackward() position
[/code]
The code above is an oversimplification but shows the basic tricks behind Scala DSLs, namely: The use of infix notation, families of states and transitions only usable within state definitions.
<h1>A bit of theory: Really? State Machines?</h1>
Is the state machine model actually needed to implement DSLs? Yes, if you like avoiding shooting yourself in the foot.

<img class="  wp-image-2230 alignleft" src="https://scalerablog.files.wordpress.com/2016/03/shootfoot.gif" alt="shootfoot" width="265" height="276" />

Immutable state machines are easy to understand, maintain and expand.

On the other hand, DSLs are languages, formal languages with grammars with a place in <a href="https://en.wikipedia.org/wiki/Chomsky_hierarchy">Noam Chomsky's classification</a>, commonly, Regular Grammars and Context-Free grammar.
<ul>
	<li>Which theoretical machine is able to recognize/process languages with regular grammars? A <a href="https://en.wikipedia.org/wiki/Finite_state_automaton">finite state automaton</a></li>
	<li>In the case of Context-Free grammar languages, they can be processed by <a href="https://en.wikipedia.org/wiki/Pushdown_automaton">push-down automatons</a> which (<span style="color:#ff0000;"><strong>ALERT!</strong></span> <span style="color:#ff0000;">Oversimplification ahead</span>) can be regarded as a finite automaton enjoying the perk of making use of its own stack to place and read symbols.</li>
</ul>
The transition model described afore seems to be just made for implementing this kind of machines. A self-answered question arises as to whether DSLs' developers should dedicate their efforts to find buggy and flimsy solutions when such a solid model is available.
<blockquote>- Well, I suggest you gentlemen invent a way to put a square peg in a round hole.

<a href="https://scalerablog.files.wordpress.com/2016/03/gene_krantz.png" rel="attachment wp-att-2292"><img class="aligncenter size-full wp-image-2292" src="https://scalerablog.files.wordpress.com/2016/03/gene_krantz.png" alt="gene_krantz" width="700" height="376" /></a>

- Sir, we have plenty of round pegs!

<a href="https://scalerablog.files.wordpress.com/2016/03/engineer.png" rel="attachment wp-att-2293"><img class="aligncenter size-full wp-image-2293" src="https://scalerablog.files.wordpress.com/2016/03/engineer.png" alt="engineer" width="700" height="316" /></a></blockquote>
<h1>Coming soon...</h1>
In the next episode: A practical DSLs development step by step, no more history, theory or that silly things nobody cares about! Just...
<p style="text-align:center;"><a href="https://scalerablog.files.wordpress.com/2016/03/letsdoit.jpg" rel="attachment wp-att-2294"><img class="aligncenter size-full wp-image-2294" src="https://scalerablog.files.wordpress.com/2016/03/letsdoit.jpg" alt="letsdoit" width="400" height="400" /></a></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1043</wp:post_id>
  <wp:post_date>2016-04-18 12:00:06</wp:post_date>
  <wp:post_date_gmt>2016-04-18 10:00:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scala-one-language-to-rule-them-all-i</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="dsl"><![CDATA[dsl]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="immutable"><![CDATA[immutable]]></category>
  <category domain="post_tag" nicename="mutable"><![CDATA[mutable]]></category>
  <category domain="post_tag" nicename="robot"><![CDATA[robot]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="state"><![CDATA[state]]></category>
  <category domain="post_tag" nicename="step"><![CDATA[step]]></category>
  <category domain="post_tag" nicename="transition"><![CDATA[transition]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21901748508]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/722002260956319744";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>99</wp:comment_id>
    <wp:comment_author><![CDATA[shiv4nsh]]></wp:comment_author>
    <wp:comment_author_email>shivansh@knoldus.com</wp:comment_author_email>
    <wp:comment_author_url>http://shiv4nsh.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>103.62.237.66</wp:comment_author_IP>
    <wp:comment_date>2016-04-27 11:22:40</wp:comment_date>
    <wp:comment_date_gmt>2016-04-27 09:22:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Reblogueó esto en <a href="https://shiv4nsh.wordpress.com/2016/04/27/scala-one-language-to-rule-them-all-i/" rel="nofollow">Scala Lovers</a>.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>89141573</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1461752744</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1461752744</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1461752744.8730609416961669921875;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1461748960.934895038604736328125;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"shiv4nsh";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>reblog_ping</wp:meta_key>
      <wp:meta_value>1</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-04-27 09:22:40</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>112</wp:comment_id>
    <wp:comment_author><![CDATA[Scala: One language to rule them all (II) | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2016/05/30/scala-one-language-to-rule-them-all-ii/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.80.108</wp:comment_author_IP>
    <wp:comment_date>2016-05-30 12:09:24</wp:comment_date>
    <wp:comment_date_gmt>2016-05-30 10:09:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] it is used to cast new rings of power, I mean, DSLs. Some theory and lots of learning by doing.  We&#8217;ve already seen a bit of theory and now is time to learn by building a DSL from [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1464602964.71397304534912109375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1464608221.0251491069793701171875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1464770825</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1464770825.8608739376068115234375;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-05-30 10:09:24</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>114</wp:comment_id>
    <wp:comment_author><![CDATA[Orlando]]></wp:comment_author>
    <wp:comment_author_email>mmoa33@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://mmoa33.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>190.5.48.101</wp:comment_author_IP>
    <wp:comment_date>2016-06-03 00:02:23</wp:comment_date>
    <wp:comment_date_gmt>2016-06-02 22:02:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Cool intro; definitely looking forward to the next installment :-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1464904943.411323070526123046875;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"mmoa33";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1464909265.3271958827972412109375;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"mmoa33";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>23463140892</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1464940255</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1464940255</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1464940255.754849910736083984375;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-06-02 22:02:23</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>115</wp:comment_id>
    <wp:comment_author><![CDATA[pfcoperez]]></wp:comment_author>
    <wp:comment_author_email>contact@pablofranciscoperez.info</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>83.34.175.131</wp:comment_author_IP>
    <wp:comment_date>2016-06-03 07:57:52</wp:comment_date>
    <wp:comment_date_gmt>2016-06-03 05:57:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks! No need to wait https://scalerablog.wordpress.com/2016/05/30/scala-one-language-to-rule-them-all-ii/]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>114</wp:comment_parent>
    <wp:comment_user_id>63221184</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1464933473.8450720310211181640625;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"pfcoperez";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1464933473</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>23460646247</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1464933474</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-06-03 05:57:52</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Reading the future in Scala</title>
  <link>https://scalerablog.wordpress.com/2015/12/14/reading-the-future/</link>
  <pubDate>Mon, 14 Dec 2015 10:00:29 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1045</guid>
  <description/>
  <content:encoded><![CDATA[<p style="text-align:justify;">Today we shall explore our mystic skills to try to divine the future. To do so, we will use the type <strong><em>Future</em></strong> that Scala is giving us.</p>
<a href="https://scalerablog.files.wordpress.com/2015/12/a7cae161ea16b893de40b46acadedad9b57373e6ebacfe9cd4bb57a32686517a.jpg" rel="attachment wp-att-971"><img class="size-medium wp-image-971 aligncenter" src="https://scalerablog.files.wordpress.com/2015/12/a7cae161ea16b893de40b46acadedad9b57373e6ebacfe9cd4bb57a32686517a.jpg?w=300" alt="a7cae161ea16b893de40b46acadedad9b57373e6ebacfe9cd4bb57a32686517a" width="300" height="225" /></a>

<strong>Wait, wait, what is the type Future?</strong>
<p style="text-align:justify;">Scala's <em>Future</em> type is used to compute heavy operations in background so that the main execution thread remains unblocked. Within that <em>Future</em>, one or several operations will be evaluated. To do so, a parallel thread will be started.</p>
<p style="text-align:justify;">For instance, if we woke up one day with the need to know which are the first thousand prime numbers, we would have to do something like this:</p>
[code language="scala"]

def getFirstMillionOfPrimes: List[Int] = ???

val f: Future[List[Int]] = Future{ getFirstMillionOfPrimes }
[/code]
<p style="text-align:justify;">Once the result of the Future is evaluated, there are mainly two ways of getting it:</p>

<ul>
	<li style="text-align:justify;">In a <strong>blocking</strong> way: blocking the execution until the future is completed.</li>
	<li style="text-align:justify;">In a <strong>non blocking</strong> way: registering a function that will be executed once the future is completed. What has been traditionally known as a callback.</li>
</ul>
Let's see how this would be implemented.

<strong>Second class fortune teller mode</strong>
<p style="text-align:justify;">One of the options we had was to perform a blocking call on the future. This blocking call will wait until the future is completed and when so, it will return its result.</p>
To do so, the <strong><em>Await.result </em></strong>call is to be used:

[code language="scala"]

val f: Future[Int] = Future{
Thread.sleep(10000)
2
}

println(Await.result(f,12.seconds))  //2
[/code]
As can be appreciated, a timeout must be defined so that the wait is not indefinitely long. In case the Future exceeds this timeout when computing the result, a timeout exception will be thrown.
<p style="text-align:justify;">This way of getting the result is not recommended since by blocking the program execution, what we are doing is just what we are trying to avoid by using the type <em>Future</em>. However, this is used sometimes, for example, in testing.</p>
<strong>True fortune teller mode (with official certificate) </strong>
<p style="text-align:justify;">So, how should we work with <em>Futures </em>then? Easy, with callbacks.</p>
<p style="text-align:justify;">Callbacks will allow us to perform one or several actions once the future is solved. But here's the magic, they will do so in a non blocking way. The callback just has to be defined and then it will be called transparently when the future is completed. In the meantime, the program will continue with its execution.</p>
<p style="text-align:justify;">In order to process the result, the types <em>Success</em> and <em>Failure</em> will be used. This is so because a <em><strong>Try</strong> </em>will be used to try to get the value of the future. We already talked about this type in another <a href="https://scalerablog.wordpress.com/2015/06/24/capturando-excepciones-en-scala-el-tipo-try/">post</a>, but let's see how this would be applied to futures:</p>

<ul>
	<li style="text-align:justify;">If the future can perform its duty successfully, the result will be returned encapsulated in a <em>Success</em> type.</li>
	<li style="text-align:justify;">On the contrary, if something goes wrong, the generated exception will be returned encapsulated in a <em>Failure</em> type.</li>
</ul>
<img class=" size-medium wp-image-972 aligncenter" src="https://scalerablog.files.wordpress.com/2015/12/crystal-ball-failure_300px.jpg?w=240" alt="crystal-ball-failure_300px" width="240" height="195" />

And how is a callback defined? Very easily:

[code language="scala"]

f.onComplete( (t: Try[Int]) =&gt; println(t) )
//Success(2)

[/code]
<p style="text-align:justify;">In this case, we are waiting until the future we had previously defined is completed and then, we print its result. As we have seen, that result will be encapsulated in a Try type.</p>
<p style="text-align:justify;">Besides, we can define callbacks that will be only executed if the future goes right or wrong.</p>
[code language="scala"]

f.onSuccess( n =&gt; println(n) )
//2

f.onFailure( throwable =&gt; println(throwable.getMessage) )
//it will never print an error (because it equals Success(2))

[/code]
<p style="text-align:justify;">All this callback thing is very useful. However, perhaps the most commonly used operations with <em>Future</em> types are transformations. By means of these transformations, we will be able to change the result of the Future without having to wait explicitly for the computed value to be obtained. Nevertheless, given the huge number of transformations that can be applied to a future, I think this issue deserves its own post. So, that's all for today. See you! :)</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1045</wp:post_id>
  <wp:post_date>2015-12-14 12:00:29</wp:post_date>
  <wp:post_date_gmt>2015-12-14 10:00:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>reading-the-future</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="async"><![CDATA[async]]></category>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="future"><![CDATA[future]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/676341160453914624";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[17779588771]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>104</wp:comment_id>
    <wp:comment_author><![CDATA[Transforming the Future | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2016/05/09/transforming-the-future/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.101.112</wp:comment_author_IP>
    <wp:comment_date>2016-05-09 12:10:19</wp:comment_date>
    <wp:comment_date_gmt>2016-05-09 10:10:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] few weeks ago we talked about the type Future and its use to create asynchronous [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1462788632</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1462788632.6738379001617431640625;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1462788620.6137039661407470703125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-05-09 10:10:19</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>ClassTag, Class y batallitas de la mili...</title>
  <link>https://scalerablog.wordpress.com/2015/12/16/classtag-class-y-batallitas-de-la-mili/</link>
  <pubDate>Wed, 16 Dec 2015 11:30:55 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1170</guid>
  <description/>
  <content:encoded><![CDATA[En ocasiones, al trabajar en Scala, surge la necesidad de trabajar con meta-información sobre los tipos. Si bien las macros pueden parecer algo lejano y demasiado tedioso (ya hablaremos de ellas), muchas veces nos basta con poder obtener algo de información sobre las clases de runtime.
<h2>ClassTag</h2>
Se trata de un 'envoltorio' que añade Scala sobre las clases de runtime de <code>java.lang.Class</code>.

Para trabajar con ClassTag debemos importar:

[code language="scala"]
import scala.reflect.{ClassTag,classTag}
[/code]

Mientras que el primer valor que se importa es la clase, el segundo es un método para obtener implícitamente el <code>ClassTag</code> de un cierto tipo. Por ejemplo:

[code language="scala"]
scala&gt; classTag[Int]
res0: scala.reflect.ClassTag[Int] = Int
[/code]

En realidad no es más que syntax sugar para lo siguiente:

[code language="scala"]
def classTag[T:ClassTag]: ClassTag[T] = 
  implicitly[ClassTag[T]]

scala&gt; classTag[Int]
res0: scala.reflect.ClassTag[Int] = Int
[/code]

Disponen de métodos (ahora deprecados por la verificación de tipos mediante TypeTag) como <code>&lt;:&lt;</code> ó <code>=:=</code> que permiten comprobar en tiempo de compilación los bounds de un tipo.
Por ejemplo:

[code language="scala"]
def myMethod[T,U](t: T,u: U)(implicit ev: &lt;:&lt;[T,U]):Unit = 
  println(t,u)
[/code]

permite restringir la relación entre los tipos T y U:

[code language="scala"]
scala&gt; myMethod(new Animal,new Car)
&lt;console&gt;:11: error: Cannot prove that Animal &lt;:&lt; Car. myMethod(new Animal,new Car) ^ scala&gt; myMethod(new Cat,new Animal)
($line15.$read$$iw$$iw$Cat@350aac89,$line14.$read$$iw$$iw$Animal@1c5920df)
[/code]

<h3>¿Y mis tipos?</h3>
Uno de los problemas al trabajar con <code>ClassTag</code> es la pérdida de información sobre los tipos que pueden parametrizar tu clase. Por ejemplo, si preguntamos por el <code>ClassTag</code> de <code>List[Int]</code> obtendremos que:

[code language="scala"]
scala&gt; println(scala.reflect.classTag[List[Int]])
scala.collection.immutable.List
[/code]

Como podéis ver, se pierde la información sobre el tipo <code>Int</code> que parametriza la lista. Este proceso de borrado de información de tipos en runtime es conocido como <em>type erasure</em>.

<a href="https://scalerablog.files.wordpress.com/2015/12/62517760.jpg" rel="attachment wp-att-1179"><img class="aligncenter size-medium wp-image-1179" src="https://scalerablog.files.wordpress.com/2015/12/62517760.jpg?w=300" alt="62517760" width="300" height="225" /></a>

No obstante, en caso de necesitar información estática sobre el tipo, podemos hacer uso de los <code>TypeTag</code> (los cuales introduciremos en futuros posts, cuando hablemos de macros).

[code language="scala"]
scala&gt; import scala.reflect.runtime.universe._
import scala.reflect.runtime.universe._

scala&gt; val tt = typeTag[List[Int]]
tt: reflect.runtime.universe.TypeTag[List[Int]] = TypeTag[scala.List[Int]]
[/code]

<h2>Problemas frecuentes</h2>
<h3>¿Cómo obtener la <code>Class</code> de un tipo <code>T</code>?</h3>

[code language="scala"]
scala&gt; classOf[Int]
res0: Class[Int] = int
[/code]

<h3>Tengo un <code>Class</code>, pero necesito un <code>ClassTag</code></h3>
Tan sencillo como

[code language="scala"]
scala&gt; val clazz = classOf[Int]
clazz: Class[Int] = int

scala&gt; val ctag = ClassTag(clazz)
ctag: scala.reflect.ClassTag[Nothing] = Int

scala&gt; val ctag = scala.reflect.ClassTag[Int](clazz)
ctag: scala.reflect.ClassTag[Int] = Int
[/code]

Fijaos que salvo que indiquemos el tipo de manera explícita, el constructor de <code>ClassTag</code> inferirá el tipo más genérico posible (en este caso <code>Nothing</code>).
<h3>¿T es un subtipo de U?</h3>
Hemos visto antes, que en tiempo de compilación, podemos usar <code>&lt;:&lt;</code> y similares para restringir los tipos pero, ¿qué ocurre en tiempo de runtime?

Podemos hacer uso del método <code>isAssignableFrom</code> de la case <code>Class</code> que nos indica si una clase es la misma (o superclase) comparado con otra:

[code language="scala"]
object A{
  def apply[T:ClassTag] = new {
    def isA[U:ClassTag]: Boolean = 
      classTag[T].runtimeClass.isAssignableFrom(classTag[U].runtimeClass)
  }
}
[/code]

Podríamos probar este snippet con:

[code language="scala"]
scala&gt; A[Int].isA[String]
res0: Boolean = false

scala&gt; A[String].isA[String]
res1: Boolean = true
[/code]

<h3>Detectar el tipo a partir de un Any</h3>
Este tip surge por una duda que me planteó un compañero acerca de si existía una manera de, teniendo la siguiente función:

[code language="scala"]
def isA[T](t: Any): Boolean = ???
[/code]

comprobar si el valor <code>t</code> era de tipo <code>T</code>.
El primer paso obvio para comprobarlo sería algo como:

[code language="scala"]
scala&gt; def isA[T](t: Any): Boolean = t.isInstanceOf[T]
&lt;console&gt;:7: warning: abstract type T is unchecked since it is eliminated by erasure
       def isA[T](t: Any): Boolean = t.isInstanceOf[T]
                                                   ^
isA: [T](t: Any)Boolean
[/code]

El compilador está avisando (y el que avisa no es traidor) que no tenemos información sobre T en tiempo de runtime, que se está perdiendo. ¿Qué ocurre si le pasamos distintos tipos? Se los zampa:

[code language="scala"]
scala&gt; isA[Int](&quot;&quot;)
res2: Boolean = true

scala&gt; isA[Int](3)
res3: Boolean = true
[/code]

En este caso dijimos "bueno, ¿porque no tratamos de comprobar si las clases son asignables entre sí, obteniendo información del <code>ClassTag</code>"?
Pues ocurría que,

[code language="scala"]
scala&gt; val x: Any = 3
x: Any = 3

scala&gt; x.getClass
res2: Class[_] = class java.lang.Integer

scala&gt; classOf[Int].isAssignableFrom(classOf[Int])
res3: Boolean = true

scala&gt; classOf[Int].isAssignableFrom(classOf[java.lang.Integer])
res4: Boolean = false
[/code]

La clase de <code>x</code> es <code>java.lang.Integer</code>, que no es asignable por parte de <code>Int</code> (lo mismo ocurría con variedad de tipos primitivos).
<h4>Al final...</h4>
Finalmente nos dimos cuenta de que <code>ClassTag</code> tiene un maravilloso método <code>unapply</code> que permite extraer un valor tipado si este pertenece a la clase del <code>ClassTag</code>. Justo lo que necesitábamos:

[code language="scala"]
def isA[T:ClassTag](t: Any): Boolean = 
  classTag[T].unapply(t).isDefined
[/code]

al probarlo en la REPL comprobamos con alegría que:

[code language="scala"]
scala&gt; val x: Any = 3
x: Any = 3

scala&gt; isA[String](x)
res5: Boolean = false

scala&gt; isA[Int](x)
res6: Boolean = true
[/code]

<h2>Conclusiones</h2>
No es habitual tener que lidiar con estos temas salvo que se estén construyendo sistemas lo suficientemente genéricos. No obstante, nunca está de más echar un vistazo al lado oscuro...

<a href="https://scalerablog.files.wordpress.com/2015/12/137134463824621.png" rel="attachment wp-att-1182"><img src="https://scalerablog.files.wordpress.com/2015/12/137134463824621.png?w=300" alt="137134463824621" width="300" height="209" class="aligncenter size-medium wp-image-1182" /></a>

¡Agur de limón!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1170</wp:post_id>
  <wp:post_date>2015-12-16 13:30:55</wp:post_date>
  <wp:post_date_gmt>2015-12-16 11:30:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>classtag-class-y-batallitas-de-la-mili</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="class"><![CDATA[class]]></category>
  <category domain="post_tag" nicename="classtag"><![CDATA[classtag]]></category>
  <category domain="post_tag" nicename="evidence"><![CDATA[evidence]]></category>
  <category domain="post_tag" nicename="implicit"><![CDATA[implicit]]></category>
  <category domain="post_tag" nicename="reflect"><![CDATA[reflect]]></category>
  <category domain="post_tag" nicename="runtime"><![CDATA[runtime]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="type"><![CDATA[type]]></category>
  <category domain="post_tag" nicename="typetag"><![CDATA[typetag]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[17848553624]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/677088543374712832";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>55</wp:comment_id>
    <wp:comment_author><![CDATA[miguelbucarest]]></wp:comment_author>
    <wp:comment_author_email>miguel.s.address@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>213.229.163.5</wp:comment_author_IP>
    <wp:comment_date>2015-12-16 17:57:56</wp:comment_date>
    <wp:comment_date_gmt>2015-12-16 15:57:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[hola!

tengo una duda, que hace este trozo?

object A{
  def apply[T:ClassTag] = new {
    def isA[U:ClassTag]: Boolean =
      classTag[T].runtimeClass.isAssignableFrom(classTag[U].runtimeClass)
  }
}

Me pierde lo del new {.....}

Es que no se como buscar ahora mismo, perdón por la pregunta, que esta un poco fuera de contexto :)

Tenéis algún post sobre los implicits?

un saludo]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>14635623</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1450281477</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1450281477.6856060028076171875;s:5:"event";s:9:"check-ham";s:4:"user";s:14:"miguelbucarest";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1450281479</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value>1</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-12-16 15:57:56</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>56</wp:comment_id>
    <wp:comment_author><![CDATA[miguelbucarest]]></wp:comment_author>
    <wp:comment_author_email>miguel.s.address@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>213.229.163.5</wp:comment_author_IP>
    <wp:comment_date>2015-12-16 17:59:06</wp:comment_date>
    <wp:comment_date_gmt>2015-12-16 15:59:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[acabo de ver linkado el articulo de implicits :facepalm:]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>14635623</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1450281549</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1450281548.528481960296630859375;s:5:"event";s:9:"check-ham";s:4:"user";s:14:"miguelbucarest";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1450281548</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-12-16 15:59:06</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>57</wp:comment_id>
    <wp:comment_author><![CDATA[jpaniego]]></wp:comment_author>
    <wp:comment_author_email>javiersantospaniego@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.82.197.162</wp:comment_author_IP>
    <wp:comment_date>2015-12-16 18:03:15</wp:comment_date>
    <wp:comment_date_gmt>2015-12-16 16:03:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Jajajaja no te fijes mucho tampoco en esa parte.

El 'new {...}' crea una instancia de una clase anónima con el body que definas dentro. Es solo syntax sugar para luego poder invocar a 'A[T].isA[U]'

Creo que haremos un post entonces para hablar de mecanismos para crear DSLs en Scala. 

Gracias por tu feedback :-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>55</wp:comment_parent>
    <wp:comment_user_id>59615419</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1450281797</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1450281797.637590885162353515625;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1450281798</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value>1</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2015-12-16 16:03:15</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>ClassTag, Class and war stories...</title>
  <link>https://scalerablog.wordpress.com/2015/12/21/classtag-class-and-war-stories/</link>
  <pubDate>Mon, 21 Dec 2015 10:30:25 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1186</guid>
  <description/>
  <content:encoded><![CDATA[Sometimes, when working with Scala, the need of working with type metadata just comes out. Even though macros might seem something too far, theorical and tricky (we'll speak about them later), sometimes getting some info about runtime classes is more than enough.
<h2>ClassTag</h2>
You could see a <code>ClassTag</code> as some 'wrapper' that Scala adds over <code>java.lang.Class</code> runtime classes.

In order to work with ClassTag we need to import:

[code language="scala"]
import scala.reflect.{ClassTag,classTag}
[/code]

Whereas the first member imported is the class, the second one is just a method that allows to get implicitly the <code>ClassTag</code> of a certain type. I.e.:

[code language="scala"]
scala&gt; classTag[Int]
res0: scala.reflect.ClassTag[Int] = Int
[/code]

Actually, it's just syntax sugar for:

[code language="scala"]
def classTag[T:ClassTag]: ClassTag[T] = 
  implicitly[ClassTag[T]]

scala&gt; classTag[Int]
res0: scala.reflect.ClassTag[Int] = Int
[/code]

There are methods (currently deprecated by type checking via TypeTag) like <code>&lt;:&lt;</code> or <code>=:=</code> that allow checking at compile time the type bounds.
For example, this:

[code language="scala"]
def myMethod[T,U](t: T,u: U)(implicit ev: &lt;:&lt;[T,U]):Unit = 
  println(t,u)
[/code]

allows constraining the relation between T and U types:

[code language="scala"]
scala&gt; myMethod(new Animal,new Car)
&lt;console&gt;:11: error: Cannot prove that Animal &lt;:&lt; Car. myMethod(new Animal,new Car)

scala&gt; myMethod(new Cat,new Animal)
($line15.$read$$iw$$iw$Cat@350aac89,$line14.$read$$iw$$iw$Animal@1c5920df)
[/code]

<h3>Where are my type parameters?</h3>
One of the main problems working with <code>ClassTag</code> is the information loss about the parameter types that you class might have. For example, if we ask for the <code>ClassTag</code> of <code>List[Int]</code> we'll get that:

[code language="scala"]
scala&gt; println(scala.reflect.classTag[List[Int]])
scala.collection.immutable.List
[/code]

As you can see, information about <code>Int</code> that parameterizes the list is lost. This process that removes parameter types info at runtime is well known as <em>type erasure</em>.

<a href="https://scalerablog.files.wordpress.com/2015/12/62517760.jpg" rel="attachment wp-att-1179"><img class="aligncenter size-medium wp-image-1179" src="https://scalerablog.files.wordpress.com/2015/12/62517760.jpg?w=300" alt="62517760" width="300" height="225" /></a>

Nevertheless, if we need info about the static type, we can use <code>TypeTag</code>s (which should be properly explained at future posts, when talking about macros).

[code language="scala"]
scala&gt; import scala.reflect.runtime.universe._
import scala.reflect.runtime.universe._

scala&gt; val tt = typeTag[List[Int]]
tt: reflect.runtime.universe.TypeTag[List[Int]] = TypeTag[scala.List[Int]]
[/code]

<h2>Frequent problems</h2>
<h3>How to get the <code>Class</code> of a known type <code>T</code>?</h3>

[code language="scala"]
scala&gt; classOf[Int]
res0: Class[Int] = int
[/code]

<h3>I have a <code>Class</code>, but I need a <code>ClassTag</code></h3>
As easy as:

[code language="scala"]
scala&gt; val clazz = classOf[Int]
clazz: Class[Int] = int

scala&gt; val ctag = ClassTag(clazz)
ctag: scala.reflect.ClassTag[Nothing] = Int

scala&gt; val ctag = scala.reflect.ClassTag[Int](clazz)
ctag: scala.reflect.ClassTag[Int] = Int
[/code]

Notice that, unless we explicitly point the type, <code>ClassTag</code> builder will infer the most generic possible type (<code>Nothing</code>).
<h3>Is T a subtype of U?</h3>
We've seen before that, at compile time, we can use <code>&lt;:&lt;</code> and so for constraining type bounds but, what if it takes place at runtime? How can we check it?

We can use <code>isAssignableFrom</code> method, from class <code>Class</code> that indicates whether a class is the same class (or superclass) compared to another one:

[code language="scala"]
object A{
  def apply[T:ClassTag] = new {
    def isA[U:ClassTag]: Boolean = 
      classTag[T].runtimeClass.isAssignableFrom(classTag[U].runtimeClass)
  }
}
[/code]

We could try this code snippet with:

[code language="scala"]
scala&gt; A[Int].isA[String]
res0: Boolean = false

scala&gt; A[String].isA[String]
res1: Boolean = true
[/code]

<h3>Infer the type of an Any</h3>
This tip comes out of a question that a colleague made me. 'Is there any way to, having the folling function:

[code language="scala"]
def isA[T](t: Any): Boolean = ???
[/code]

check if <code>t</code> value is <code>T</code> typed?'
First obvious step for checking it would be something similar to:

[code language="scala"]
scala&gt; def isA[T](t: Any): Boolean = t.isInstanceOf[T]
&lt;console&gt;:7: warning: abstract type T is unchecked since it is eliminated by erasure
       def isA[T](t: Any): Boolean = t.isInstanceOf[T]
                                                   ^
isA: [T](t: Any)Boolean
[/code]

Compiler is warning us (Forewarned is forearmed) that we won't have information about T at runtime, that it's getting lost. What if we try with different types? It eats them all:

[code language="scala"]
scala&gt; isA[Int](&quot;&quot;)
res2: Boolean = true

scala&gt; isA[Int](3)
res3: Boolean = true
[/code]

In this case, we said 'okay, what if we just try to check if classes are assignables, getting the info from the <code>ClassTag</code>'?
It happened that,

[code language="scala"]
scala&gt; val x: Any = 3
x: Any = 3

scala&gt; x.getClass
res2: Class[_] = class java.lang.Integer

scala&gt; classOf[Int].isAssignableFrom(classOf[Int])
res3: Boolean = true

scala&gt; classOf[Int].isAssignableFrom(classOf[java.lang.Integer])
res4: Boolean = false
[/code]

The <code>x</code> class is <code>java.lang.Integer</code>, which is not assignable from <code>Int</code> class (the same happens with many other primitive types).
<h4>So we finally...</h4>
...realized that <code>ClassTag</code> has a wonderfull <code>unapply</code> method that allows to get a typed value if this belongs to the <code>ClassTag</code> parameterized class. Just what we needed:

[code language="scala"]
def isA[T:ClassTag](t: Any): Boolean = 
  classTag[T].unapply(t).isDefined
[/code]

When we tried it at the REPL, we could gladly check that:

[code language="scala"]
scala&gt; val x: Any = 3
x: Any = 3

scala&gt; isA[String](x)
res5: Boolean = false

scala&gt; isA[Int](x)
res6: Boolean = true
[/code]

<h2>Conclusions</h2>
It's not very common to deal with all these isses unless you're building a generic enough system. However, it doesn't harm you to have a little idea about what the dark side is about...

<a href="https://scalerablog.files.wordpress.com/2015/12/137134463824621.png" rel="attachment wp-att-1182"><img src="https://scalerablog.files.wordpress.com/2015/12/137134463824621.png?w=300" alt="137134463824621" width="300" height="209" class="aligncenter size-medium wp-image-1182" /></a>

Peace out!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1186</wp:post_id>
  <wp:post_date>2015-12-21 12:30:25</wp:post_date>
  <wp:post_date_gmt>2015-12-21 10:30:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>classtag-class-and-war-stories</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="class"><![CDATA[class]]></category>
  <category domain="post_tag" nicename="classtag"><![CDATA[classtag]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="evidence"><![CDATA[evidence]]></category>
  <category domain="post_tag" nicename="implicit"><![CDATA[implicit]]></category>
  <category domain="post_tag" nicename="reflect"><![CDATA[reflect]]></category>
  <category domain="post_tag" nicename="runtime"><![CDATA[runtime]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="type"><![CDATA[type]]></category>
  <category domain="post_tag" nicename="typetag"><![CDATA[typetag]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[17996169572]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/678886472540262405";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>...y próspero año nuevo!</title>
  <link>https://scalerablog.wordpress.com/2015/12/23/y-prospero-ano-nuevo/</link>
  <pubDate>Wed, 23 Dec 2015 10:30:34 +0000</pubDate>
  <dc:creator>scalerablog</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1192</guid>
  <description/>
  <content:encoded><![CDATA[Antes de empezar a ponernos cariñosos, queríamos hablar de cifras de este año.

<a href="https://scalerablog.files.wordpress.com/2015/12/7kpylaz.png" rel="attachment wp-att-1193"><img class="aligncenter size-medium wp-image-1193" src="https://scalerablog.files.wordpress.com/2015/12/7kpylaz.png?w=300" alt="7KpyLAZ" width="300" height="253" /></a>

Desde marzo de 2015 hemos:

...publicado casi <strong>40 posts</strong> (76 incluyendo traducciones).
...tenido <strong>+5400 visitas</strong>, de los cuales...
...son <strong>+2500 visitantes</strong> distintos.
...con <strong>187 visitas</strong> al día en el post más visitado.
...<strong>+140 tweets</strong>.
...<strong>+100 seguidores</strong> en Twitter.

Y todo ello gracias a vosotros.

Además, hemos contado con la colaboración de <a href="https://twitter.com/javifdev">Javier Fuentes</a> para un excelente post sobre <a href="https://scalerablog.wordpress.com/2015/11/18/shapeless-introduccion-y-hlists-parte-1/">Shapeless</a> (aún le debemos unas cervezas). Y para el mes que viene tenemos otro post pactado con otro crack de Scala.
<h2>¿Y ahora qué?</h2>
Ahora toca tomarnos un breve pero merecido descanso navideño.
Prometemos volver para año nuevo con las pilas cargadas y nuevas ideas.

<img class="alignnone size-full wp-image-1202" src="https://scalerablog.files.wordpress.com/2015/12/7f8ee8ed1b232537580e66e4acbf0a22.jpg" alt="7f8ee8ed1b232537580e66e4acbf0a22" width="600" height="313" />

Pasad unas felices fiestas

- El equipo de Scalera -]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1192</wp:post_id>
  <wp:post_date>2015-12-23 12:30:34</wp:post_date>
  <wp:post_date_gmt>2015-12-23 10:30:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>y-prospero-ano-nuevo</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="announcement"><![CDATA[announcement]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="news"><![CDATA[news]]></category>
  <category domain="post_format" nicename="post-format-aside"><![CDATA[Minientrada]]></category>
  <category domain="post_tag" nicename="staff"><![CDATA[staff]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18056275385]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/679611066150567936";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>...and happy new year!</title>
  <link>https://scalerablog.wordpress.com/2015/12/28/and-happy-new-year/</link>
  <pubDate>Mon, 28 Dec 2015 10:30:29 +0000</pubDate>
  <dc:creator>scalerablog</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1209</guid>
  <description/>
  <content:encoded><![CDATA[Before getting affectionate, we wanted to share with you some figures about current year.

<a href="https://scalerablog.files.wordpress.com/2015/12/7kpylaz.png" rel="attachment wp-att-1193"><img class="aligncenter size-medium wp-image-1193" src="https://scalerablog.files.wordpress.com/2015/12/7kpylaz.png?w=300" alt="7KpyLAZ" width="300" height="253" /></a>

Since March 2015 we have:

...published almost <strong>40 posts</strong> (76 including translations).
...had <strong>+5400 visits</strong>, which...
...<strong>+2500</strong> are different visitors.
...with <strong>187 visits</strong> per day at the most visited post.
...<strong>+140 tweets</strong>.
...<strong>+100 followers</strong> on Twitter.

And all thank to you.

Besides, we got lucky and counted on <a href="https://twitter.com/javifdev">Javier Fuentes</a> collaboration, as you can see at his awesome post about <a href="https://scalerablog.wordpress.com/2015/11/18/shapeless-introduccion-y-hlists-parte-1/">Shapeless</a> (we still owe him some beers). And for next month, we have nearly arranged some other post with another Scala crack.
<h2>What's next?</h2>
Now we re going to take a little but well-deserved christmas break.
We promise to be back next year with fully charged batteries and new ideas.

<img class="alignnone size-full wp-image-1202" src="https://scalerablog.files.wordpress.com/2015/12/7f8ee8ed1b232537580e66e4acbf0a22.jpg" alt="7f8ee8ed1b232537580e66e4acbf0a22" width="600" height="313" />

Merry Christmas!

- Scalera staff-]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1209</wp:post_id>
  <wp:post_date>2015-12-28 12:30:29</wp:post_date>
  <wp:post_date_gmt>2015-12-28 10:30:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>and-happy-new-year</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="announcement"><![CDATA[announcement]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="news"><![CDATA[news]]></category>
  <category domain="post_format" nicename="post-format-aside"><![CDATA[Minientrada]]></category>
  <category domain="post_tag" nicename="staff"><![CDATA[staff]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18179865560]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/681424956761063425";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Distributed key-value registry with Akka Clustering</title>
  <link>https://scalerablog.wordpress.com/2016/01/18/distributed-key-value-registry-with-akka-clustering/</link>
  <pubDate>Mon, 18 Jan 2016 10:30:25 +0000</pubDate>
  <dc:creator>carlopolo</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1215</guid>
  <description/>
  <content:encoded><![CDATA[Almost a year ago, I wanted to see how good Akka was, and how easy it would be to create a distributed hash with Akka Clustering...

So I created a sample project to play with it a little bit (<strong><a href="http://roclas.github.io/akka-distributed-hash/" target="_blank">https://github.com/roclas/akka-distributed-hash</a> - </strong>I actually changed a couple of things just before writing this post).

It consist of a distributed key-value registry supported by different akka instances with the same code launched on different nodes.

<a href="https://scalerablog.files.wordpress.com/2015/12/39a0aab0c5b10c7204bc38788dfac55d02140c91f8b07ea4f036d673eec97379.jpg" rel="attachment wp-att-1228"><img class="aligncenter size-medium wp-image-1228" src="https://scalerablog.files.wordpress.com/2015/12/39a0aab0c5b10c7204bc38788dfac55d02140c91f8b07ea4f036d673eec97379.jpg?w=239" alt="39a0aab0c5b10c7204bc38788dfac55d02140c91f8b07ea4f036d673eec97379" width="239" height="300" /></a>

The idea behind it is very straight forward: you run the application a few times simultaneously (passing a different port number as a parameter) and once the first node (if it is in the seeds list) has started, you can connect as many nodes to the cluster as you want. Nodes (in this case, actors) have a hash that is modified through HTTP requests, and that hash's changes are propagated across the cluster, so that every node ends up having the same information.

The seed nodes are on <a href="https://github.com/roclas/akka-distributed-hash/blob/master/src/main/resources/application.conf">src/main/resources/application.conf</a>

When the application starts, one of the first thing it does is trying to join the cluster. In order to do that, it goes through the list of seeds and tries to connect to the first available node.

<img class="" src="https://raw.githubusercontent.com/roclas/akka-distributed-hash/gh-pages/explanation.gif" alt="" width="434" height="271" />

A very interesting fact is that if the node is the first element of the seeds list, and it is not the first node we start, we will most likely end up having an island in the cluster (when it finds itself as the first element of the seeds list, it will connect to itself and will create an island). The previously started nodes will be in their own sub-cluster, and the subsequently created nodes will get connected to this node, creating an isolated second sub-cluster.

<a href="https://scalerablog.files.wordpress.com/2016/01/akka-clustering-graph.png" rel="attachment wp-att-1233"><img class="aligncenter wp-image-1233" src="https://scalerablog.files.wordpress.com/2016/01/akka-clustering-graph.png?w=700" alt="akka clustering graph" width="567" height="371" /></a>

I have avoided this problem by doing a trick (<strong>maybe you could find a more elegant way?</strong>):

[code language="scala"]
val selfAddress = Cluster(system).selfAddress
val seeds= system.settings
  .config.getList(&quot;akka.cluster.seed-nodes&quot;)
System.setProperty(&quot;akka.cluster.seed-nodes&quot;,
seeds filter(!_.toString.contains(selfAddress.toString)) toString)
[/code]

As a general rule, we could say it is not a bad idea to remove your own address from the seeds list before joining the cluster (by doing that, you would not have any problem; but I did not want to keep a different config file for each node I create and that's why each of them programmatically removes itself from the seeds list).

Once the actor is connected to the cluster, I can receive cluster messages such as:

[code language="scala"]
MemberUp (when a new node joins the cluster)
MemberRemoved (when a node leaves the cluster)
[/code]

Each actor will have a hash object and a tiny HTTP server (that will respond to get, put and delete requests). Put requests will add elements to the actor's internal hash, and remove requests will delete them.

And from this point on, you can let your imagination run wild:
<ul>
	<li>Every time we modify an actor's hash, it will send a message  notifying its peers of the change, so that they can change their hash too</li>
	<li>After actualizing the hash, by another actors request, it sends a message back with its hash's md5 so that the original actor can check if the changes were successfully made</li>
	<li>When a new member joins the cluster, it synchronizes its state (its hash) with the other nodes</li>
</ul>
Please <a href="https://github.com/roclas/akka-distributed-hash/archive/master.zip">download the zip</a> or clone (git@github.com:roclas/akka-distributed-hash.git) the <a href="http://roclas.github.io/akka-distributed-hash/">project</a>, and try it yourselves; it is so easy to try and very fun to play with. It's a very simple example that you can use as a base for more complex projects. Everything is explained on the <a href="https://github.com/roclas/akka-distributed-hash/blob/master/README.md">README.md</a> file.

Also, don't forget to tell us of useful things you think you could do with Akka Clustering. Fork, use and improve <a href="https://github.com/roclas/akka-distributed-hash/tree/master" target="_blank">the project</a>, and suggest us things we could do with this awesome technology.

&nbsp;

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1215</wp:post_id>
  <wp:post_date>2016-01-18 12:30:25</wp:post_date>
  <wp:post_date_gmt>2016-01-18 10:30:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>distributed-key-value-registry-with-akka-clustering</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="actor"><![CDATA[actor]]></category>
  <category domain="post_tag" nicename="akka"><![CDATA[akka]]></category>
  <category domain="post_tag" nicename="carlopolo"><![CDATA[carlopolo]]></category>
  <category domain="post_tag" nicename="clustering"><![CDATA[clustering]]></category>
  <category domain="post_tag" nicename="distributed"><![CDATA[distributed]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="key"><![CDATA[key]]></category>
  <category domain="post_tag" nicename="registry"><![CDATA[registry]]></category>
  <category domain="post_tag" nicename="roclas"><![CDATA[roclas]]></category>
  <category domain="post_tag" nicename="value"><![CDATA[value]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18866930253]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/689037499625156612";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Registro clave-valor distribuido con Akka Clustering</title>
  <link>https://scalerablog.wordpress.com/2016/01/13/registro-clave-valor-distribuido-con-akka-clustering/</link>
  <pubDate>Wed, 13 Jan 2016 10:30:12 +0000</pubDate>
  <dc:creator>carlopolo</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1230</guid>
  <description/>
  <content:encoded><![CDATA[Hace casi un año, quise poner a prueba cómo de bueno era Akka y lo sencillo que sería crear un registro distribuido con Akka Clustering...

De modo que creé un proyecto de prueba para cacharrear un poco con ello (<strong><a href="https://github.com/roclas/akka-distributed-hash" target="_blank">https://github.com/roclas/akka-distributed-hash</a> - </strong>de hecho, he cambiado un par de cosas para dar forma a este post).

Se trata de un registro clave-valor distribuido quese apoya en distintas instancias de Akka con el mismo código, lanzadas en diferentes nodos.

<a href="https://scalerablog.files.wordpress.com/2015/12/39a0aab0c5b10c7204bc38788dfac55d02140c91f8b07ea4f036d673eec97379.jpg" rel="attachment wp-att-1228"><img class="aligncenter size-medium wp-image-1228" src="https://scalerablog.files.wordpress.com/2015/12/39a0aab0c5b10c7204bc38788dfac55d02140c91f8b07ea4f036d673eec97379.jpg?w=239" alt="39a0aab0c5b10c7204bc38788dfac55d02140c91f8b07ea4f036d673eec97379" width="239" height="300" /></a>

La idea, en esencia, es muy sencilla: lanzas varias instancias de la aplicación al mismo tiempo (especificando puertos distintos como parámetros) y, una vez el primer nodo (se se encuentra en la lista de nodos semilla) ha empezado, puedes conectar tantos nodos del cluster como quieras. Los nodos (en este caso, actores) tienen una clave o hash que se modifica a través de peticiones HTTP, y dichos cambios se propagan por el cluster, de manera que todo nodo acaba por tener la misma información replicada.

Los nodos semilla se especifican en <a href="https://github.com/roclas/akka-distributed-hash/blob/master/src/main/resources/application.conf">src/main/resources/application.conf</a>

Cuando la aplicación ha arrancado, una de las primeras cosas que hace es intentar unirse al cluster. Para hacer esto, comprueba la lista de nodos semilla e intenta conectarse al primer nodo disponible.

<img class="" src="https://raw.githubusercontent.com/roclas/akka-distributed-hash/gh-pages/explanation.gif" alt="" width="434" height="271" />

Un dato muy interesante es que si el nodo se encuentra en la primera posición de la lista de semillas, si no es el primer nodo que arrancamos, es muy probable que acabe por generar una isla en el cluster (cuando se encuentra a si mismo como el primer nodo disponible en la lista de semillas sin ser el primero de dicha lista, se conecta a sí mismo creando así una isla). Los nodos que hayan arrancado previamente se encontrarán en su propio subcluster, y los nodos creados a partir de entonces se conectaran a este último, creando así un segundo sub-cluster aislado.

<a href="https://scalerablog.files.wordpress.com/2016/01/akka-clustering-graph.png" rel="attachment wp-att-1233"><img class="aligncenter wp-image-1233 " src="https://scalerablog.files.wordpress.com/2016/01/akka-clustering-graph.png?w=700" alt="akka clustering graph" width="476" height="311" /></a>

He evitado este problema usando un pequeño truco (<strong>es probable que haya una forma más elegante de hacerlo</strong>):

[code language="scala"]
val selfAddress = Cluster(system).selfAddress
val seeds= system.settings
  .config.getList(&quot;akka.cluster.seed-nodes&quot;)
System.setProperty(&quot;akka.cluster.seed-nodes&quot;,
seeds filter(!_.toString.contains(selfAddress.toString)) toString)
[/code]

Como normal general, podríamos decir que no es una mala idea eliminar la propia dirección de la lista antes de unirse al cluster (así evitamos el problema, pero sin tener que mantener un fichero de configuración distinto por cada nodo que cree, eliminándose a sí mismo de manera programática de la lista).

Una vez que el actor se ha conectado al cluster, pueden recibirse mensajes como:

[code language="scala"]
MemberUp (when a new node joins the cluster)
MemberRemoved (when a node leaves the cluster)
[/code]

Cada actor tiene un objeto registro y un servidor HTTP ligero (que responderá a peticiones de GET, PUT y DELETE. Las peticiones PUT añadirán elementos al registro interno del actor y las peticiones DELETE los eliminarán.

Y a partir de este punto, podéis hacer tanto como os imaginéis:
<ul>
	<li>Cada vez que se modifique el registro de un actor, enviar un mensaje a los compañeros para notificarles el cambio y que así modifiquen su registro interno</li>
	<li>Después de actualizar el registro, mediante otra petición de actor, mandar un mensaje de vuelta con su md5 para que el actor original compruebe si los cambios se han realizado correctamente.</li>
	<li>Cuando un nuevo miembro se una al cluster, sincronizar su estado (su registro) con el resto de nodos.</li>
</ul>
Podéis descargaros <a href="https://github.com/roclas/akka-distributed-hash/archive/master.zip">el zip </a> o clonar (git@github.com:roclas/akka-distributed-hash.git) el <a href="https://github.com/roclas/akka-distributed-hash">proyecto</a>, y probarlo por vosotros mismo; es muy sencillo cacharrear con ello y se puede usar como código base para proyectos más complejos (se explica todo en el fichero <a href="https://github.com/roclas/akka-distributed-hash/blob/master/README.md">README.md</a>.

Por último, contadnos que cosas útiles se podrían hacer con Akka Clustering. Forkead, usad y mejorad el proyectoFork, use and improve <a href="https://github.com/roclas/akka-distributed-hash" target="_blank">the project</a>, y sugeridnos que cosas se podrían hacer con esta tecnología tan alucinante.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1230</wp:post_id>
  <wp:post_date>2016-01-13 12:30:12</wp:post_date>
  <wp:post_date_gmt>2016-01-13 10:30:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>registro-clave-valor-distribuido-con-akka-clustering</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="actor"><![CDATA[actor]]></category>
  <category domain="post_tag" nicename="akka"><![CDATA[akka]]></category>
  <category domain="post_tag" nicename="carlopolo"><![CDATA[carlopolo]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="clustering"><![CDATA[clustering]]></category>
  <category domain="post_tag" nicename="distributed"><![CDATA[distributed]]></category>
  <category domain="post_tag" nicename="key"><![CDATA[key]]></category>
  <category domain="post_tag" nicename="registry"><![CDATA[registry]]></category>
  <category domain="post_tag" nicename="roclas"><![CDATA[roclas]]></category>
  <category domain="post_tag" nicename="value"><![CDATA[value]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18702522103]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/687223522477752321";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Scalera challenge: From Earth to the Moon</title>
  <link>https://scalerablog.wordpress.com/2016/01/20/scalera-challenge-from-earth-to-the-moon/</link>
  <pubDate>Wed, 20 Jan 2016 10:00:17 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1271</guid>
  <description/>
  <content:encoded><![CDATA[We have started a new year, and we want to make some solid headway. As we promised, one of our New Year's resolutions is trying to innovate and make this blog more social. For this reason, let us introduce you the first Scalera challenge, just for driving you crazy :-)

<h2> From Earth to the Moon </h2>

The ESA (European Space Agency) wants to send two robots (rovers) to the Moon. They are fitted with a sophisticated landing support: a parachute. The problem here is that it seems both robots won't land at the same place...
Once they've landed at the same place as their own parachutes at the Moon, which has a discrete surface of infinite size, both rovers must find each other to start the mission together.

The challenge consists on programming the rovers using a limited command set, so they finally manage to find each other. Keep in mind that the same program will be loaded on both robots and they don't have any programatic way to know which their identifiers are.

<h2> DSL for manouver</h2>

The command set that will be used for programming the rovers is composed of:

<ul>	
<li><strong>MOVE &lt;direction&gt;</strong> : It moves the rover a discrete space unit to the left or to the right.
</li>
<li><strong>IF FOUND PARACHUTE &lt;command&gt;</strong> : If the rover finds a parachute on the floor, at its <del>feet</del> wheels, then execute the given command.
</li>
<li><strong>NOP</strong>: Rover does nothing...
</li>
<li><strong>GOTO &lt;lineId&gt;</strong> : It jumps to the command placed at the given line.
</li>
</ul>

<h2> Participate! </h2>

<a href="https://scalerablog.files.wordpress.com/2016/01/moonrover_example.png" rel="attachment wp-att-1263"><img src="https://scalerablog.files.wordpress.com/2016/01/moonrover_example.png?w=300" alt="moonrover_example" width="300" height="224" class="aligncenter size-large wp-image-1263" /></a>

You can find the project for start coding your robots <a href="https://github.com/Scalera/moonrover" target="_blank">at github</a>.
You'll find all the technical info you might need at the <strong>README.md</strong> file.

If you want to participate, just drop us an email to <strong><u>scalerablog at gmail dot com</u></strong> with the <strong>Launch.scala</strong> file that contains the program you have designed  to solve the problem. Don't forget to include your twitter user name for mentioning you at our virtual hall of fame :-P

The deadline will be two natural weeks from this post publication.

Among all best solutions (less clock ticks, less program lines,...) we'll raffle the blog t-shirt :-)

Come on and good luck!

<blockquote><em>How many things have been denied one day, only to become realities the next!</em>
<br>Jules Verne</blockquote>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1271</wp:post_id>
  <wp:post_date>2016-01-20 12:00:17</wp:post_date>
  <wp:post_date_gmt>2016-01-20 10:00:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scalera-challenge-from-earth-to-the-moon</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="challenge"><![CDATA[challenge]]></category>
  <category domain="post_tag" nicename="command"><![CDATA[command]]></category>
  <category domain="post_tag" nicename="dsl"><![CDATA[dsl]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="esa"><![CDATA[esa]]></category>
  <category domain="post_tag" nicename="goto"><![CDATA[goto]]></category>
  <category domain="post_tag" nicename="moon"><![CDATA[moon]]></category>
  <category domain="post_tag" nicename="move"><![CDATA[move]]></category>
  <category domain="post_tag" nicename="nop"><![CDATA[nop]]></category>
  <category domain="post_tag" nicename="prize"><![CDATA[prize]]></category>
  <category domain="post_tag" nicename="robot"><![CDATA[robot]]></category>
  <category domain="post_tag" nicename="rover"><![CDATA[rover]]></category>
  <category domain="post_tag" nicename="scalera"><![CDATA[scalera]]></category>
  <category domain="post_tag" nicename="space"><![CDATA[space]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18935012607]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/689749465008201728";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>95</wp:comment_id>
    <wp:comment_author><![CDATA[Scala: One language to rule them all (I) | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2016/04/18/scala-one-language-to-rule-them-all-i/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.100.20</wp:comment_author_IP>
    <wp:comment_date>2016-04-18 12:02:16</wp:comment_date>
    <wp:comment_date_gmt>2016-04-18 10:02:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] complex example of our uni-dimensional robot API (at this point you must have realized that the previous Scalera Challenge included a beautiful DSL), it can be altered to make it follow the above-described functional [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1460973737.685659885406494140625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1460973816.7149178981781005859375;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1460973816</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-04-18 10:02:16</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Tipos dinámicos</title>
  <link>https://scalerablog.wordpress.com/2016/02/03/tipos-dinamicos/</link>
  <pubDate>Wed, 03 Feb 2016 10:00:27 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1277</guid>
  <description/>
  <content:encoded><![CDATA[Hoy traemos un poco <del>más</del> de magia negra. Leyendo el otro día un poco sobre los procesos de mejora de Scala (SIPs) me encontré <a href="http://docs.scala-lang.org/sips/completed/type-dynamic.html" target="_blank">algo</a> que realmente me llamó la atención: tipos dinámicos.

<h2>¿Qué son?</h2>

Los tipos dinámicos permiten definir el comportamiento de un objeto cuando se invoca un método o se intenta acceder a un miembro que no existe. Por ejemplo:

[code language="scala"]
class MyClass {
  def someMethod(): String = &quot;hi&quot;
}
val myInstance = new MyClass
myInstance.nonExistentMethod
[/code]

dará un fallo en tiempo de compilación. Con los tipos dinámicos podemos decir que en caso de que se invoque a un método, se llame como se llame, devuelva cierto valor.

<h2>¿Cómo funcionan?</h2>

Para poder utilizar los tipos dinámicos, es preciso importar <code>import scala.language.dynamics</code> y extender del trait <code><a href="https://github.com/scala/scala/blob/v2.11.7/src/library/scala/Dynamic.scala" target="_blank">Dynamic</a></code>:

[code language="scala"]
class MyClass extends Dynamic {
  //...
}
[/code]

La clase (o trait) que definamos puede tener todos los atributos y métodos que queramos, pero además podemos implementar los siguientes métodos:

<h3>applyDynamic</h3>

este método se encarga de gestionar las llamadas a métodos de la instancia. 
Si queremos que nuestra instancia sepa como invocar el método 'myMethod' con el argumento "hi", podemos hacerlo como sigue:

[code language="scala"]
class MyClass extends Dynamic {
  def applyDynamic(methodName: String)(args: Any*) = {
    val beginning = 
      args.headOption.getOrElse(&quot;hello&quot;)
    if (methodName==&quot;myMethod&quot;) 
      println(beginning + &quot; you&quot;)
    else println(&quot;Dunno...&quot;)
  }
}
[/code]

Si ahora creamos una instancia e invocamos otro método inventado, veremos que imprimirá por pantalla que no sabe a que se refiere:

[code language="scala"]
val myInstance = new MyClass
myInstance.anotherMethod()//Dunno...
[/code]

Y si invocamos al método <code>myMethod</code> que tenemos contemplado:

[code language="scala"]
myInstance.myMethod(&quot;hi&quot;)//hi you
myInstance.myMethod(2)//2 you
myInstance.myMethod()//hello you
[/code]

<h3>applyDynamicNamed</h3>

Funciona exactamente igual que el <code>applyDynamic</code> solo que permite obtener por nombre los argumentos con los que se invoca al método:

[code language="scala"]
class MyClass extends Dynamic {
  def applyDynamicNamed(name: String)(args: (String, Any)*) = {
    val (argName,argValue) = 
      args.headOption.getOrElse((&quot;unknown&quot;,&quot;hello&quot;))
    if (name==&quot;myMethod&quot;) 
      println(s&quot;$argName : $argValue - you&quot;)
    else println(&quot;Dunno...&quot;)
  }
}
[/code]

Si se invoca al método sin indicar el nombre de algún parámetro, este será cadena vacía, pero para que se invoque a <code>applyDynamicNamed</code> al menos uno de los argumentos debe tener nombre:

[code language="scala"]
myInstance.myMethod(test=2)//test : 2 - you
myInstance.myMethod(true,test=2)// : true - you
myInstance.myMethod(true)
/*
error: value applyDynamic is not a member of MyClass
error after rewriting to myInstance.&lt;applyDynamic: error&gt;(&quot;myMethod&quot;)
possible cause: maybe a wrong Dynamic method signature?
*/
[/code]

<h3>selectDynamic</h3>

Sería el equivalente a un getter dinámico. Es decir:

[code language="scala"]
class MyClass extends Dynamic {
  def selectDynamic(name: String) = 
    s&quot;My $name equals this string&quot;
}
val myInstance = new MyClass
myInstance.someAttribute//My someAttribute equals this string
[/code]
<h3>updateDynamic</h3>

Y con este método definimos el comportamiento de actualización de miembros que no están definidos de manera estática:

[code language="scala"]
class MyClass extends Dynamic {
  def updateDynamic(name: String)(value: Any) {
    println(s&quot;you updated your attribute $name with $value value&quot;)
  }
}
val myInstance = new MyClass
myInstance.myAttribute = 2
//you updated your attribute myAttribute with 2 value
[/code]

NB: En la REPL no funciona de manera muy católica (lo interpreta como un getter). Si lo encapsulais dentro de un App debería funcionar.

Easy peasy.

<h2>¿Por qué en un lenguaje de tipado estático?</h2>

<a href="https://scalerablog.files.wordpress.com/2016/01/haters.jpg" rel="attachment wp-att-1281"><img src="https://scalerablog.files.wordpress.com/2016/01/haters.jpg?w=300" alt="haters" width="300" height="216" class="aligncenter size-medium wp-image-1281" /></a>

La motivación oficial de la propuesta de mejora es:

<blockquote>Static types are great, but sometimes we would like to do without them. This could give better support for flexible DSLs that do not require defining the members of a type. It could also provide simpler interfaces with dynamic languages. Scala already provides a number of ways to escape from the straightjacket of the type system: The universal type Any, type tests and type casts, as well as pattern matching. However, one thing is missing: When selecting a member qual.sel, sel must be defined in qual, or be addable with an implicit conversion. This means that we can select members or call methods only if it is statically known that the receiver type supports that member.</blockquote>

Si bien es cierto que los más puristas pueden verlo como una aberración hacia la naturaleza de tipado estático del lenguaje, para los más malabaristas puede dar margen de maniobra a la hora de jugarse el tipo definiendo DSLs sin comprobaciones en tiempo de compilación. Juzguen ustedes.

¡Agur de limón!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1277</wp:post_id>
  <wp:post_date>2016-02-03 12:00:27</wp:post_date>
  <wp:post_date_gmt>2016-02-03 10:00:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tipos-dinamicos</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="apply"><![CDATA[apply]]></category>
  <category domain="post_tag" nicename="applydynamic"><![CDATA[applyDynamic]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="dynamic"><![CDATA[dynamic]]></category>
  <category domain="post_tag" nicename="getter"><![CDATA[getter]]></category>
  <category domain="post_tag" nicename="haters"><![CDATA[haters]]></category>
  <category domain="post_tag" nicename="setter"><![CDATA[setter]]></category>
  <category domain="post_tag" nicename="sip"><![CDATA[sip]]></category>
  <category domain="post_tag" nicename="static"><![CDATA[static]]></category>
  <category domain="post_tag" nicename="type"><![CDATA[type]]></category>
  <category domain="post_tag" nicename="typed"><![CDATA[typed]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6db5344b9a4dbaa721e891272b2b898e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_213fef8dd5abac90e34b140a05c3b7cd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_261ef5865e801ef9becd8a1bd09def02</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a8c3de2023ec49371df6e69930d85e7d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_72c636fd2b7e17808ce50ea79807e27d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[19416864182]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/694822928509071360";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>69</wp:comment_id>
    <wp:comment_author><![CDATA[miguelbucarest]]></wp:comment_author>
    <wp:comment_author_email>miguel.s.address@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>213.229.163.5</wp:comment_author_IP>
    <wp:comment_date>2016-02-03 18:48:59</wp:comment_date>
    <wp:comment_date_gmt>2016-02-03 16:48:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Muy útil, es mucho más limpio que en PHP ya que tienes que extender de Dynamic.

Yo utilicé este tipo de cosas para construir un ORM y poder implementar los típicos "findByXXXXXX". Otro caso de uso fue para hacer una especie de Bridge entre una clase enormisima legacy y la versión moderna, mientras reimplementábamos, ibamos haciendo un fallback a la clase vieja con este tipo de cosas....

Por si a alguien le ayuda a ver casos de uso más mundanos.

Gracias por el aporte! :-D]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>14635623</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1454518141</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1454518141.8312358856201171875;s:5:"event";s:9:"check-ham";s:4:"user";s:14:"miguelbucarest";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1454518142</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value>1</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-02-03 16:48:59</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Dynamic types</title>
  <link>https://scalerablog.wordpress.com/2016/02/08/dynamic-types/</link>
  <pubDate>Mon, 08 Feb 2016 10:00:16 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1289</guid>
  <description/>
  <content:encoded><![CDATA[Today we bring you some <del>extra</del> black magic. I was reading the other day a little bit about the Scala Improvement Processes (SIPs), I found <a href="http://docs.scala-lang.org/sips/completed/type-dynamic.html" target="_blank">something</a> that really got my attention: dynamic types.

<h2>What are they?</h2>

Dynamic types allow to define the behavior of some object when a method or a member that doesn't exist is tried to be accessed. I.e.:

[code language="scala"]
class MyClass {
  def someMethod(): String = &quot;hi&quot;
}
val myInstance = new MyClass
myInstance.nonExistentMethod
[/code]

will complain at compile time. With dynamic types we can decide that, in case some whatever-its-name-is method is invoked, it will return certain value.

<h2>How do they work?</h2>

In order to use dynamic types, it's necessary to <code>import scala.language.dynamics</code> and extend trait <code><a href="https://github.com/scala/scala/blob/v2.11.7/src/library/scala/Dynamic.scala" target="_blank">Dynamic</a></code>:

[code language="scala"]
class MyClass extends Dynamic {
  //...
}
[/code]

The class (or trait) that we will define may have all the attributes and methods we want, but we can also define the following:

<h3>applyDynamic</h3>

this method is in charge of managing the invocations to the instance methods.
If we want our instance to know how to invoke 'myMethod' method with a 'hi' parameter, we can do it as follows:

[code language="scala"]
class MyClass extends Dynamic {
  def applyDynamic(methodName: String)(args: Any*) = {
    val beginning = 
      args.headOption.getOrElse(&quot;hello&quot;)
    if (methodName==&quot;myMethod&quot;) 
      println(beginning + &quot; you&quot;)
    else println(&quot;Dunno...&quot;)
  }
}
[/code]

If we now create a new instance and we invoke another made-up method, we'll see that it will print out that it doesn't know what you're talking about:

[code language="scala"]
val myInstance = new MyClass
myInstance.anotherMethod()//Dunno...
[/code]

And if we invoke the <code>myMethod</code> method we've considered:

[code language="scala"]
myInstance.myMethod(&quot;hi&quot;)//hi you
myInstance.myMethod(2)//2 you
myInstance.myMethod()//hello you
[/code]

<h3>applyDynamicNamed</h3>

It works exactly like the <code>applyDynamic</code> method, except that it only allows to get by name the parameters that are used when invoking the method:

[code language="scala"]
class MyClass extends Dynamic {
  def applyDynamicNamed(name: String)(args: (String, Any)*) = {
    val (argName,argValue) = 
      args.headOption.getOrElse((&quot;unknown&quot;,&quot;hello&quot;))
    if (name==&quot;myMethod&quot;) 
      println(s&quot;$argName : $argValue - you&quot;)
    else println(&quot;Dunno...&quot;)
  }
}
[/code]

If the method is invoked without explicitly naming any parameter, this parameter's name will be an empty string. The thing is, to make <code>applyDynamicNamed</code> work, at least one of the parameters has to owe a name.

[code language="scala"]
myInstance.myMethod(test=2)//test : 2 - you
myInstance.myMethod(true,test=2)// : true - you
myInstance.myMethod(true)
/*
error: value applyDynamic is not a member of MyClass
error after rewriting to myInstance.&lt;applyDynamic: error&gt;(&quot;myMethod&quot;)
possible cause: maybe a wrong Dynamic method signature?
*/
[/code]

<h3>selectDynamic</h3>

It is similar to a 'dynamic getter'. I mean:

[code language="scala"]
class MyClass extends Dynamic {
  def selectDynamic(name: String) = 
    s&quot;My $name equals this string&quot;
}
val myInstance = new MyClass
myInstance.someAttribute//My someAttribute equals this string
[/code]
<h3>updateDynamic</h3>

And with this last method, we define the updating behavior of all members of the instance that are not statically defined:

[code language="scala"]
class MyClass extends Dynamic {
  def updateDynamic(name: String)(value: Any) {
    println(s&quot;you updated your attribute $name with $value value&quot;)
  }
}
val myInstance = new MyClass
myInstance.myAttribute = 2
//you updated your attribute myAttribute with 2 value
[/code]

NB: It doesn't work really well in the REPL (actually it is compiled as a getter). If you encapsulate it inside an App block, it should work.

Easy peasy.

<h2>Why this in a statically typed language?</h2>

<a href="https://scalerablog.files.wordpress.com/2016/01/haters.jpg" rel="attachment wp-att-1281"><img src="https://scalerablog.files.wordpress.com/2016/01/haters.jpg?w=300" alt="haters" width="300" height="216" class="aligncenter size-medium wp-image-1281" /></a>

Official motivation of this SIP was:

<blockquote>Static types are great, but sometimes we would like to do without them. This could give better support for flexible DSLs that do not require defining the members of a type. It could also provide simpler interfaces with dynamic languages. Scala already provides a number of ways to escape from the straightjacket of the type system: The universal type Any, type tests and type casts, as well as pattern matching. However, one thing is missing: When selecting a member qual.sel, sel must be defined in qual, or be addable with an implicit conversion. This means that we can select members or call methods only if it is statically known that the receiver type supports that member.</blockquote>

Even it's true that the purists may see it like an aberration of the statically typed language nature; for the jugglers, it could be seen as another way to risk their necks defining DSLs without compile-time checkings. You judge

Peace out!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1289</wp:post_id>
  <wp:post_date>2016-02-08 12:00:16</wp:post_date>
  <wp:post_date_gmt>2016-02-08 10:00:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dynamic-types</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="apply"><![CDATA[apply]]></category>
  <category domain="post_tag" nicename="applydynamic"><![CDATA[applyDynamic]]></category>
  <category domain="post_tag" nicename="dynamic"><![CDATA[dynamic]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="getter"><![CDATA[getter]]></category>
  <category domain="post_tag" nicename="haters"><![CDATA[haters]]></category>
  <category domain="post_tag" nicename="setter"><![CDATA[setter]]></category>
  <category domain="post_tag" nicename="sip"><![CDATA[sip]]></category>
  <category domain="post_tag" nicename="static"><![CDATA[static]]></category>
  <category domain="post_tag" nicename="type"><![CDATA[type]]></category>
  <category domain="post_tag" nicename="typed"><![CDATA[typed]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[19589122530]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/696634869288337408";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Graffiti Rules: Hello Word con Spray</title>
  <link>https://scalerablog.wordpress.com/2016/01/27/graffiti-rules-hello-word-con-spray/</link>
  <pubDate>Wed, 27 Jan 2016 15:00:48 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1298</guid>
  <description/>
  <content:encoded><![CDATA[<p style="text-align:justify;">Hoy toca empezar con una herramienta para realizar API REST: Spray. Para construir dichas API's, Spray define un DSL (Lenguaje Específico de Dominio) con el que definir cuales son las rutas y las reacciones a las llamadas HTTP que recibamos. Existen otras alternativas para realizar este tipo de API's: scalatra, Play, Lift ... Sin embargo, este viene perfecto para luego hablar de su evolución: Akka-HTTP. Pero no vayamos tan rápido, vamos poco a poco.</p>
<img class="  wp-image-1306 aligncenter" src="https://scalerablog.files.wordpress.com/2016/01/computers20graffiti20error20technology20explorer201440x90020wallpaper_www-wallpaperfo-com_98.jpg?w=680" alt="computers20graffiti20error20technology20explorer201440x90020wallpaper_www-wallpaperfo-com_98" width="440" height="266" />
<p style="text-align:justify;">El objetivo de este POST es hacer una incursión de iniciación. Nos podemos ir contentos si conseguimos realizar un Hello World con Spray. Para ello, lo principal es conocer cuales son los módulos en los que se compone el framework. Aquí van algunos de los principales:</p>

<ul>
	<li><em><strong>spray-can</strong></em>: servidor HTTP que nos permitirá levantar nuestra API.</li>
	<li><em><strong>spray-routing</strong></em>: DSL de definición de rutas para definir el comportamiento deseado. A diferencia de otros frameworks (como Play), las rutas están definidas en código en vez de en un fichero de texto o de configuración.</li>
	<li><em><strong>spray-http</strong></em>: módulo que se encarga de modelar y manejar el protocolo HTTP.</li>
	<li><em><strong>spray-json</strong></em>: módulo para serialización y deserialización de mensajes en formato JSON. Es reemplazable por otros módulos de serialización a JSON como play-json, jackson...</li>
	<li><em><strong>spray-testkit</strong></em>: pequeño DSL para realizar testing de los endpoints de una manera muy sencilla.</li>
</ul>
<p style="text-align:justify;">En este primer ejemplo, por su sencillez, no necesitaremos todos ellos. Ya iremos utilizando otros módulos más adelante. Por ello, lo primero que tenemos que hacer es construir nuestro fichero <em>SBT</em> con las dependencias necesarias. En nuestro caso nos basta con <em>spray-can</em>, <em>spray-routing</em> y <em>akka</em>. Por tanto, añadimos dichas dependencias al fichero build.sbt:</p>
[code language="scala"]
val akkaV = &quot;2.3.9&quot;
val sprayV = &quot;1.3.3&quot;

libraryDependencies ++= Seq(
    &quot;io.spray&quot; %% &quot;spray-can&quot; % sprayV,
    &quot;io.spray&quot; %% &quot;spray-routing&quot; % sprayV,
    &quot;com.typesafe.akka&quot; %% &quot;akka-actor&quot; % akkaV
  )
[/code]
<p style="text-align:justify;">Una vez que tenemos la configuración lista, toca ponernos a escribir el código Scala. Es importante saber que Spray está construido sobre Akka. Como vamos a ver, mucha de la funcionalidad se basa en utilizar actores.</p>
<p style="text-align:justify;">En primer lugar vamos a definir nuestra ruta. En dicha ruta simplemente marcaremos que si recibimos un GET responderemos con un Hello World:</p>
[code language="scala"]
import spray.routing._
trait ApiRoute extends HttpService {

 val myApiRoute =
   get {
     complete(&quot;Hello World!&quot;)
   }
}
[/code]

Como se puede ver, es necesario hacer mixin de HttpService. Además, siempre que queramos devolver alguna respuesta será necesario encapsularlo en un método complete. La parte de spray-routing que utilizamos es la directiva get, que define el comportamiento para las peticiones de tipo GET (muy lógico todo).
<p style="text-align:justify;">Ahora, tenemos que definir un actor que utilice esta ruta. Esto es muy sencillo ya que se basa totalmente en Akka. Lo único raro (o nuevo) es que tendremos que definir su comportamiento basándonos en un método llamado runRoute que define una ruta. ¿Y cuál será dicha ruta? Pues, por supuesto, será la que acabamos de definir en el trait ApiRoute:</p>
[code language="scala"]
import akka.actor.Actor
import spray.routing._

class ApiActor extends Actor with ApiRoute {

  def actorRefFactory = context

  def receive = runRoute(myApiRoute)
}

[/code]
<p style="text-align:justify;">Ahora queda lanzar la API y atarla a un puerto. Lo primero que necesitaremos realizar es crear un ActorSystem. Una vez creado el ActorSystem, creamos un actor de tipo ApiActor (el actor que acabamos definir en el paso anterior). Finalmente le enviamos un mensaje de tipo Bind indicando la IP y el puerto donde se debe conectar:</p>
[code language="scala"]
import akka.actor.{ ActorSystem, Props }
import akka.io.IO
import akka.util.Timeout
import akka.pattern.ask

import spray.can.Http

import scala.concurrent.duration._

object Main extends App {

  implicit val system = ActorSystem(&quot;My-System&quot;)
  val apiActor = system.actorOf(Props[ApiActor])

  implicit val timeout = Timeout(3 seconds)

  IO(Http) ? Http.Bind(apiActor, interface = &quot;localhost&quot;, port = 8080)

}
[/code]
<p style="text-align:justify;">Y ya está. Ahora solo queda arrancar la aplicación, abrir nuestro navegador favorito e ir a localhost:8080 para poder ver un maravilloso a la par que sorprendente "HELLO WORLD!" :)</p>
<p style="text-align:justify;"><img class=" size-full wp-image-1378 aligncenter" src="https://scalerablog.files.wordpress.com/2016/01/tumblr_mamiy1kp641qcp26yo1_400.gif" alt="tumblr_mamiy1kp641qcp26yo1_400" width="350" height="233" /></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1298</wp:post_id>
  <wp:post_date>2016-01-27 17:00:48</wp:post_date>
  <wp:post_date_gmt>2016-01-27 15:00:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>graffiti-rules-hello-word-con-spray</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="akka"><![CDATA[akka]]></category>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="spray"><![CDATA[spray]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[19179441157]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/692362135507210240";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Graffiti Rules: Hello World in Spray</title>
  <link>https://scalerablog.wordpress.com/2016/02/01/1420/</link>
  <pubDate>Mon, 01 Feb 2016 10:00:56 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1420</guid>
  <description/>
  <content:encoded><![CDATA[<p style="text-align:justify;">Today we are going to get started with a tool to develop REST API: Spray. In order to create those APIs, Spray defines a DSL (Domain Specific Language) to define the routes and responses to the HTTP requests we receive. There are other options to create this type of APIs such as scalatra, Play, Lift... However, Spray serves us well as we will later speak about its successor: Akka-HTTP. But not so fast, let's go bit by bit.</p>
<img class=" wp-image-1306 aligncenter" src="https://scalerablog.files.wordpress.com/2016/01/computers20graffiti20error20technology20explorer201440x90020wallpaper_www-wallpaperfo-com_98.jpg?w=680" alt="computers20graffiti20error20technology20explorer201440x90020wallpaper_www-wallpaperfo-com_98" width="440" height="266" />
<div>The aim of this post is to make an introductory incursion. We can count ourselves lucky if we come to implement a Hello World with Spray by the end of it. To do that, it is required to know which are the modules with which the framework is built. These are some of main ones:</div>
<div>
<ul>
	<li><em><strong>spray-can</strong></em>: HTTP server that will allow us to run our API.</li>
	<li><em><strong>spray-routing</strong></em>: DSL to describe the routes used to define the desired behaviour. Unlike other frameworks (such as Play), the routes are defined by code, instead of using a text file or a configuration file.</li>
	<li><em><strong>spray-http</strong></em>: module in charge of modelling and managing the HTTP protocol.</li>
	<li><em><strong>spray-json</strong></em>: module used for the serialization and deserialization of messages in JSON format. It can be replaced with other JSON serialization modules such as play-json, jackson...</li>
	<li><em><strong>spray-testkit</strong></em>: small DSL to test the endpoints in a really simple way.</li>
</ul>
This first example, due to its simplicity, won't need all of them. We'll be using the rest of them further on. So, the first thing we need to do is to build our <i>SBT </i>file with the needed dependencies. In our case, we will only be using <i>spray-can</i>,<i>spray-routing </i>and <i>akka</i>. Thus, we add those dependencies to the build.sbt file:

</div>
[code language="scala"]
val akkaV = &quot;2.3.9&quot;
val sprayV = &quot;1.3.3&quot;

libraryDependencies ++= Seq(
    &quot;io.spray&quot; %% &quot;spray-can&quot; % sprayV,
    &quot;io.spray&quot; %% &quot;spray-routing&quot; % sprayV,
    &quot;com.typesafe.akka&quot; %% &quot;akka-actor&quot; % akkaV
  )
[/code]

Once the configuration is ready, we shall start writing the Scala code. It is important to know that Spray is built on top of Akka. As we'll see, much of its functionality is based on its use of actors.

First, we define our route. In such a route we will simply mark that we a GET is received, a Hello World will be sent as response:

[code language="scala"]
import spray.routing._
trait ApiRoute extends HttpService {

 val myApiRoute =
   get {
     complete(&quot;Hello World!&quot;)
   }
}
[/code]

As can be appreciated, a mixin with HttpService is required. Furthermore, if a response needs to be returned, it is also mandatory for it to be encapsulated in a complete method. The part of spray-routing that we're using here is the get directive, which defines the behaviour towards GET requests (quite logical, as it should).

Now, we have to define an actor that uses that route. This is really simple as it is completely based in Akka. The only rare (or new) thing is that we'll have to define its behaviour with a method called runRoute, which requires a route. And which route is this? Well, naturally, it'll be the one we've just defined in the ApiRoute trait:

[code language="scala"]
import akka.actor.Actor
import spray.routing._

class ApiActor extends Actor with ApiRoute {

  def actorRefFactory = context

  def receive = runRoute(myApiRoute)
}

[/code]
<p style="text-align:justify;">Now, all that remains is to run the API and bind it to a port. For this, the first thing we need to do is to create an ActorSystem. Once it is created, we create an actor of the type ApiActor (the actor we've just defined in the previous paragraph). Finally, we send a Bind message to it with the IP and port to which it should be binded:</p>
[code language="scala"]
import akka.actor.{ ActorSystem, Props }
import akka.io.IO
import akka.util.Timeout
import akka.pattern.ask

import spray.can.Http

import scala.concurrent.duration._

object Main extends App {

  implicit val system = ActorSystem(&quot;My-System&quot;)
  val apiActor = system.actorOf(Props[ApiActor])

  implicit val timeout = Timeout(3 seconds)

  IO(Http) ? Http.Bind(apiActor, interface = &quot;localhost&quot;, port = 8080)

}
[/code]

And this is it. Now, we just have to execute the application, open our favourite browser and go to localhost:8080 to see a wonderful yet surprising 'HELLO WORLD!' :)
<p style="text-align:justify;"><img class=" size-full wp-image-1378 aligncenter" src="https://scalerablog.files.wordpress.com/2016/01/tumblr_mamiy1kp641qcp26yo1_400.gif" alt="tumblr_mamiy1kp641qcp26yo1_400" width="350" height="233" /></p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1420</wp:post_id>
  <wp:post_date>2016-02-01 12:00:56</wp:post_date>
  <wp:post_date_gmt>2016-02-01 10:00:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>1420</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="akka"><![CDATA[akka]]></category>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="spray"><![CDATA[spray]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[19344773890]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>118</wp:comment_id>
    <wp:comment_author><![CDATA[Graffiti Rules: playing with JSON [Snow] | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2016/06/13/graffiti-rules-playing-with-json-snow/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.100.73</wp:comment_author_IP>
    <wp:comment_date>2016-06-13 12:03:16</wp:comment_date>
    <wp:comment_date_gmt>2016-06-13 10:03:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] few months ago we talked about Spray, a toolkit that allowed us to build REST APIs in an easy way with a pretty complete [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1465812197.2016370296478271484375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1465812446</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1465812446.9616711139678955078125;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-06-13 10:03:16</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Un pequeño paseo por ScalaRx: Parte I</title>
  <link>https://scalerablog.wordpress.com/2016/02/17/un-pequeno-paseo-por-scalarx/</link>
  <pubDate>Wed, 17 Feb 2016 15:00:58 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1435</guid>
  <description/>
  <content:encoded><![CDATA[<p style="text-align:justify;">Hoy el post va dedicado a una librería basada en la programación funcional reactiva: <a href="https://github.com/lihaoyi/scala.rx">ScalaRx</a>.</p>
<p style="text-align:justify;">El objetivo principal de la librería es que, utilizando valores (<strong><em>val</em></strong>), vamos a definir un flujo de operaciones que cambiarán de forma dinámica cuando alguno de los valores cambien. A dichos valores los llamaremos variables reactivas.</p>
<p style="text-align:justify;">Para utilizar la librería basta con añadir como dependencia:</p>
[code language="scala"]
libraryDependencies += &quot;com.lihaoyi&quot; %% &quot;scalarx&quot; % &quot;0.3.1&quot;
[/code]

e importar rx:

[code language="scala"]
import rx._
[/code]
<h3 style="text-align:justify;"><strong>Variables reactivas</strong></h3>
<p style="text-align:justify;">Las variables reactivas serán los elementos principales con los que podremos trabajar. Para definirlas usamos el constructor <strong><em>Var</em></strong>:</p>
[code language="scala"]
val reactiveVar = Var(0)
[/code]
<p style="text-align:justify;">De esta manera, estamos definiendo una variable reactiva que contiene un 0. Como se puede observar, podemos usar <strong>val</strong> en vez de <strong>var</strong> a pesar de que el valor cambiará. Esto es debido a que el estado de la variable reactiva se maneja mendiante ScalaRx.</p>
<p style="text-align:justify;">Una vez que tenemos una variable reactiva, podemos combinarla con otros valores estáticos o con otros variables reactivas. Para que se note que pilotamos, vamos a realizar una operación compleja. Vamos a realizar una suma de dos variables reactivas.</p>
[code language="scala"]
val sum1 = Var(1)
val sum2 = Var(4)
val result = Rx{ sum1() + sum2() }
result.now // Returns 5
[/code]

Para poder hacer referencia a que queremos utilizar el valor de la variable de forma reactiva, se utilizan los paréntesis. Además, como queremos que el valor <strong><em>result</em></strong> cambie en función de los valores reactivos sum1 y sum2, lo englobamos en un bloque <strong><em>Rx</em></strong>. Si queremos evaluar <strong><em>result</em></strong> justo después de definirlo podemos utilizar el método <strong><em>now</em></strong>. Obviamente, obtenemos un número con rima fácil: un maravilloso 5.

De momento todo parece bastante simple. Ahora vamos a probar como funciona esto de los cambios reactivos. Para ello, vamos a cambiar el valor del primer sumando. Para ello volvemos a utilizar los paréntesis para hacer referencia a que estamos cambiando el valor contenido dentro de la variable reactiva.

[code language="scala"]
sum1() = 2
[/code]

Esta actualización del primer sumando provocará un cambio reactivo que afectará a todo el flujo que se haya definido. En este caso, afectará únicamente al valor <strong><em>result</em></strong>.

[code language="scala"]
result.now // Returns 6
[/code]

Este ha sido un ejemplo muy sencillo. Sin embargo, podemos crear flujos más complejos que, al actualizar el valor de una variable reactiva, mediante un efecto dominó, vaya provocando una reacción en el resto de elementos.

<img class="  wp-image-1466 aligncenter" src="https://scalerablog.files.wordpress.com/2016/02/giphy.gif" alt="giphy" width="350" height="237" />

Probablemente estés pensando "esto ya lo hago yo cambiando las variables reactivas por unos var de toda la vida y apañao". Pues efectivamente. Sin embargo, Rx está pensado para obtener notificaciones de los cambios de las variables reactivas y poder reaccionar a ellas. (<a href="http://stackoverflow.com/questions/24484450/what-is-the-difference-between-reactive-programming-and-plain-old-closures">aquí podreis encontrar una explicación más completa</a>). Para ello usa los <strong><em>Observables</em></strong>. Pero para eso tendremos que esperar a la segunda parte del post.

Hasta la próxima! :)
<h3></h3>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1435</wp:post_id>
  <wp:post_date>2016-02-17 17:00:58</wp:post_date>
  <wp:post_date_gmt>2016-02-17 15:00:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>un-pequeno-paseo-por-scalarx</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="reactive"><![CDATA[reactive]]></category>
  <category domain="post_tag" nicename="rx"><![CDATA[rx]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[19898356095]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/699975628850753539";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>84</wp:comment_id>
    <wp:comment_author><![CDATA[Un pequeño paseo por ScalaRx: Parte II | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2016/03/02/un-pequeno-paseo-por-scalarx-parte-ii/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.101.185</wp:comment_author_IP>
    <wp:comment_date>2016-03-02 17:04:13</wp:comment_date>
    <wp:comment_date_gmt>2016-03-02 15:04:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] quince días estuvimos viendo muy por encima alguna de las funcionalidades que nos ofrecía la librería ScalaRx. Hoy vamos a [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1456932114</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1456932114.9116261005401611328125;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1456931054.8075320720672607421875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-03-02 15:04:13</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>82</wp:comment_id>
    <wp:comment_author><![CDATA[miguelbucarest]]></wp:comment_author>
    <wp:comment_author_email>miguel.s.address@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>213.229.163.5</wp:comment_author_IP>
    <wp:comment_date>2016-02-24 16:36:05</wp:comment_date>
    <wp:comment_date_gmt>2016-02-24 14:36:05</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sabeis, sin tener que mirarlo mucho, si el evento lo lanza siempre que se hace una asignación? o solamente si cambia el valor?

Es decir si tengo

val sum1 = Var(1)
sum1() = 1

lanzaría un 'onChange' (como se llame en Rx)? yatusabe]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>14635623</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1456324567</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1456324566</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1456324567.1583139896392822265625;s:5:"event";s:9:"check-ham";s:4:"user";s:14:"miguelbucarest";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-02-24 14:36:05</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>83</wp:comment_id>
    <wp:comment_author><![CDATA[dvallejonava]]></wp:comment_author>
    <wp:comment_author_email>d.vallejo.nava@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.82.197.162</wp:comment_author_IP>
    <wp:comment_date>2016-02-25 10:41:00</wp:comment_date>
    <wp:comment_date_gmt>2016-02-25 08:41:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Efectivamente. Cuando se hace una asignación (por ejemplo, sum() = 1 ) realmente estás cambiando el valor de la variable reactiva sum, por lo que se producirá un evento de cambio. Dicho evento se podrá capturar mediante un Observable y reaccionar a él con una función. Es lo que veremos en la segunda parte de este post.

Espero haber respondido a tu duda.

Gracias por el feedback una vez más ;)

Un saludo!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>82</wp:comment_parent>
    <wp:comment_user_id>81583895</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1456389662.39776706695556640625;s:5:"event";s:9:"check-ham";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1456389662</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1456389663</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-02-25 08:41:00</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Parser combinators (briefly explained)</title>
  <link>https://scalerablog.wordpress.com/2016/02/15/parser-combinators-briefly-explained/</link>
  <pubDate>Mon, 15 Feb 2016 10:00:32 +0000</pubDate>
  <dc:creator>carlopolo</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1437</guid>
  <description/>
  <content:encoded><![CDATA[Parser combinators allow you to create complex parsers from simpler ones, by combining them as if they were arithmetic operands.

As very well defined at Wikipedia:
<blockquote>In <a title="Functional programming" href="https://en.wikipedia.org/wiki/Functional_programming" target="_blank">functional programming</a>, a parser combinator is a <a title="Higher-order function" href="https://en.wikipedia.org/wiki/Higher-order_function" target="_blank">higher-order function</a> that accepts several parsers as input and returns a new parser as its output. In this context, a <a title="Parser" href="https://en.wikipedia.org/wiki/Parser" target="_blank">parser</a> is a function accepting strings as input and returning some structure as output, typically a <a title="Parse tree" href="https://en.wikipedia.org/wiki/Parse_tree" target="_blank">parse tree</a> or a set of indices representing locations in the string where parsing stopped successfully. Parser combinators enable a <a title="Recursive descent parsing" href="https://en.wikipedia.org/wiki/Recursive_descent_parsing" target="_blank">recursive descent parsing</a> strategy that facilitates modular piecewise construction and testing. This parsing technique is called combinatory parsing.</blockquote>
The arithmetic operators you can use are:
<ul>
	<li><b>a ~ b parse a sequence made of a then b
</b></li>
	<li><b>a | b introduce an alternative parser that parses a or b</b></li>
	<li><b>a? introduce an optional parser</b></li>
	<li><b>a* introduce on optional and repeatable parser</b></li>
	<li><b>a+ introduce a repeatable parser</b></li>
	<li><b>a ~&gt; b like ~ but ignore the left member (a)</b></li>
	<li><b>a &lt;~ b like ~ but ignore the right member (b)</b></li>
</ul>
And that's pretty much everything you need to know about parser combinators!
A very simple parser could be:

[code language="scala"]
import scala.util.parsing.combinator._
import scala.util.matching.Regex
val parser = new RegexParsers {
  def mySuperSimpleParser= &quot;&quot;&quot;\s*_end_$&quot;&quot;&quot;.r ^^ { _.toString }
}
[/code]

(which would recognice any string that ends with zero or more blank spaces and _end_, and return that string)

Here, what is enclosed between the curly brackets is a semantic action that is going to be executed.

So basically

[code]a ^^ f[/code]

will parse <code>a</code>, and apply function <code>f</code> to the result (semantic action)

To parse a string we would simply do this:

[code language="scala"]
parse(myParser, &quot;my input string           _end_&quot;) match {
  case Success(matched,_) =&gt;
    matched match{
      case &quot;hello&quot;=&gt;
        println &quot;hello world&quot;
      case listOfArgs@h::t=&gt; 
        MyParserHelper.executeAction(listOfArgs)
      case _=&gt; 
        println( s&quot;string $matched has been recognized, but I don't know what to do with it&quot; )
    }
  case Failure(msg,_) =&gt;   
    println(&quot;FAILURE PARSING STRING &quot; + msg)
}
[/code]

And will define myParser right now.

So far, we haven't combined mySuperSimpleParser with anything, so let's make it a little bit more complicated:
A still simple example coud be somethig like this:

[code language="scala"]
def myParser = 
  (pHelp | pThreeArgs) &lt;~ mySuperSimpleParser
[/code]

where mySuperSimpleParser would (as we saw before) match any string ending in zero or more blanks plus the "_end_" string at the end of the input, but wouldn't do anything with it, and would continue on the left side on the input either parsing pHelp or pThreeArgs:
pHelp could be something like this:

[code language="scala"]
def pHelp=  
  &quot;(help|helpMe)&quot;.r ^^ { _=&gt; HelpCommand }
[/code]

HelpCommand is a case class that, for the sake of simplicity we will not define here, but we could also do something like:

[code language="scala"]
def pHelp = 
  &quot;(help|helpMe)&quot;.r ^^ { _=&gt;&quot;the recogniced command is help&quot; }
[/code]

Or even:

[code language="scala"]
def pHelp = 
  &quot;(help|helpMe)&quot;.r
[/code]

We don't even need to take any semantic action on it if we do not want to.

The only thing left now is the pThreeArgs parser. This parser will recognice a secuence of three words (first one word, then another, and then another) and put the three of them, sequencially into a list, and that list is what will be returned:

[code language="scala"]
def pThreeArgs: Parser[List[Any]] = {
  var paramsCtx=mutable.ListBuffer[String]()
  pListParam(paramsCtx) ~&gt; pListParam(paramsCtx) ~&gt; pListParam(paramsCtx) ^^ {_.toList}
}
[/code]

Note, that I created a mutable ListBuffer, which will act as a "global" context to each of the three parsers that we are combining, so that they only worry about parsing one parameter and storing it on the global context that they have received as a function parameter (these parsers are functions).
At the end, the whole List, containing the three parameters, will be returned :-)

Can you think of a better (or more functional way of doing it? ;-) )
pListParam would be something like that:

[code language="scala"]
def pListParam(l:mutable.ListBuffer[String])= 
  &quot;&quot;&quot;\S+&quot;&quot;&quot;.r ^^ {l+=_.toString}
[/code]

For a more complete example, please look <b><a href="https://github.com/roclas/liffey/blob/master/src/main/scala/com/liferay/osgi/shell/LiffeyParser.scala" target="_blank">here</a></b>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1437</wp:post_id>
  <wp:post_date>2016-02-15 12:00:32</wp:post_date>
  <wp:post_date_gmt>2016-02-15 10:00:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>parser-combinators-briefly-explained</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="combinators"><![CDATA[combinators]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="language"><![CDATA[language]]></category>
  <category domain="post_tag" nicename="operator"><![CDATA[operator]]></category>
  <category domain="post_tag" nicename="parser"><![CDATA[parser]]></category>
  <category domain="post_tag" nicename="parsing"><![CDATA[parsing]]></category>
  <category domain="post_tag" nicename="semantic"><![CDATA[semantic]]></category>
  <category domain="post_tag" nicename="syntactic"><![CDATA[syntactic]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[19819692853]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/699171693235802112";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Parser combinators (brevemente explicados)</title>
  <link>https://scalerablog.wordpress.com/2016/02/10/parser-combinators-version-corta/</link>
  <pubDate>Wed, 10 Feb 2016 10:00:16 +0000</pubDate>
  <dc:creator>carlopolo</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1449</guid>
  <description/>
  <content:encoded><![CDATA[Los parser combinators te permiten crear parser más complejos a partir de otros más sencillos, combinándolos como si fuesen operadores aritméticos.

Perfectamente definido queda en Wikipedia:
<blockquote>En <a href="https://en.wikipedia.org/wiki/Functional_programming" target="_blank">programación funcional</a>, un parser combinator es una <a href="https://en.wikipedia.org/wiki/Higher-order_function" target="_blank">función de orden superior</a> que acepta múltiples parsers como entrada y devuelve un nuevo parser como salida. En este contexto, un <a href="https://en.wikipedia.org/wiki/Parser" target="_blank">parser</a> es una función que acepta strings como entrada y devuelve una cierta estructura como salida, típicamente un <a href="https://en.wikipedia.org/wiki/Parse_tree" target="_blank">árbol de parseo</a> o un conjunto de índices que representan las localizaciones en el string donde el parser paró satisfactoriamente. Los parser combinators habilitan una <a href="https://en.wikipedia.org/wiki/Recursive_descent_parsing" target="_blank">estrategia recursiva descendente de parseo</a>, estrategia que facilita la construcción y testeo modular. Esta técnica de parseo se denomina parseo combinatorio.</blockquote>

Los operadores aritméticos que puedes usar son:
<ul>
	<li><b>a ~ b Parseo de una sequencia compuesta de 'a' y después 'b'
</b></li>
	<li><b>a | b Parser alternativo de 'a' o 'b'</b></li>
	<li><b>a? Parser opcional de 'a'</b></li>
	<li><b>a* Parser opcional y repetible</b></li>
	<li><b>a+ Parser repetible</b></li>
	<li><b>a ~&gt; b Como el operador ~ pero ignorando el miembro izquierdo (a)</b></li>
	<li><b>a &lt;~ b Como el operador ~ pero ignorando el miembro derecho (b)</b></li>
</ul>
Y en esencia, eso es lo que necesitas saber sobre parser combinators :-)
Un parser muy sencillo podría ser:

[code language="scala"]
import scala.util.parsing.combinator._
import scala.util.matching.Regex
val parser = new RegexParsers {
  def mySuperSimpleParser= &quot;&quot;&quot;\s*_end_$&quot;&quot;&quot;.r ^^ { _.toString }
}
[/code]

Debería reconocer cualquier string que termine con cero o más espacios y la cadena "_end_", y devolver el string.

Lo que se encuentra entre llaves es la semántica, la acción se va a ejecutar cuando nos encontremos con un elemento parseado.

Así que básicamente,

[code]a ^^ f[/code]

parseará <code>a</code> (sintáxis), y aplicará la función <code>f</code> al resultado(semántica).

Para parsear un string simplemente haríamos como sigue:

[code language="scala"]
parse(myParser, &quot;my input string           _end_&quot;) match {
  case Success(matched,_) =&gt;
    matched match{
      case &quot;hello&quot;=&gt;
        println &quot;hello world&quot;
      case listOfArgs@h::t=&gt; 
        MyParserHelper.executeAction(listOfArgs)
      case _=&gt; 
        println( s&quot;string $matched has been recognized, but I don't know what to do with it&quot; )
    }
  case Failure(msg,_) =&gt;   
    println(&quot;FAILURE PARSING STRING &quot; + msg)
}
[/code]

Hasta ahora, no hemos cominado <code>mySuperSimpleParser</code> con nada, así que compliquémoslo un poco más.
Un ejemplo (todavía simple) podría ser:

[code language="scala"]
def myParser = 
  (pHelp | pThreeArgs) &lt;~ mySuperSimpleParser
[/code]

donde <code>mySuperSimpleParser</code> encajaría (como vimos antes) con cualquier string que termina en cero o más espacio y la cadena "_end_", pero no haría nada con ello y continuaría con la parte izquierda en el input, parseando <code>pHelp</code> o <code>pThreeArgs</code>.

<code>pHelp</code> podría ser algo como:

[code language="scala"]
def pHelp=  
  &quot;(help|helpMe)&quot;.r ^^ { _=&gt; HelpCommand }
[/code]

HelpCommand es una case class que, for cuestión de simplicidad, no definiremos aquí, pero que se podría sustituir por:

[code language="scala"]
def pHelp = 
  &quot;(help|helpMe)&quot;.r ^^ { _=&gt;&quot;the recogniced command is help&quot; }
[/code]

Incluso no necesitaríamos añadir ninguna semántica si no es necesario:

[code language="scala"]
def pHelp = 
  &quot;(help|helpMe)&quot;.r
[/code]

Nos falta ahora definir el parser pThreeArgs. Este parser reconocerá una secuencia de tres palabras y las pondrá secuencialmente en una lista (la cual devolveremos):

[code language="scala"]
def pThreeArgs: Parser[List[Any]] = {
  var paramsCtx=mutable.ListBuffer[String]()
  pListParam(paramsCtx) ~&gt; pListParam(paramsCtx) ~&gt; pListParam(paramsCtx) ^^ {_.toList}
}
[/code]

Nótese que he creado un <code>ListBuffer</code> mutable, que actuará como un contexto "global" para cada uno de los tres parsers que estamos combinando, de manera que solo se tengan que ocupar de parsear un parámetro y almacenarlo en el contexto global que han recibido como parámetro de la función (estos parsers son funciones).
Al final, la lista completa se devuelve conteniendo los tres parámetros :-)

¿Se os ocurre de una mejor (o al menos más funcional) forma de resolverlo? ;-)
<code>pListParam</code> sería algo del estilo:

[code language="scala"]
def pListParam(l:mutable.ListBuffer[String])= 
  &quot;&quot;&quot;\S+&quot;&quot;&quot;.r ^^ {l+=_.toString}
[/code]

Para un ejemplo más complejo, visitad el siguiente <b><a href="https://github.com/roclas/liffey/blob/master/src/main/scala/com/liferay/osgi/shell/LiffeyParser.scala" target="_blank">enlace</a></b>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1449</wp:post_id>
  <wp:post_date>2016-02-10 12:00:16</wp:post_date>
  <wp:post_date_gmt>2016-02-10 10:00:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>parser-combinators-version-corta</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="combinators"><![CDATA[combinators]]></category>
  <category domain="post_tag" nicename="language"><![CDATA[language]]></category>
  <category domain="post_tag" nicename="operator"><![CDATA[operator]]></category>
  <category domain="post_tag" nicename="parser"><![CDATA[parser]]></category>
  <category domain="post_tag" nicename="parsing"><![CDATA[parsing]]></category>
  <category domain="post_tag" nicename="semantic"><![CDATA[semantic]]></category>
  <category domain="post_tag" nicename="syntactic"><![CDATA[syntactic]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[19658715644]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/697360503014871044";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>71</wp:comment_id>
    <wp:comment_author><![CDATA[miguelbucarest]]></wp:comment_author>
    <wp:comment_author_email>miguel.s.address@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>213.229.163.5</wp:comment_author_IP>
    <wp:comment_date>2016-02-11 17:33:04</wp:comment_date>
    <wp:comment_date_gmt>2016-02-11 15:33:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[creo que este fue el tema que me sacó del curso de haskell... los parsers xD y me siguen echando humo las orejas....

Tengo una duda, tal vez por mi inexperiencia en Scala: en este caso, como actuan los operadores "" que usas?

Quitando casos de reconocimiendo de comandos (y gramaticas en general que es el ejemplo más clásico), te/os ha surgido la necesidad de parsers para otras cosas?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>14635623</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1455204785</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1455204785.971375942230224609375;s:5:"event";s:9:"check-ham";s:4:"user";s:14:"miguelbucarest";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1455204787</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-02-11 15:33:04</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>72</wp:comment_id>
    <wp:comment_author><![CDATA[carlopolo]]></wp:comment_author>
    <wp:comment_author_email>carlopolo@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>89.101.242.106</wp:comment_author_IP>
    <wp:comment_date>2016-02-12 12:45:53</wp:comment_date>
    <wp:comment_date_gmt>2016-02-12 10:45:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[En mi caso, yo quería tener un pequeño intérprete de comandos, donde pudiera hacer varias cosas:
Por ejemplo:
 
def myParser = (pHelp |pUser | pRole | pVersion |pDownload | pReplace | pScheduler) &lt;~ pEnd

El intérprete espera una de estas instrucciones (una, u otra, u otra, o la otra, o la otra...) y el final (pEnd).
Cada una de estas instrucciones o comandos (porque en mi caso lo que quiero es interpretar comandos), es a su vez, otro parser, que puede estar compuesto de varias opciones (uno, u otro, u otro) o de una secuencia (uno y luego otro), o de uno que se repite varias veces.

Así podríamos ir profundizando e irnos metiendo por las ramas, hasta definir una gramática completa.

Esta es la única necesidad que he tenido (que es para lo que sirven estas cosas): generar gramáticas que generan lenguajes (podrías hacer un compilador si quisieras, pero lo mío era mucho más sencillo, y como puedes ver, es bastante rápido de hacer).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>35989124</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1455273955</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1455273954</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1455273955.00663089752197265625;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"carlopolo";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value>1</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-02-12 10:45:53</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Y el Óscar al mejor scalero revelación es para...</title>
  <link>https://scalerablog.wordpress.com/2016/02/24/y-el-oscar-al-mejor-scalero-revelacion-es-para/</link>
  <pubDate>Wed, 24 Feb 2016 10:00:14 +0000</pubDate>
  <dc:creator>scalerablog</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1550</guid>
  <description/>
  <content:encoded><![CDATA[Antes de nada, quisiéramos daros las gracias a todos los que habéis participado. Es totalmente inspirador ver como personas de distintas partes del planeta que comparten una misma inquietud, invierten su tiempo en resolver un pequeño pasatiempo.

Fue complicado elegir un ganador (nos lo habéis puesto difícil). Descartando las soluciones que tenían en cuenta de algún modo la distancia entre ambos rovers (modificamos el valor de esta constante para comprobar que sin tenerlo en cuenta los rovers se encontraban), y algunas un tanto más obtusas, nombramos finalistas (por orden de envío de soluciones) a:

<strong>Pablo Francisco Pérez
Daniela Sfregola
Samuel Dehouck</strong>
Sebastián Ortega
Florian Mériaux

de los cuales, los 3 primeros nos parecieron muy buenas soluciones. Pero finalmente hemos decidido que el ganador es ...

<a href="https://scalerablog.files.wordpress.com/2016/02/lenny-listening-the-simpsons.gif" rel="attachment wp-att-1553"><img src="https://scalerablog.files.wordpress.com/2016/02/lenny-listening-the-simpsons.gif?w=300" alt="Lenny-Listening-The-Simpsons" width="300" height="225" class="aligncenter size-medium wp-image-1553" /></a>

<strong>Daniela Sfregola</strong> con una solución en 50 ticks/7 líneas. 

<a href="https://scalerablog.files.wordpress.com/2016/02/tumblr_nqg2m1v47l1s9y3qio2_250.gif" rel="attachment wp-att-1554"><img src="https://scalerablog.files.wordpress.com/2016/02/tumblr_nqg2m1v47l1s9y3qio2_250.gif" alt="tumblr_nqg2m1V47l1s9y3qio2_250" width="200" height="150" class="aligncenter size-full wp-image-1554" /></a>

Enhorabuena, tuya es la camiseta de Scalera y nuestro reconocimiento.
Gracias de nuevo a los participantes. Dentro de poco volveremos con más retos ;-)

-- El equipo de Scalera --
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1550</wp:post_id>
  <wp:post_date>2016-02-24 12:00:14</wp:post_date>
  <wp:post_date_gmt>2016-02-24 10:00:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>y-el-oscar-al-mejor-scalero-revelacion-es-para</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="announcement"><![CDATA[announcement]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_format" nicename="post-format-aside"><![CDATA[Minientrada]]></category>
  <category domain="post_tag" nicename="staff"><![CDATA[staff]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/702433187310473217";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[20123101200]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>And the Oscar for best deb scalero goes to...</title>
  <link>https://scalerablog.wordpress.com/2016/02/24/and-the-oscar-for-best-deb-scalero-goes-to/</link>
  <pubDate>Wed, 24 Feb 2016 10:01:49 +0000</pubDate>
  <dc:creator>scalerablog</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1557</guid>
  <description/>
  <content:encoded><![CDATA[Before going on, we would like to thank you all that participated in this challenge. It's totally inspiring see how people from many different places around the world share the same motivation, spending time on resolving a small challenge.

It was complicated to choose a winner (you did it really great). Discarding solutions that were based somehow on the distance between rovers (we modified the value of the constant DistanceBetweenRovers to check if rovers still find each other), and some others, we named finalists (by solution arrival order) the following people:

<strong>Pablo Francisco Pérez
Daniela Sfregola
Samuel Dehouck</strong>
Sebastián Ortega
Florian Mériaux

the very first 3 provided very nice solutions but finally we decided that the winner is ...

<a href="https://scalerablog.files.wordpress.com/2016/02/lenny-listening-the-simpsons.gif" rel="attachment wp-att-1553"><img src="https://scalerablog.files.wordpress.com/2016/02/lenny-listening-the-simpsons.gif?w=300" alt="Lenny-Listening-The-Simpsons" width="300" height="225" class="aligncenter size-medium wp-image-1553" /></a>

<strong>Daniela Sfregola</strong> with a 50 tick/7 lines solution. 

<a href="https://scalerablog.files.wordpress.com/2016/02/tumblr_nqg2m1v47l1s9y3qio2_250.gif" rel="attachment wp-att-1554"><img src="https://scalerablog.files.wordpress.com/2016/02/tumblr_nqg2m1v47l1s9y3qio2_250.gif" alt="tumblr_nqg2m1V47l1s9y3qio2_250" width="200" height="150" class="aligncenter size-full wp-image-1554" /></a>

Congratulations! Yours is the Scalera t-shirt and our acknowledgement.
Thanks again to the participants. We will shortly be back with new challenges ;-)

-- Scalera staff --
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1557</wp:post_id>
  <wp:post_date>2016-02-24 12:01:49</wp:post_date>
  <wp:post_date_gmt>2016-02-24 10:01:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>and-the-oscar-for-best-deb-scalero-goes-to</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="announcement"><![CDATA[announcement]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_format" nicename="post-format-aside"><![CDATA[Minientrada]]></category>
  <category domain="post_tag" nicename="staff"><![CDATA[staff]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/702433815025860608";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[20123159699]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>81</wp:comment_id>
    <wp:comment_author><![CDATA[Daniela Sfregola]]></wp:comment_author>
    <wp:comment_author_email>daniela.sfregola@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://girlcoding.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>154.58.99.237</wp:comment_author_IP>
    <wp:comment_date>2016-02-24 13:04:45</wp:comment_date>
    <wp:comment_date_gmt>2016-02-24 11:04:45</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Reblogueó esto en <a href="http://danielasfregola.com/2016/02/24/and-the-oscar-for-best-deb-scalero-goes-to/" rel="nofollow">Daniela Sfregola</a>.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>77412164</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1456311886.5232830047607421875;s:5:"event";s:9:"check-ham";s:4:"user";s:15:"danielasfregola";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1456413364</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>reblog_ping</wp:meta_key>
      <wp:meta_value>1</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1456316362.7983839511871337890625;s:5:"event";s:9:"check-ham";s:4:"user";s:15:"danielasfregola";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1456413364</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1456413365.094563961029052734375;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-02-24 11:04:45</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Scalera tips: Como NO modificar el estado de tu actor</title>
  <link>https://scalerablog.wordpress.com/2016/03/23/scalera-tips-como-no-modificar-el-estado-de-tu-actor/</link>
  <pubDate>Wed, 23 Mar 2016 10:00:38 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1566</guid>
  <description/>
  <content:encoded><![CDATA[Una cuestión habitual a la hora de trabajar con Akka, es modificar de manera correcta el estado de nuestro actor. Si recordamos la base del paradigma de este framework que nos permite programar modelando la concurrencia en base a actores y el paso de mensajes, es que un actor puede definirse como una <strong>unidad computacional que puede tener estado y realiza tareas en base a mensajes que recibe en su mailbox y que procesará de manera secuencial</strong>.

Esto significa que, para no tener efectos de lado, es necesario que la modificación del estado del actor se haga al procesar un mensaje. Hasta aquí todo tiene sentido. No obstante, es un fallo bastante común el hacer algo del siguiente estilo:

[code language="scala"]
class MyActor extends Actor {

  var state: Int = 0

  def receive = {

    case &quot;command&quot; =&gt; 
      Future(state = 1)

    case &quot;someOtherCommand&quot; =&gt; 
      state = 2

  }

}
[/code]

En ese caso, ya no tenemos garantía de que el cambio de estado (cuyo único responsable de mantenerlo consistente y thread-safe es el actor) puede generar efectos de lado dado que en el momento en que futuro modifica el <code>var</code> es posible que el estado esté siendo modificado por el propio actor, desencadenado por el procesamiento de otro mensaje.

Este <code>Future[Unit]</code> puede no ser un bloque como tal, sino el resultado de haber preguntado a otro actor:

[code language="scala"]
class MyActor extends Actor {

  type State = Int

  var state: State = 0

  def receive = {

    case &quot;command&quot; =&gt; 
      (service ? &quot;giveMeMyNewState&quot;).map{
        case newState: State =&gt; state = newState
      }

    case &quot;someOtherCommand&quot; =&gt; 
      state = 2
  }

}
[/code]

Algo que probablemente nadie de nosotros haya intentado jamás.

<a href="https://scalerablog.files.wordpress.com/2016/03/giphy3.gif" rel="attachment wp-att-1846"><img src="https://scalerablog.files.wordpress.com/2016/03/giphy3.gif?w=300" alt="giphy" width="300" height="150" class="aligncenter size-medium wp-image-1846" /></a>

<h2>La forma correcta</h2>

En caso de querer modificar el estado del actor como resultado de dicha consulta a otro actor sin romper el control de concurrencia sobre el estado, se podría hacer como sigue:

[code language="scala"]
class MyActor extends Actor {

  type State = Int

  var state: State = 0

  def receive = {

    case &quot;command&quot; =&gt; 
      (service ? &quot;giveMeMyNewState&quot;) pipeTo self

    case &quot;someOtherCommand&quot; =&gt; 
      state = 2

    case newState: State =&gt; 
      state = newState
  }

}
[/code]

Con <code>pipeTo</code> lo que hacemos es mandar a cierto actor el resultado de evaluar un futuro cuando este se resuelva. De esta manera estamos indicando que, cuando tengamos la respuesta del otro actor, se envie a nuestro mailbox, de manera que se procesará como otro mensaje más, de manera secuencial.

<a href="https://scalerablog.files.wordpress.com/2016/03/bill_murray_gif_1.gif" rel="attachment wp-att-1847"><img src="https://scalerablog.files.wordpress.com/2016/03/bill_murray_gif_1.gif?w=300" alt="bill_murray_gif_1" width="300" height="161" class="aligncenter size-medium wp-image-1847" /></a>

Easy peasy :-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1566</wp:post_id>
  <wp:post_date>2016-03-23 12:00:38</wp:post_date>
  <wp:post_date_gmt>2016-03-23 10:00:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scalera-tips-como-no-modificar-el-estado-de-tu-actor</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="actor"><![CDATA[actor]]></category>
  <category domain="post_tag" nicename="akka"><![CDATA[akka]]></category>
  <category domain="post_tag" nicename="ask"><![CDATA[ask]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="concurrency"><![CDATA[concurrency]]></category>
  <category domain="post_tag" nicename="future"><![CDATA[future]]></category>
  <category domain="post_tag" nicename="mutable"><![CDATA[mutable]]></category>
  <category domain="post_tag" nicename="side-effect"><![CDATA[side effect]]></category>
  <category domain="post_tag" nicename="state"><![CDATA[state]]></category>
  <category domain="post_tag" nicename="tip"><![CDATA[tip]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/712580105923461120";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21044009399]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Scalera tips : var inmutable vs. val mutable</title>
  <link>https://scalerablog.wordpress.com/2016/03/09/scalera-tips-var-inmutable-vs-val-mutable/</link>
  <pubDate>Wed, 09 Mar 2016 10:00:29 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1568</guid>
  <description/>
  <content:encoded><![CDATA[Supongamos que queremos definir una clase que tiene estado (una lista, por ejemplo).
Si siguiéramos el paradigma funcional puro, cada vez que modificáramos el estado de nuestra instancia, esta debería devolver una instancia nueva modificada:

[code language="scala"]
class Foo(val state: List[Int]) {

  def mutate(n: Int): Foo =
    new Foo(state :+ n)

}

val initialFoo = new Foo(List())
assert(initialFoo.state==List())

val mutatedFoo = initialFoo.mutate(1)
assert(initialFoo.state==List())
assert(mutatedFoo.state==List(1))
[/code]

...si te paras a pensarlo, es el comportamiento del método <code>copy</code> de una <code>case class</code>.

Pero pongámonos en el caso en que debemos integrarnos con una aplicación legacy y no podemos gestionar los cambios sobre nuestro <code>Foo</code> generando una nueva instancia.

En ese caso, el estado lo determina la lista interna, y no la instancia misma de <code>Foo</code>.

Una primera aproximación podría ser utilizar un <code>val</code> de tipo lista mutable (es threadsafe):

[code language="scala"]
import scala.collection.mutable
class Foo {

  private val _state: mutable.ListBuffer[Int] = 
    ListBuffer()

  def mutate(n: Int): Unit = 
    _state += n

  def state: mutable.ListBuffer[Int] =
    _state

}
[/code]

<a href="https://scalerablog.files.wordpress.com/2016/03/austinpowers.png" rel="attachment wp-att-1676"><img src="https://scalerablog.files.wordpress.com/2016/03/austinpowers.png?w=300" alt="austinpowers" width="300" height="249" class="aligncenter size-medium wp-image-1676" /></a>

Y en la otra mano tendríamos la opción de usar un <code>var</code> inmutable (no es thread-safe):

[code language="scala"]
class Foo {

  private var _state: List[Int] = 
    List()

  def mutate(n: Int): Unit = 
    synchronized(_state :+= n)

  def state: List[Int] = 
    synchronized(_state)

}
[/code]

Fijaros que hemos tenido que hacer un <code>synchronize</code> para proteger el estado frente a accesos concurrentes.

<h2>¿Qué es mejor?</h2>

Si bien es cierto que la segunda opción genera mayor boilerplate, ocurre que con la primera podría darse el siguiente caso:

[code language="scala"]
val foo = new Foo
assert(foo.state==mutable.ListBuffer())
val retrievedState = foo.state += 2
assert(foo.state==ListBuffer()) //ERROR!
[/code]

Al devolver la lista, hemos roto el principio de <a href="http://www.cas.mcmaster.ca/~kahl/reftrans.html" target="_blank">transparencia referencial</a> y perdemos el control de acceso sobre la lista.

Es probable que dependa del caso de uso de cada uno, pero en general, el enfoque funcional anima a generar nuevas copias de manera que se evitan potenciales efectos de lado.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1568</wp:post_id>
  <wp:post_date>2016-03-09 12:00:29</wp:post_date>
  <wp:post_date_gmt>2016-03-09 10:00:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scalera-tips-var-inmutable-vs-val-mutable</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="immutable"><![CDATA[immutable]]></category>
  <category domain="post_tag" nicename="mutable"><![CDATA[mutable]]></category>
  <category domain="post_tag" nicename="tip"><![CDATA[tip]]></category>
  <category domain="post_tag" nicename="val"><![CDATA[val]]></category>
  <category domain="post_tag" nicename="var"><![CDATA[var]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[20580954572]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/707506453951619073";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>89</wp:comment_id>
    <wp:comment_author><![CDATA[Carlos Verdes]]></wp:comment_author>
    <wp:comment_author_email>cverdes@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/115837358134693163889</wp:comment_author_url>
    <wp:comment_author_IP>62.82.197.162</wp:comment_author_IP>
    <wp:comment_date>2016-03-10 13:23:50</wp:comment_date>
    <wp:comment_date_gmt>2016-03-10 11:23:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hay una tercera opción y es utilizar val mutable pero en el método state devolver una copia de state.

def state: mutable.ListBuffer[Int] =
    _state.clone()]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1457609546</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1457609547.255157947540283203125;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value>googleplus</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value>https://lh6.googleusercontent.com/-CDHWnQcnyyo/AAAAAAAAAAI/AAAAAAAABiA/6b_yW9HI2d4/photo.jpg?sz=50</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value>115837358134693163889</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1457609546</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1457609032.0986549854278564453125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-03-10 11:23:50</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>96</wp:comment_id>
    <wp:comment_author><![CDATA[Scalera tips: Transparencia referencial | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2016/04/20/scala-tips-transparencia-referencial/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.118.103</wp:comment_author_IP>
    <wp:comment_date>2016-04-20 17:01:03</wp:comment_date>
    <wp:comment_date_gmt>2016-04-20 15:01:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] hemos hablado en otros post sobre algunos detalles de la programación funcional pura o sobre la importancia de evitar los [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1461164498.7537400722503662109375;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1461164498</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1461164463.90050506591796875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-04-20 15:01:03</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>106</wp:comment_id>
    <wp:comment_author><![CDATA[Scalera tip: ¿Por qué &#8216;scala.util.Try&#8217; no tiene &#8216;finally&#8217;? | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2016/05/11/scalera-tip-por-que-scala-util-try-no-tiene-finally/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.82.82</wp:comment_author_IP>
    <wp:comment_date>2016-05-11 12:02:14</wp:comment_date>
    <wp:comment_date_gmt>2016-05-11 10:02:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] otra parte, si hacéis memoria sobre el post en el que hablábamos sobre los valores y las variables, mencionábamos la transparencia referencial como principio que debe cumplirse para considerar una [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1462960934.844767093658447265625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1462960982</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1462960982.24948406219482421875;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-05-11 10:02:14</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Scalera tips : var immutable vs. val mutable</title>
  <link>https://scalerablog.wordpress.com/2016/03/14/scalera-tips-var-immutable-vs-val-mutable/</link>
  <pubDate>Mon, 14 Mar 2016 10:00:13 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1672</guid>
  <description/>
  <content:encoded><![CDATA[Let's suppose we want to define a class that has state (a list, e.g.).
If we followed the pure functional paradigm, each time we changed our instance's state, this should return a new modified instance (with the new state).

[code language="scala"]
class Foo(val state: List[Int]) {

  def mutate(n: Int): Foo =
    new Foo(state :+ n)

}

val initialFoo = new Foo(List())
assert(initialFoo.state==List())

val mutatedFoo = initialFoo.mutate(1)
assert(initialFoo.state==List())
assert(mutatedFoo.state==List(1))
[/code]

...if you just think about it, it's a <code>case class</code> <code>copy</code> method behavior.

But let's handle the situation where we have to integrate with some legacy application and we cannot manage changes over our <code>Foo</code> generating a new instance.

In this case, the state is determined by the internal list, and not the <code>Foo</code> instance itself.

A first approach could be using a <code>val</code> with a mutable list(which is thread-safe):

[code language="scala"]
import scala.collection.mutable
class Foo {

  private val _state: mutable.ListBuffer[Int] = 
    ListBuffer()

  def mutate(n: Int): Unit = 
    _state += n

  def state: mutable.ListBuffer[Int] =
    _state

}
[/code]

<a href="https://scalerablog.files.wordpress.com/2016/03/austinpowers.png" rel="attachment wp-att-1676"><img src="https://scalerablog.files.wordpress.com/2016/03/austinpowers.png?w=300" alt="austinpowers" width="300" height="249" class="aligncenter size-medium wp-image-1676" /></a>

And, on the other hand, we could use a <code>var</code> with an immutable list (it's not thread-safe):

[code language="scala"]
class Foo {

  private var _state: List[Int] = 
    List()

  def mutate(n: Int): Unit = 
    synchronized(_state :+= n)

  def state: List[Int] = 
    synchronized(_state)

}
[/code]

Note that we've had to use a <code>synchronize</code> for protecting the state facing concurrent accesses.

<h2>Which is the best option?</h2>

Even it's true that the second option generates more boilerplate, using the first one we could have the following situation:

[code language="scala"]
val foo = new Foo
assert(foo.state==mutable.ListBuffer())
val retrievedState = foo.state += 2
assert(foo.state==ListBuffer()) //ERROR!
[/code]

When returning the mutable internal list, we've broken the <a href="http://www.cas.mcmaster.ca/~kahl/reftrans.html" target="_blank">referential transparency</a> principle and we've lost the access control over the state.

It's probably dependent on the use case, but in general, the functional approach aims to generate new modified copies so potential side effects are avoided.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1672</wp:post_id>
  <wp:post_date>2016-03-14 12:00:13</wp:post_date>
  <wp:post_date_gmt>2016-03-14 10:00:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scalera-tips-var-immutable-vs-val-mutable</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="immutable"><![CDATA[immutable]]></category>
  <category domain="post_tag" nicename="mutable"><![CDATA[mutable]]></category>
  <category domain="post_tag" nicename="tip"><![CDATA[tip]]></category>
  <category domain="post_tag" nicename="val"><![CDATA[val]]></category>
  <category domain="post_tag" nicename="var"><![CDATA[var]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/709319712480493568";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[20739770609]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>98</wp:comment_id>
    <wp:comment_author><![CDATA[Scalera tips: Referential transparency | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2016/04/25/scalera-tips-referential-transparency/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.99.80</wp:comment_author_IP>
    <wp:comment_date>2016-04-25 12:01:05</wp:comment_date>
    <wp:comment_date_gmt>2016-04-25 10:01:05</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] have already talked in other posts about several details of pure functional programming and the importance of avoiding side effects [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1461578662</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1461578663.0812969207763671875;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1461578466.5434029102325439453125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-04-25 10:01:05</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>109</wp:comment_id>
    <wp:comment_author><![CDATA[Scalera tip: Why &#8216;scala.util.Try&#8217; doesn&#8217;t have &#8216;finally&#8217; clause? | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2016/05/16/scalera-tip-why-scala-util-try-doesnt-have-finally-clause/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.83.70</wp:comment_author_IP>
    <wp:comment_date>2016-05-16 12:02:35</wp:comment_date>
    <wp:comment_date_gmt>2016-05-16 10:02:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] the other hand, if you remembet another post where we talked about vals and vars, we mentioned the referential transparency as principle that must be followed for considering a [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1463392955.899272918701171875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1463398801</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1463398188.64669895172119140625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1463398801.6527059078216552734375;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-05-16 10:02:35</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>A small tour through ScalaRx (Part I)</title>
  <link>https://scalerablog.wordpress.com/2016/02/22/a-small-tour-through-scalarx-part-i/</link>
  <pubDate>Mon, 22 Feb 2016 10:00:31 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1683</guid>
  <description/>
  <content:encoded><![CDATA[Today's post is dedicated to a library based on reactive functional programming: <a href="https://github.com/lihaoyi/scala.rx">ScalaRx</a>.

The main objective of this library is that, with the use of values (<em><strong>val</strong></em>), we are going to define an operations flow, which will change dynamically when any of the values changes. We call those values reactive variables.

To use the library, it is enough to add it as a dependency:

[code language="scala"]
libraryDependencies += &quot;com.lihaoyi&quot; %%% &quot;scalarx&quot; % &quot;0.3.0&quot;
[/code]
and to import rx:

[code language="scala"]
import rx._
[/code]
<h3>
Reactive variables</h3>
Reactive variables will be the main elements we will be able to work with. To define them, the constructor <em><strong>Var</strong></em> will be used:

[code language="scala"]
val reactiveVar = Var(0)
[/code]

This way, we are defining a reactive value containing a 0. As can be observed, we can use <em><strong>val</strong></em> instead of <em><strong>var</strong></em>, even though the value will change. This is so because the state of the reactive variable is handled with ScalaRx.

Once we have a reactive variable, we can combine it with other static values or other reactive variables. So that our mastery and expertise can be noticed, we’ll perform a complex operation. We’ll be doing the sum of two reactive variables.

[code language="scala"]
val sum1 = Var(1)
val sum2 = Var(4)
val result = Rx{ sum1() + sum2() }
result.now // Returns 5
[/code]

In order to make reference to the use of the value of the variable in a reactive way, parenthesis are used. Furthermore, given that we want that the value of <em><strong>result</strong></em> changes as a function of the reactive values sum1 and sum2, we enclose it within an <em><strong>Rx</strong></em> block. If we want to evaluate <strong><em>result</em></strong> just after its definition, we’ll be able to do so with the <em><strong>now</strong></em> method. We will obviously be getting a wonderful 5.

Everything looks pretty simple right now. Let’s try to see how reactive changes do work. To do so, let’s change the value of the first summand. For that purpose, we will use again the parenthesis to make reference to the fact that we are changing the value contained in the reactive variable.

[code language="scala"]
sum1() = 2
[/code]

This update of the first summand will cause a reactive change that will affect the whole flow defined. In this case, it will only affect the result value.

[code language="scala"]
result.now // Returns 6
[/code]

This has been an extremely simple example. However, more complex flows could be created so that, when the value of a reactive variable is updated and following a ripple effect, a reaction is triggered at the rest of elements.
<p style="text-align:justify;"><img class="  wp-image-1466 aligncenter" src="https://scalerablog.files.wordpress.com/2016/02/giphy.gif" alt="giphy" width="339" height="207" /></p>
You may now be thinking “I already do this by replacing the reactive variables by our var friends and done”. Well, that’s true. However, Rx is intended to get notifications of the changes in the reactive variables and be able to respond to them (<a href="http://stackoverflow.com/questions/24484450/what-is-the-difference-between-reactive-programming-and-plain-old-closures">here you will find a more complete explanation</a>). <em><strong>Observables</strong></em> are used for this purpose. We’ll have to wait to the second part of the post to get to them.

See you soon!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1683</wp:post_id>
  <wp:post_date>2016-02-22 12:00:31</wp:post_date>
  <wp:post_date_gmt>2016-02-22 10:00:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a-small-tour-through-scalarx-part-i</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="reactive"><![CDATA[reactive]]></category>
  <category domain="post_tag" nicename="rx"><![CDATA[rx]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[20053408080]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/701714048212021248";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>87</wp:comment_id>
    <wp:comment_author><![CDATA[A small tour through ScalaRx (Part II) | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2016/03/07/a-small-tour-through-scalarx-part-ii/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.80.143</wp:comment_author_IP>
    <wp:comment_date>2016-03-07 12:13:21</wp:comment_date>
    <wp:comment_date_gmt>2016-03-07 10:13:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] the previous post we saw how reactive variables work.  We learned how to declare them, modify them and create Rx [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1457348425</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1457348425.8774349689483642578125;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1457345601.1107409000396728515625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-03-07 10:13:21</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Un pequeño paseo por ScalaRx: Parte II</title>
  <link>https://scalerablog.wordpress.com/2016/03/02/un-pequeno-paseo-por-scalarx-parte-ii/</link>
  <pubDate>Wed, 02 Mar 2016 15:00:21 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1703</guid>
  <description/>
  <content:encoded><![CDATA[<p style="text-align:justify;">Hace quince días <a href="https://scalerablog.wordpress.com/2016/02/17/un-pequeno-paseo-por-scalarx/">estuvimos viendo</a> muy por encima alguna de las funcionalidades que nos ofrecía la librería <a href="https://github.com/lihaoyi/scala.rx">ScalaRx</a>. Hoy vamos a acabar ese pequeño paseo dando un poco de caña a los Observables y todas las ventajas que nos ofrecen.</p>

<h3>Anteriormente en Scalera ...</h3>
<p style="text-align:justify;">En el <a href="https://scalerablog.wordpress.com/2016/02/17/un-pequeno-paseo-por-scalarx/">post</a> anterior  vimos como funcionaban las variables reactivas. Aprendimos como declararlas, como modificarlas y como crear estructuras <em><strong>Rx</strong></em> que fueran modificadas cuando las variables reactivas experimentaran un cambio.</p>
<p style="text-align:justify;">La idea principal del post indicaba que el objetivo de la librería ScalaRx era interpretar las variables reactivas y su utilización como un flujo que propaga cambios cuando se produce alguna actualización en alguna de las variables reactivas. Podemos verlo como un efecto mariposa.</p>
<p style="text-align:justify;">Ahora vamos a ver como podemos aprovecharnos de dichos cambios con el tipo <em><strong>Observable</strong></em>.</p>
<img class="  wp-image-1707 aligncenter" src="https://scalerablog.files.wordpress.com/2016/03/giphy.gif" alt="giphy" width="302" height="238" />
<h3>El tipo Observable</h3>
<p style="text-align:justify;">Mediante el tipo <em><strong>Observable</strong></em> podremos realizar determinadas acciones cuando una variable reactiva cambie de valor. Para ello podemos crear observaciones tanto de un <em><strong>Var</strong></em> como de bloques <strong><em>Rx.</em></strong> Existen dos constructores: mediante <em>trigger </em>o mediante <em>foreach</em>. Con el primero de ellos no tendremos una referencia al nuevo valor. Para obtenerlo debemos usar la llamada a <em>.now</em>. Por otro lado, con <em>foreach</em> tendremos una referencia al nuevo valor propagado en el flujo.</p>
<p style="text-align:justify;">Vamos a crear un par de <strong><em>Observables</em></strong> que devuelvan por pantalla el nuevo valor. Para ello utilizaremos las dos versiones del constructor:</p>
[code language="scala"]
import rx._
val reactiveVar = Var(&quot;Hello World&quot;)
val o1 = reactiveVar.trigger {
  println(reactiveVar.now)
}
val o2 = reactiveVar.foreach { newValue =&gt;
  println(newValue)
}
[/code]

En este ejemplo, nada más ejecutarlo, mostrará por pantalla dos "Hello World" debido a que los observables actúan también en la inicialización de la variable reactiva. Si queremos saltarnos el primer cambio en la variable reactiva podemos usar triggerLater.

[code language="scala"]
import rx._
val reactiveVar = Var(&quot;Hello World&quot;)
val o1 = reactiveVar.triggerLater {
  println(reactiveVar.now)
}
[/code]

Por último, si queremos eliminar un Observable, podemos utilizar la instrucción <em>kill</em>.

[code language="scala"]
import rx._
val reactiveVar = Var(&quot;Hello World&quot;)
val o1 = reactiveVar.triggerLater {
 println(reactiveVar.now)
}
o1.kill()
[/code]

De esta manera, no se volverá a reaccionar a los cambios de la variable reactiva.
<h3>Conclusiones</h3>
Después de estos dos post, podemos comentar que ScalaRx se basa en flujos de datos en los que existen varios elementos. Como bien se comenta en la documentación de ScalaRx, dichos elementos se pueden ver como:
<ul>
	<li><strong><em>Var</em></strong>: inician los flujos y provocan una avalancha con sus cambios</li>
	<li><strong><em>Rx</em></strong>: nodos intermedios del flujo que reaccionaran a los cambios</li>
	<li><strong><em>Observables</em></strong>: nodos hoja del flujo que reaccionarán a los cambios sin propagar el flujo.</li>
</ul>
Podemos aprovecharnos de esta abstracción para crear distintos tipos de aplicaciones o herramientas. Por ejemplo, podríamos tener unos parámetros de configuración dinámicos (Var), que sean utilizados en otras variables (Rx) y que, si se producen cambios en ellos, necesitamos realizar una serie de acciones para adaptarnos a la nueva configuración:

[code language="scala"]
import rx._
val host = Var(etcdHost)
val port = Var(etcdPort)
val databaseUri = Rx {host() + &quot;:&quot; + port()}
val obsDatabaseUri = databaseUri.triggerLater {
  connection.resetWith(databaseUri.now())
}
[/code]

Este puede ser un patrón típico para adaptarnos a parámetros de configuración dinámica provenientes, por ejemplo, de ETCD o Consul.

Este es solo un ejemplo. Obviamente, podemos realizar cosas mucho más complejas con el flujo provocado por cambios en variables reactivas. Pero eso tocará verlo en futuros post. Agur de limón!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1703</wp:post_id>
  <wp:post_date>2016-03-02 17:00:21</wp:post_date>
  <wp:post_date_gmt>2016-03-02 15:00:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>un-pequeno-paseo-por-scalarx-parte-ii</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="reactive"><![CDATA[reactive]]></category>
  <category domain="post_tag" nicename="rx"><![CDATA[rx]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[20363958703]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/705046046007689221";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>86</wp:comment_id>
    <wp:comment_author><![CDATA[jpaniego]]></wp:comment_author>
    <wp:comment_author_email>javiersantospaniego@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>79.151.181.194</wp:comment_author_IP>
    <wp:comment_date>2016-03-06 20:47:28</wp:comment_date>
    <wp:comment_date_gmt>2016-03-06 18:47:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[¿Tal vez sea el fold lo que busques?

val a = Var(1)
val b = a.fold(1)((previous,next) =&gt; next - previous)
a() = 12
println(b.now) // 11
a() = 5
println(b.now) // -5


Más info en: https://github.com/lihaoyi/scala.rx#fold]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>85</wp:comment_parent>
    <wp:comment_user_id>59615419</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1457290048.90297698974609375;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1457290048</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1457290049</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-03-06 18:47:28</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>85</wp:comment_id>
    <wp:comment_author><![CDATA[miguelbucarest]]></wp:comment_author>
    <wp:comment_author_email>miguel.s.address@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.32.235.74</wp:comment_author_IP>
    <wp:comment_date>2016-03-06 15:57:22</wp:comment_date>
    <wp:comment_date_gmt>2016-03-06 13:57:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[he estado jugueteando, es una lástima que en el foreach no haya manera de acceder a un "oldValue", por ejemplo, algo del tipo

val a = Var(1)

a.foreach(oldValue, newValue =&gt; 
   println(s"a ha variado su valor en ${newValue - oldValue}")
}

a() = 12 //a ha variado su valor en 11
a() = 5 //a ha variado su valor en -7

etc

por si a alguien le ayuda, he creado un gist con el código listo para ejecutarse y verse:

https://gist.github.com/miguelsaddress/2370bc080bb4f210b4b9]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>14635623</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value>1</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1457272644</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1457272643</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1457272643.94513797760009765625;s:5:"event";s:9:"check-ham";s:4:"user";s:14:"miguelbucarest";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-03-06 13:57:22</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>A small tour through ScalaRx (Part II)</title>
  <link>https://scalerablog.wordpress.com/2016/03/07/a-small-tour-through-scalarx-part-ii/</link>
  <pubDate>Mon, 07 Mar 2016 10:00:41 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1790</guid>
  <description/>
  <content:encoded><![CDATA[A fortnight ago, we took a look at some of the functionalities that <a href="https://github.com/lihaoyi/scala.rx" target="_blank">ScalaRx</a> library provides us with. Today, we are going to end this small tour by getting on with Observables and all the advantages they offer.
<h3>Previously on Scalera...</h3>
In the previous <a href="https://scalerablog.wordpress.com/2016/02/22/a-small-tour-through-scalarx-part-i/" target="_blank">post</a> we saw how reactive variables work.  We learned how to declare them, modify them and create <b><i>Rx </i></b>structures that were modified when the reactive variables underwent a change.

The main idea of the post was that the objective of the ScalaRx library was to interpret reactive variables and their use as a flow that propagates changes whenever there is an update in any of the reactive variables. We can think of it as a butterfly effect.

Now, let's see how we can make use of such changes with the <b><i>Observable</i></b> type.

<img class="CToWUd a6T" src="https://ci4.googleusercontent.com/proxy/8UNlZN6n8UESO5YXIlOyoQJ8Q57ZX42xgJUIclbhwbXeuze99Zee_bQibffZgzxnaiopDSFD3yfoTyO9WHobxJB25jxyZEFyD83bd1ly2Q=s0-d-e1-ft#https://scalerablog.files.wordpress.com/2016/03/giphy.gif" alt="giphy" width="302" height="238" />
<h3>The Observable type</h3>
By means of the <b><i>Observable</i></b> type, we will be able to perform certain actions when a reactive variable changes its value. For that purpose, we can create observations both of a <b><i>Var</i></b> and of <i><b>Rx </b></i>blocks. There are two constructors: <i>trigger </i>and <i>foreach</i>. With the first of them, we won't have a reference to the new value. In order to get it, we would have to use a call to .<i>now</i>. On the other hand, with <i>foreach</i> we will have a reference to the new flow-propagated value.

Let's create a pair of <b>Observables</b> which show on screen the new value. For that purpose, we will use the two versions of a constructor:

[code language="scala"]
import rx._
val reactiveVar = Var(&quot;Hello World&quot;)
val o1 = reactiveVar.trigger {
  println(reactiveVar.now)
}
val o2 = reactiveVar.foreach { newValue =&gt;
  println(newValue)
}
[/code]

This example, once executed, will show on screen two "Hello World" given that the observables also act in the initialization of the reactive variable. If we want to miss the first change of the reactive variable, we can use triggerLater.

[code language="scala"]
import rx._
val reactiveVar = Var(&quot;Hello World&quot;)
val o1 = reactiveVar.triggerLater {
  println(reactiveVar.now)
}
[/code]

Finally, if we want to eliminate an Observable, we can use the <i>kill </i>instruction.

[code language="scala"]
import rx._
val reactiveVar = Var(&quot;Hello World&quot;)
val o1 = reactiveVar.triggerLater {
 println(reactiveVar.now)
}
o1.kill()
[/code]

By doing this, there won't be any further reactions to changes in the reactive variable.
<h3>Conclusions</h3>
After these two posts, we can say that ScalaRx is based on data flows with several elements. As ScalaRx documentation rightly states, those elements can be seen as:
<ul>
	<li><strong><em>Var</em></strong>: root flow nodes that will provoke an avalanche with their changes.</li>
	<li><strong><em>Rx</em></strong>: intermediate flow nodes that will react to changes.</li>
	<li><strong><em>Observables</em></strong>: leaf flow nodes that will react to changes without propagating the flow further.</li>
</ul>
We can make use of this abstraction to create different types of applications or tools. For instance, we could have some dynamic configuration parameters (Var), being used by other variables (Rx) so that, if changes occur to any of them, a series of actions will be performed in order to be able to adapt to the new configuration:

[code language="scala"]
import rx._
val host = Var(etcdHost)
val port = Var(etcdPort)
val databaseUri = Rx {host() + &quot;:&quot; + port()}
val obsDatabaseUri = databaseUri.triggerLater {
  connection.resetWith(&lt;wbr&gt;databaseUri.now())
}
[/code]

This can be a common pattern to adapt to dynamic configuration parameters coming from ETCD or Consul, for instance.

And this is just an example. Obviously, we can do many more complex things with the flow started by changes in reactive variables. But we'll leave that to future posts. Peace out!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1790</wp:post_id>
  <wp:post_date>2016-03-07 12:00:41</wp:post_date>
  <wp:post_date_gmt>2016-03-07 10:00:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a-small-tour-through-scalarx-part-ii</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="reactive"><![CDATA[reactive]]></category>
  <category domain="post_tag" nicename="rx"><![CDATA[rx]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[20513178894]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/706784777467072512";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Scalera tips : parámetros por defecto y sobrecarga</title>
  <link>https://scalerablog.wordpress.com/2016/03/16/scalera-tips-default-parameters-and-overload/</link>
  <pubDate>Wed, 16 Mar 2016 15:00:45 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1798</guid>
  <description/>
  <content:encoded><![CDATA[<p style="text-align:justify;">Hoy toca un post breve pero espero que descubra algo nuevo para algunos. Hoy hablaremos de los problemas que puede dar la sobrecarga al tener parámetros por defecto.</p>
<p style="text-align:justify;">Vamos a empezar definiendo los conceptos básicos:</p>
<p style="text-align:justify;">- Sobrecarga: ...really?
- Parámetros por defecto: en Scala, es posible definir parámetros por defecto en los métodos. Estos parámetros nos permitirán obviar algunos parámetros en su llamada. Vamos a ver un ejemplo:</p>
[code language="scala"]
def getUri(host: String = &quot;localhost&quot;, port: Int = 8080): String = &quot;$host:$port&quot;

getUri(&quot;127.0.0.1&quot;, 8081) //&quot;127.0.0.1:8081&quot;
getUri(port = 8081) //&quot;localhost:8081&quot;
getUri(&quot;127.0.0.1&quot;) //&quot;127.0.0.1:8080&quot;
getUri() //&quot;localhost:8080&quot;
[/code]
<h3>Genial...y ¿cuál es el problema?</h3>
Vamos a crear el siguiente trait:

[code language="scala"]
trait A {
  def a(a: Int, p: Boolean = false)
  def a(b: Boolean = false)
}
[/code]

y ahora compilamos y...

<img class="  wp-image-1805 aligncenter" src="https://scalerablog.files.wordpress.com/2016/03/giphy2.gif" alt="giphy2" width="318" height="160" />
<blockquote>error: in trait A, multiple overloaded alternatives of method a define default arguments.</blockquote>
Sin embargo, si quitamos el parámetro por defecto de la primera función:

[code language="scala"]
trait A {
  def a(a: Int, p: Boolean)
  def a(b: Boolean = false)
}
[/code]

y compilamos .....

<img class=" size-full wp-image-1802 aligncenter" src="https://scalerablog.files.wordpress.com/2016/03/giphy1.gif" alt="giphy1" width="160" height="160" />

todo va bien.
<h3>¿Cuál es la causa de este kilombo?</h3>
El problema es que el compilador utilizará los parámetros por defecto para generar los nombres de unas funciones auxiliares que utilizará para tratar los método con valores por defecto (no olvidemos que seguimos en la JVM). Veamos el ejemplo que aparece en la <a href="http://docs.scala-lang.org/sips/completed/named-and-default-arguments.html">documentación</a>:

[code language="scala"]
def f(a: Int = 1, b: String)
// generates a method: def f$default$1 = 1
f(b = &quot;3&quot;)
// transformed to: f(b = &quot;3&quot;, a = f$default$1)
[/code]

Como se puede observar, se genera una nueva función y se sobreescribe la llamada al método original haciendo uso de dicha función.

Después de esto, podemos decir que en el primer caso de nuestro kilombo, las dos funciones auxiliares creadas tendrán este nombre:
<blockquote>def a$default$1 = false</blockquote>
y por ello se producirá un conflicto de nombres.

En el segundo caso, al no existir un parámetro por defecto en el primer método, solo se generará una nueva función y, por tanto, no se producirá ningún conflicto.

Y hasta aquí el post :)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1798</wp:post_id>
  <wp:post_date>2016-03-16 17:00:45</wp:post_date>
  <wp:post_date_gmt>2016-03-16 15:00:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scalera-tips-default-parameters-and-overload</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="default"><![CDATA[default]]></category>
  <category domain="post_tag" nicename="overload"><![CDATA[overload]]></category>
  <category domain="post_tag" nicename="tip"><![CDATA[tip]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[20816261658]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/710118960314900480";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Scalera tips: How NOT to change your actor's state</title>
  <link>https://scalerablog.wordpress.com/2016/03/28/scalera-tips-how-not-to-change-your-actors-state/</link>
  <pubDate>Mon, 28 Mar 2016 10:00:50 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1851</guid>
  <description/>
  <content:encoded><![CDATA[A common key when working with Akka, is modifying properly our actor's state. If we jog our memory, this framework paradigm allows us to program modeling the concurrency based on actors and message passing. From that base, we could define an actor as a <strong>computing unit that may have state and perform tasks based on messages that it will receive through its mailbox and that will be processed sequentially </strong>.

That means that, in order to avoid side effects, the actor's state modification has to take place when processing a message. So senseful so far. However, it's a pretty common mistake to do something similar to this:

[code language="scala"]
class MyActor extends Actor {

  var state: Int = 0

  def receive = {

    case &quot;command&quot; =&gt; 
      Future(state = 1)

    case &quot;someOtherCommand&quot; =&gt; 
      state = 2

  }

}
[/code]

In this case, we have no more warranty that the state change (whose only responsible of keeping it consistent and thread safe is the actor) might cause side efects given that, in the precise moment where the <code>Future</code> modifies the <code>var</code>, it's possible that the state is being modified by the actor itself (probably as a reaction to some other received message).

This <code>Future[Unit]</code> might not be a block like that. It could be the result of having asked to some other actor:

[code language="scala"]
class MyActor extends Actor {

  type State = Int

  var state: State = 0

  def receive = {

    case &quot;command&quot; =&gt; 
      (service ? &quot;giveMeMyNewState&quot;).map{
        case newState: State =&gt; state = newState
      }

    case &quot;someOtherCommand&quot; =&gt; 
      state = 2
  }

}
[/code]

Something that probably none of us has ever tried.

<a href="https://scalerablog.files.wordpress.com/2016/03/giphy3.gif" rel="attachment wp-att-1846"><img src="https://scalerablog.files.wordpress.com/2016/03/giphy3.gif?w=300" alt="giphy" width="300" height="150" class="aligncenter size-medium wp-image-1846" /></a>

<h2>The proper way</h2>

If we want to modify the actor's state as result of having previously asked to some other actor and without breaking the concurrency control of the actor, it could be achieved like this:

[code language="scala"]
class MyActor extends Actor {

  type State = Int

  var state: State = 0

  def receive = {

    case &quot;command&quot; =&gt; 
      (service ? &quot;giveMeMyNewState&quot;) pipeTo self

    case &quot;someOtherCommand&quot; =&gt; 
      state = 2

    case newState: State =&gt; 
      state = newState
  }

}
[/code]

With <code>pipeTo</code> we specify to send to certain actor the result of having evaluated some future when its resolved. This way we're indicating that, when we get the response of the other actor, it will be sent to our mailbox, so it will be processed like a normal message, sequentially.

<a href="https://scalerablog.files.wordpress.com/2016/03/bill_murray_gif_1.gif" rel="attachment wp-att-1847"><img src="https://scalerablog.files.wordpress.com/2016/03/bill_murray_gif_1.gif?w=300" alt="bill_murray_gif_1" width="300" height="161" class="aligncenter size-medium wp-image-1847" /></a>

Easy peasy :-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1851</wp:post_id>
  <wp:post_date>2016-03-28 12:00:50</wp:post_date>
  <wp:post_date_gmt>2016-03-28 10:00:50</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scalera-tips-how-not-to-change-your-actors-state</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="actor"><![CDATA[actor]]></category>
  <category domain="post_tag" nicename="akka"><![CDATA[akka]]></category>
  <category domain="post_tag" nicename="ask"><![CDATA[ask]]></category>
  <category domain="post_tag" nicename="concurrency"><![CDATA[concurrency]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="future"><![CDATA[future]]></category>
  <category domain="post_tag" nicename="mutable"><![CDATA[mutable]]></category>
  <category domain="post_tag" nicename="side-effect"><![CDATA[side effect]]></category>
  <category domain="post_tag" nicename="state"><![CDATA[state]]></category>
  <category domain="post_tag" nicename="tip"><![CDATA[tip]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/714391819069427712";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21201878037]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>91</wp:comment_id>
    <wp:comment_author><![CDATA[Sean Rand]]></wp:comment_author>
    <wp:comment_author_email>seanrand57@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://secretdiaryofacyclist.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>207.228.179.133</wp:comment_author_IP>
    <wp:comment_date>2016-03-28 17:51:53</wp:comment_date>
    <wp:comment_date_gmt>2016-03-28 15:51:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Reblogueó esto en <a href="https://secretdiaryofacyclist.wordpress.com/2016/03/28/scalera-tips-how-not-to-change-your-actors-state/" rel="nofollow">SeanRand</a>y comentado: 
Great post from a colleague and ScalaMaster on the AKKA Actor State issues sometimes we introduce to actors]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>34327922</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1459180313.85972690582275390625;s:5:"event";s:9:"check-ham";s:4:"user";s:21:"secretdiaryofacyclist";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1459180369</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>reblog_ping</wp:meta_key>
      <wp:meta_value>1</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1459180369</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1459180370.4061911106109619140625;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-03-28 15:51:53</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>92</wp:comment_id>
    <wp:comment_author><![CDATA[miguelbucarest]]></wp:comment_author>
    <wp:comment_author_email>miguel.s.address@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.32.235.74</wp:comment_author_IP>
    <wp:comment_date>2016-03-29 07:32:01</wp:comment_date>
    <wp:comment_date_gmt>2016-03-29 05:32:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Reblogueó esto en <a href="https://mamorblog.wordpress.com/2016/03/29/scalera-tips-how-not-to-change-your-actors-state/" rel="nofollow">Warning! Coding Area</a>y comentado: 
Intedezting, as a newbie, I would have done it wrong]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>14635623</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1459229522</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>reblog_ping</wp:meta_key>
      <wp:meta_value>1</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1459229522.4364631175994873046875;s:5:"event";s:9:"check-ham";s:4:"user";s:14:"miguelbucarest";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1459229522</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-03-29 05:32:01</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>93</wp:comment_id>
    <wp:comment_author><![CDATA[jpaniego]]></wp:comment_author>
    <wp:comment_author_email>javiersantospaniego@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.82.197.162</wp:comment_author_IP>
    <wp:comment_date>2016-03-29 09:56:41</wp:comment_date>
    <wp:comment_date_gmt>2016-03-29 07:56:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Some people have asked about why doing

(service ? "giveMeMyNewState") pipeTo self

when it clearly does the same as sending a message with 'tell' and expects for an incoming message in the mailbox.

Imagine this actor you're asking sends back a message that your actor doesn't know how to handle. With the proposed way, you could map it to anything else (adding some metadata or whatever) that fits into your actor's behavior.

(service ? "giveMeMyNewState").map((msg:Any) =&gt; /* Make it fit */) pipeTo self]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>59615419</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1459238202</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1459238203</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1459238202.989428997039794921875;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-03-29 07:56:41</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Scalera tips: default parameters and overloading</title>
  <link>https://scalerablog.wordpress.com/2016/03/21/scalera-tips-default-parameters-and-overloading/</link>
  <pubDate>Mon, 21 Mar 2016 10:00:13 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1855</guid>
  <description/>
  <content:encoded><![CDATA[<div dir="ltr">

It's time today for a short post which hopefully will help some of you in discovering a new world. Today we are talking about the problems that may arise due to overloading when we have default parameters.

Let's start defining the basic concepts:

- Overloading: ...really?
- Default parameters: in Scala, it is possible to define default parameters in methods. These parameters can be obviated in the method call. With an example:

[code language="scala"]
def getUri(host: String = &quot;localhost&quot;, port: Int = 8080): String =
&quot;$host:$port&quot;

getUri(&quot;127.0.0.1&quot;, 8081) //&quot;127.0.0.1:8081&quot;
getUri(port = 8081) //&quot;localhost:8081&quot;
getUri(&quot;127.0.0.1&quot;) //&quot;127.0.0.1:8080&quot;
getUri() //&quot;localhost:8080&quot;
[/code]
<h3>Great... and what's the problem with it?</h3>
Let's create the following trait:

[code language="scala"]
trait A {
  def a(a: Int, p: Boolean = false)
  def a(b: Boolean = false)
}
[/code]

We now compile and...

<img class="CToWUd a6T" src="https://ci5.googleusercontent.com/proxy/DZqSxgCtFpAfgjd_Xe2qDIQ6vWLeomY5pkzC62_Za5bbwXwz5hMF5qX5GYz_n8D3OBHdhg-8UbpZiCDly4bTADfgK7HU-_LdWT6oIVHKyO8=s0-d-e1-ft#https://scalerablog.files.wordpress.com/2016/03/giphy2.gif" alt="giphy2" width="318" height="160" />
<blockquote>error: in trait A, multiple overloaded alternatives of method a define default arguments.</blockquote>
However, if we take away the default parameter in the first function:

[code language="scala"]
trait A {
  def a(a: Int, p: Boolean)
  def a(b: Boolean = false)
}
[/code]

and we compile .....

<img class="CToWUd" src="https://ci6.googleusercontent.com/proxy/9WWr6p--TW4UbCcq7I9cl54UEzZK-p9__YSrxdS3bOeUJXU6qY8wPoeHqEp_y7Hi0oUzcBWPMpmC-z6NYncqle9c7QGwxoPeGduP5RMeSFY=s0-d-e1-ft#https://scalerablog.files.wordpress.com/2016/03/giphy1.gif" alt="giphy1" width="160" height="160" />

everything works.
<h3>What's the reason for all this mess?</h3>
The problem is that the compiler uses default parameters to generate the names of some auxiliary functions that will help in dealing with the methods with default values (we shouldn't forget that we are still in the JVM). Let's see the example that is shown in the <a href="http://docs.scala-lang.org/sips/completed/named-and-default-arguments.html" target="_blank">documentation</a>:

[code language="scala"]
def f(a: Int = 1, b: String)
// generates a method: def f$default$1 = 1
f(b = &quot;3&quot;)
// transformed to: f(b = &quot;3&quot;, a = f$default$1)
[/code]

As can be observed, a new function is generated and the call to the original method is overloaded by making use of this function.

After this, we can say that in our messy example, the two auxiliary functions that are created will have this name:
<blockquote>def a$default$1 = false</blockquote>
and this is why a name conflict will arise.

In the second case, given that there is no default parameter in the first method, only one new function will be generated and thus, no conflict will appear.

And this is how our post ends :)

</div>
<div class="yj6qo ajU"></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1855</wp:post_id>
  <wp:post_date>2016-03-21 12:00:13</wp:post_date>
  <wp:post_date_gmt>2016-03-21 10:00:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scalera-tips-default-parameters-and-overloading</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="post_tag" nicename="default"><![CDATA[default]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="overload"><![CDATA[overload]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[20971206216]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/711855254787100672";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Spark Streaming + Twitter : Analytics al gusto</title>
  <link>https://scalerablog.wordpress.com/2016/04/06/spark-streaming-twitter-analytics-al-gusto/</link>
  <pubDate>Wed, 06 Apr 2016 10:00:28 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1862</guid>
  <description/>
  <content:encoded><![CDATA[Hay días en que te sientes manitas y días en los que no. Hoy es de los primeros.
En este post vamos a crear una pequeña aplicación con Spark Streaming que nos permita realizar analytics de manera muy básica sobre Twitter. Filtrar es solo el principio: el límite lo que marque tu imaginación :-) 

<a href="https://scalerablog.files.wordpress.com/2016/04/giphy-1.gif" rel="attachment wp-att-1870"><img src="https://scalerablog.files.wordpress.com/2016/04/giphy-1.gif" alt="giphy (1)" width="500" height="280" class="aligncenter size-full wp-image-1870" /></a>

<h2>Paso 1: Crear token de OAuth en Twitter</h2>

Antes de ponernos a codificar como locos, debemos hacernos con un token de OAuth para poder usar la API de Twitter. Es realmente sencillo y podeis seguir los pasos tal y como se describe en la <a href="https://dev.twitter.com/oauth/overview/application-owner-access-tokens" target="_blank">documentación oficial de Twitter</a>.

Una vez creado, si os logais en <a href="http://apps.twitter.com" target="_blank">apps.twitter.com</a> y pulsáis sobre la aplicación que habéis creado, en la pestaña <strong>Keys and Access Tokens</strong> podréis obtener los datos que nos van a hacer falta en nuestra aplicación:
<ul>
<li>Consumer Key (API Key)</li>
<li>Consumer Secret (API Secret)</li>
<li>Access Token</li>
<li>Access Token Secret</li>
</ul>

<h2>Paso 2: Definiendo nuestro DSL</h2>

Para ello haced fork o simplemente descargaros el proyecto <a href="https://github.com/Scalera/twitter-stream" target="_blank">twitter-stream</a> que se encuentra en el Github de Scalera. En esta sección daremos un repaso rápido a los componentes que forman el proyecto.

<h3>El core: Source</h3>

El core de esta prueba de concepto es desplegar una aplicación Spark Streaming que lee de una determinada fuente (en este caso de Twitter). Cabe destacar que el streaming de Spark es NRT (Near Real Time) ya que, en base a un tamaño de ventana de tiempo N, se creará un batch cada N segundos con todos los elementos que hayan entrado en dicha ventana. 

Al stream de datos, en Spark, se le denomina <code>DStream</code>, mientras que cada uno de esos batches se llama <code>RDD</code>, que para la gente que no esté familiarizada con Spark core, representan una colección distribuida en el cluster de Spark (<em><strong>R</strong>esilient <strong>D</strong>istributed <strong>D</strong>ataset</em>).

Si echamos un vistazo al trait <code>Source</code> (Más adelante veremos qué funcionalidad aportan <code>Actions</code> y <code>Filters</code>):

[code language="scala"]
trait Source extends Actions with Filters {
  _: util.Config =&gt;

  type Content = twitter4j.Status

  val conf = new SparkConf()
    .setAppName(config.getString(Config.AppName))
    .setMaster(config.getString(Config.SparkMaster))

  val windowTime = Seconds(config.getInt(Config.WindowSeconds))

  val ssc = new StreamingContext(conf, windowTime)

  lazy val stream = TwitterUtils.createStream(ssc, None, filters)

}
[/code]

vemos que definimos una configuración de Spark (<code>SparkConf</code>) a partir de los parámetros definidos en el fichero de configuración. 

También definimos el tamaño de ventana e instanciamos un <code>StreamingContext</code> sobre el que declarar nuestro stream <code>stream</code>. La forma de instanciarlo la aporta <code>TwitterUtils</code> (que importamos), y necesita el Streaming context y las palabras claves sobre las que filtraremos los tweets.

Es importante mencionar que, no por crear el stream, este se pone a escuchar, sino que se evaluará de manera perezosa. Esto es así para poder definir las acciones que queremos aplicar con cada nuevo batch en nuestro stream.

<h3>Definiendo filtros</h3> 

Sin trampa ni cartón: solo una variable privada con un synchronized que permite añadir filtros como <code>String</code>s a una secuencia. A la hora de crear el stream, como hemos visto en <code>Source</code> se pasan como argumento dichos filtros.

[code language="scala"]
trait Filters {

  private var _filters: Seq[String] = Seq()

  def filters = synchronized(_filters)

  def filter(filters: String*): Unit =
    synchronized(_filters = _filters ++ filters.toSeq)

}
[/code]
<h3>Cómo definir el comportamiento del stream: Actions</h3>

El trait <code>Actions</code> se encarga de añadir acciones / handlers/ callbacks a ejecutar cada vez que se reciba un nuevo batch. Estas acciones se guardan en <code>actions</code>. Para añadir una nueva acción (<code>Action</code> no es más que un type alias para una función de batch - <code>RDD[Content]</code> - a <code>Unit</code>), se invoca al método <code>when</code>.

Una vez que hayamos definido todas las acciones a realizar, comenzaremos a recibir contenido en el stream invocando a <code>listen</code>. Este aplica las funciones definidas en <code>actions</code> sobre el stream y luego comienza a escuchar del mismo.

[code language="scala"]
trait Actions {
  _: util.Config =&gt;

  type Content

  type Action = RDD[Content] =&gt; Unit

  private var actions: List[Action] = List()

  val ssc: StreamingContext

  val stream: ReceiverInputDStream[Content]

  def listen(): Unit = {
    actions.foreach(f =&gt; 
      stream.foreachRDD(rdd =&gt; f(rdd)))
    ssc.start()
  }

  def when(action: Action): Unit = {
    actions = actions :+ action
  }

}
[/code]

<h3>...y el resto: Credentials y Analytics</h3>

<code>Credentials</code> se encarga de leer del fichero de configuración los parámetros relativos al token de seguridad y escribe dichas propiedades como propiedades en la JVM.

El trait <code>Analytics</code>, extiende de todos los componentes antes definidos, de manera que para usarlo sea tan sencillo como hacer

[code language="scala"]
object Boot extends Analytics

[/code]

<h2>Ejemplo</h2>

En primer lugar vamos a modificar el fichero de configuración para que utilice el token que acabamos de generar: sustituimos el comodín secret en <code>src/main/resources/app.conf</code> por los valores reales.

Una vez hecho esto, añadimos los filtros que queramos (para trabajar solo con los tweets que contengan ciertas palabras clave):

[code language="scala"]
  filter(
    &quot;dance&quot;,
    &quot;music&quot;
  )
[/code]

Y posteriormente indicamos con una (o varias) sentencias <code>when</code> la acción a realizar cuando llegue un nuevo grupo de tweets. Por ejemplo, los contamos e imprimimos por pantalla:

[code language="scala"]
when { tweets =&gt;
  logger.info(s&quot;Received tweets [${tweets.count()}}]&quot;)
  tweets.foreach {
    tweet =&gt; logger.info(s&quot;\n$tweet&quot;)
  }
}
[/code]

Para hacer funcionar nuestro ejemplo bastará con ejecutar (sobre el directorio del proyecto):

[code]
sbt run
[/code]

¡Y los tweets deberían ir apareciendo en tu abultada salida de log!

<a href="https://scalerablog.files.wordpress.com/2016/04/idwzlyrarjaylstrg8q7.gif" rel="attachment wp-att-1871"><img src="https://scalerablog.files.wordpress.com/2016/04/idwzlyrarjaylstrg8q7.gif?w=300" alt="idwzlyrarjaylstrg8q7" width="300" height="167" class="aligncenter size-medium wp-image-1871" /></a>

Easy peasy :-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1862</wp:post_id>
  <wp:post_date>2016-04-06 12:00:28</wp:post_date>
  <wp:post_date_gmt>2016-04-06 10:00:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>spark-streaming-twitter-analytics-al-gusto</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="analytics"><![CDATA[analytics]]></category>
  <category domain="post_tag" nicename="api"><![CDATA[API]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="dsl"><![CDATA[dsl]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="spark"><![CDATA[spark]]></category>
  <category domain="post_tag" nicename="streaming"><![CDATA[streaming]]></category>
  <category domain="post_tag" nicename="twitter"><![CDATA[twitter]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21507299995]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/717653380634529792";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>100</wp:comment_id>
    <wp:comment_author><![CDATA[Spark Streaming: streams con estado (¿Android vs IOS?) | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2016/04/27/spark-streaming-streams-con-estado-android-vs-ios/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.99.225</wp:comment_author_IP>
    <wp:comment_date>2016-04-27 12:00:55</wp:comment_date>
    <wp:comment_date_gmt>2016-04-27 10:00:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] os acordais del post en el que hablabamos sobre como conectar Spark Streaming con Twitter, dijimos que el límite para hacer analíticas lo ponía vuestra [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1461751256.61098003387451171875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1461752750</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1461752750.531692981719970703125;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-04-27 10:00:55</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Spark Streaming + Twitter : Analytics to one's taste</title>
  <link>https://scalerablog.wordpress.com/2016/04/11/spark-streaming-twitter-analytics-to-ones-taste/</link>
  <pubDate>Mon, 11 Apr 2016 10:00:10 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1869</guid>
  <description/>
  <content:encoded><![CDATA[Some days you feel handyman, some others you don't. Today is one of those first.
In this post we'll create a small application with Spark Streaming that allows us to perform analytics over Twitter in a very basic way. Filtering is just the beginning: the limit is your imagination :-)

<a href="https://scalerablog.files.wordpress.com/2016/04/giphy-1.gif" rel="attachment wp-att-1870"><img src="https://scalerablog.files.wordpress.com/2016/04/giphy-1.gif" alt="giphy (1)" width="500" height="280" class="aligncenter size-full wp-image-1870" /></a>

<h2>Step 1: Create your OAuth token at Twitter</h2>

Before start coding like crazy, we have to get an OAuth token for being able to use Twitter's API. It's really easy and you can follow the steps as described in <a href="https://dev.twitter.com/oauth/overview/application-owner-access-tokens" target="_blank"> Twitter's official documentation</a>.

Once created, if you log in at <a href="http://apps.twitter.com" target="_blank">apps.twitter.com</a> and you click on the application you have just created, inside <strong>Keys and Access Tokens</strong> tab you'll get all the data that our application requires:
<ul>
<li>Consumer Key (API Key)</li>
<li>Consumer Secret (API Secret)</li>
<li>Access Token</li>
<li>Access Token Secret</li>
</ul>

<h2>Step 2: Defining our DSL</h2>

For that purpose, you can fork or just clone the <a href="https://github.com/Scalera/twitter-stream" target="_blank">twitter-stream</a> project that can be found at Scalera's Github account. In this section, we'll cover in a flash all components that take part in the project.

<h3>The core: Source</h3>

The core of this PoC is deploying a Spark Streaming application that reads from some source (in this case Twitter). We have to mention that Spark's streaming is NRT (Near Real Time) given that, based on certain N window size, every N seconds a new batch will be created with all elements that were written in the source in that time window. 

That data stream in Spark is called <code>DStream</code>, while each of those batches is called <code>RDD</code>. For people that is not familiarized with Spark, an RDD represents a collection that is distributed among the Spark cluster (<em><strong>R</strong>esilient <strong>D</strong>istributed <strong>D</strong>ataset</em>).

If we take a look at <code>Source</code> trait (Later on we'll see which functionality both <code>Actions</code> and <code>Filters</code> provide):

[code language="scala"]
trait Source extends Actions with Filters {
  _: util.Config =&gt;

  type Content = twitter4j.Status

  val conf = new SparkConf()
    .setAppName(config.getString(Config.AppName))
    .setMaster(config.getString(Config.SparkMaster))

  val windowTime = Seconds(config.getInt(Config.WindowSeconds))

  val ssc = new StreamingContext(conf, windowTime)

  lazy val stream = TwitterUtils.createStream(ssc, None, filters)

}
[/code]

as you'll see, we define some Spark configuration (<code>SparkConf</code>) from the parameters defined in the configuration file. 

We also define the time window size and instantiate a <code>StreamingContext</code> that we will use to contain our next-declared <code>stream</code>. <code>TwitterUtils</code> (it's imported) provides the way to instantiate the stream, which requires the Streaming context and the key words we want to use for filtering.

It's good to know that, by creating the stream, it won't start listening new items. It will be evaluated lazily. This is explained by the need of defining in an early moment all those actions that we will want to apply to each new batch in our stream.

<h3>Defining filters</h3> 

No gimmicks: just a private synchronized variable that allows adding filters as a <code>String</code> sequence. When creating the stream, as we've seen when talking about <code>Source</code>, these filters are passed as parameters.

[code language="scala"]
trait Filters {

  private var _filters: Seq[String] = Seq()

  def filters = synchronized(_filters)

  def filter(filters: String*): Unit =
    synchronized(_filters = _filters ++ filters.toSeq)

}
[/code]
<h3>How to define stream's behavior: Actions</h3>

The <code>Actions</code> trait is in charge of adding actions/handlers/callbacks to execute each time a new batch is received. These actions will be saved inside <code>actions</code> variable. For adding a new action (<code>Action</code> is just a type alias for a batch - <code>RDD[Content]</code> - to <code>Unit</code> function), method <code>when</code> is invoked.

Once we have defined all possible actions to perform, we'll start receiving items in the stream after having invoked <code>listen</code> method. It will settle that all defined function inside <code>actions</code> will be applied over the stream and then it starts listening.

[code language="scala"]
trait Actions {
  _: util.Config =&gt;

  type Content

  type Action = RDD[Content] =&gt; Unit

  private var actions: List[Action] = List()

  val ssc: StreamingContext

  val stream: ReceiverInputDStream[Content]

  def listen(): Unit = {
    actions.foreach(f =&gt; 
      stream.foreachRDD(rdd =&gt; f(rdd)))
    ssc.start()
  }

  def when(action: Action): Unit = {
    actions = actions :+ action
  }

}
[/code]

<h3>...the rest of it: Credentials and Analytics</h3>

<code>Credentials</code> has the purpose of reading from the configuration file all parameters relative to the security token and write them as JVM properties.

The <code>Analytics</code> trait extends from all previously defined components, so using it will be as easy as

[code language="scala"]
object Boot extends Analytics
[/code]

<h2>Example</h2>

In first place, we're going to modify the configuration file for using the token we have just created: we replace the 'secret' word in <code>src/main/resources/app.conf</code> with real values.

Once this is done, we'll add all the filters we want (for dealing only with the tweets than contain certain key workds):

[code language="scala"]
  filter(
    &quot;dance&quot;,
    &quot;music&quot;
  )
[/code]

We'll later indicate with one (or several) <code>when</code> clauses the actions to perform when a new bunch of tweets is arrived. For example, we count and print them out:

[code language="scala"]
when { tweets =&gt;
  logger.info(s&quot;Received tweets [${tweets.count()}}]&quot;)
  tweets.foreach {
    tweet =&gt; logger.info(s&quot;\n$tweet&quot;)
  }
}
[/code]

For making our exaple work, you only have to execute (over the project dir):

[code]
sbt run
[/code]

And tweets should start appearing among your messy blog output!

<a href="https://scalerablog.files.wordpress.com/2016/04/idwzlyrarjaylstrg8q7.gif" rel="attachment wp-att-1871"><img src="https://scalerablog.files.wordpress.com/2016/04/idwzlyrarjaylstrg8q7.gif?w=300" alt="idwzlyrarjaylstrg8q7" width="300" height="167" class="aligncenter size-medium wp-image-1871" /></a>

Easy peasy :-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1869</wp:post_id>
  <wp:post_date>2016-04-11 12:00:10</wp:post_date>
  <wp:post_date_gmt>2016-04-11 10:00:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>spark-streaming-twitter-analytics-to-ones-taste</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="analytics"><![CDATA[analytics]]></category>
  <category domain="post_tag" nicename="api"><![CDATA[API]]></category>
  <category domain="post_tag" nicename="bigdata"><![CDATA[BigData]]></category>
  <category domain="post_tag" nicename="dsl"><![CDATA[dsl]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="spark"><![CDATA[spark]]></category>
  <category domain="post_tag" nicename="streaming"><![CDATA[streaming]]></category>
  <category domain="post_tag" nicename="twitter"><![CDATA[twitter]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21670958651]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/719465126563172356";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>97</wp:comment_id>
    <wp:comment_author><![CDATA[Last week in Stream Processing &amp; Analytics 4/18/2016 | Enjoy IT - SOA, Java, Event-Driven Computing and Integration]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://guidoschmutz.wordpress.com/2016/04/20/last-week-in-stream-processing-analytics-4182016/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.101.118</wp:comment_author_IP>
    <wp:comment_date>2016-04-20 22:54:37</wp:comment_date>
    <wp:comment_date_gmt>2016-04-20 20:54:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Spark Streaming + Twitter : Analytics to one’s taste by jpaniego [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1461185678.0362689495086669921875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1461185954</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1461185954.9579079151153564453125;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-04-20 20:54:37</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>102</wp:comment_id>
    <wp:comment_author><![CDATA[Spark Streaming: stateful streams (Android vs IOS?) | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2016/05/02/spark-streaming-stateful-streams-android-vs-ios/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.118</wp:comment_author_IP>
    <wp:comment_date>2016-05-02 12:10:44</wp:comment_date>
    <wp:comment_date_gmt>2016-05-02 10:10:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] you remember the post where we talk about how to connect Spark Streaming and Twitter, we said that the limit for performing analytics was up to your [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1462183844.3922049999237060546875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1462185860</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1462185860.091268062591552734375;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-05-02 10:10:44</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Spark: Operaciones básicas con RDD's</title>
  <link>https://scalerablog.wordpress.com/2016/03/30/spark-operaciones-basicas-con-rdds/</link>
  <pubDate>Wed, 30 Mar 2016 13:13:44 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=1968</guid>
  <description/>
  <content:encoded><![CDATA[<p style="text-align:justify;">Después de más de un año publicando entradas en Scalera creo que ya ha llegado el momento de tocar un poco una de las herramientas más importantes del ecosistema Scala. Por supuesto, me refiero a <em><strong>Spark</strong></em>.</p>
<p style="text-align:justify;">Spark es un framework que permite paralelizar colecciones y su procesamiento. Este procesamiento pueden ser tareas batch tipo Map-Reduce sobre multitud de orígenes de datos (HDFS, Cassandra, ElasticSearch, ...), procesamiento en streaming de ciertos flujos de datos (Kafka, Flume, ...); o realizar consultas con distintas fuentes de datos de manera unificada con un lenguaje de consulta tipo SQL.
Pero hoy no vamos a abarcar tanto. Hoy vamos a conocer el tipo de dato básico que se utiliza en Spark: el tipo RDD.</p>
<p style="text-align:justify;"><strong>¿Qué es un RDD?</strong></p>
<p style="text-align:justify;">El tipo <em><strong>RDD</strong></em> (Resilient Distributed Dataset) se parece mucho a otras colecciones de Scala. Sin embargo es importante conocer alguna de sus características principales:</p>

<ul>
	<li style="text-align:justify;">Es una colección distribuida. Esto quiere decir que está particionada entre los distintos workers de Spark.</li>
	<li style="text-align:justify;">Son inmutables: cuando transformamos un nuevo RDD realmente estamos creando uno nuevo.</li>
	<li style="text-align:justify;">Su evaluación es perezosa. Con los RDD's estamos definiendo un flujo de información, pero no se ejecuta en el momento de definición, sino en el momento en el que se evalúe aplicando una acción sobre el RDD.<img class="  wp-image-2003 aligncenter" src="https://scalerablog.files.wordpress.com/2016/03/funny-meme-super-lazy1.jpg" alt="funny-meme-super-lazy1" width="289" height="248" /></li>
</ul>
Además, es importate saber que sobre los RDD's se pueden realizar dos tipos de operaciones: transformaciones y acciones.

<strong>Genial, ¿pero cómo los creo?</strong>

Existen varias formas para crear un RDD:
<ul>
	<li><em><strong>Paralelizando</strong></em> una colección en memoria, por ejemplo, una lista de valores. Para ello utilizamos el método <em>parallelize</em> del <em>SparkContext</em>.
[code language="scala"]
val newRDD: RDD[Int] = sc.parallelize(List(1, 2, 3, 4))
[/code]</li>
	<li>A partir de una <em><strong>fuente de almacenamiento</strong></em> utilizando, por ejemplo, la función <em>textFile</em> del <em>SparkContext</em>.
[code language="scala"]
val newRDD: RDD[Int] = sc.textFile(&quot;myValues.txt&quot;)
[/code]</li>
	<li><em><strong>Transformando</strong> <strong>un RDD</strong></em> aplicando una transformación para crear un nuevo RDD a partir de otro.
[code language="scala"]
val newRDD: RDD[String] = intValues.map(_.toString)
[/code]</li>
</ul>
<strong>¿Y eso de las transformaciones ...?</strong>

Las transformaciones definirán como cambiará el flujo de información generando un nuevo RDD. Con estas transformaciones no se está evaluando el RDD, sino creando uno nuevo. Algunas de las transformaciones son:
<ul>
	<li><em><strong>map</strong></em>: aplica una función a cada elemento de la colección:
[code language="scala"]
intValues.map(_.toString) // RDD[String]
[/code]</li>
	<li><em><strong>filter</strong></em>: selecciona el subconjunto de elementos que cumplen una determinada expresión booleana:
[code language="scala"]
intValues.filter(_.isOdd)// RDD[Int]
[/code]</li>
	<li><em><strong>flatMap</strong></em>: además de realizar una función map, aplica un método flatten:

[code language="scala"]
textFile.map(_.split(&quot; &quot;)) //RDD[Array[String]] but ...
textFile.flatMap(_.split(&quot; &quot;)) //RDD[String]
[/code]</li>
</ul>
<strong>Habías dicho acciones, ¿no?</strong>

Las acciones nos permitirán evaluar un RDD y devolver un resultado. De esta forma se ejecuta todo el flujo de datos definido. ¿Algún ejemplo? Aquí van algunos:
<ul>
	<li><strong><em>count</em></strong>: nos devuelve el número total de elementos:
[code language="scala"]
sc.parallelize(List(1, 2, 3, 4)).count //4
[/code]</li>
	<li><em><strong>collect</strong></em>: nos vuelca toda la colección distribuida en un array en memoria:
[code language="scala"]
sc.parallelize(List(1, 2, 3, 4)).collect // Array(1, 2, 3, 4)
[/code]

Ojo, cuidao. Si el RDD es muy grande, podemos tener problemas al volcar toda la colección en memoria.</li>
	<li><em><strong>saveAsTextFile</strong></em>: nos vuelca la información en un fichero de texto:
[code language="scala"]
intValues.saveAsTextFile(&quot;results.txt&quot;)
[/code]</li>
</ul>

<hr />

&nbsp;

¿Y esto como lo puedo usar con Spark? Dentro de una semana lo veremos con un caso práctico que aunará Twitter con Spark Streaming para hacer analitycs de una forma fácil, sencilla y para toda la familia. De esta forma podremos sacarle todo el partido que queramos y sentirnos poderosos y geeks al mismo tiempo.

<img class="  wp-image-2030 aligncenter" src="https://scalerablog.files.wordpress.com/2016/03/aad69873-6bcc-4a0d-84eb-abe375f34c6c.gif" alt="aad69873-6bcc-4a0d-84eb-abe375f34c6c" width="390" height="195" />]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1968</wp:post_id>
  <wp:post_date>2016-03-30 15:13:44</wp:post_date>
  <wp:post_date_gmt>2016-03-30 13:13:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>spark-operaciones-basicas-con-rdds</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="rdd"><![CDATA[rdd]]></category>
  <category domain="post_tag" nicename="spark"><![CDATA[spark]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21277282178]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/715166721842094080";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Spark Streaming: streams con estado (¿Android vs IOS?)</title>
  <link>https://scalerablog.wordpress.com/2016/04/27/spark-streaming-streams-con-estado-android-vs-ios/</link>
  <pubDate>Wed, 27 Apr 2016 10:00:35 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=2300</guid>
  <description/>
  <content:encoded><![CDATA[Si os acordais del post en el que hablabamos sobre como <a href="https://scalerablog.wordpress.com/2016/04/06/spark-streaming-twitter-analytics-al-gusto/" target="_blank">conectar Spark Streaming con Twitter</a>, dijimos que el límite para hacer analíticas lo ponía vuestra imaginación. 

En este post vamos a proponer algún ejemplo que nos sirva a su vez para ilustrar la idea de mantener un estado en base a la alimentación del stream que definimos. En cristiano, vamos a ver cómo de popular es un topic de twitter frente a otro: Android vs IOS.

<a href="https://scalerablog.files.wordpress.com/2016/04/appleandroid.jpg" rel="attachment wp-att-2642"><img src="https://scalerablog.files.wordpress.com/2016/04/appleandroid.jpg?w=700" alt="appleandroid" width="700" height="280" class="aligncenter size-large wp-image-2642" /></a>

<h2>Stateful</h2>

La idea básica es tener una entidad S cuyo estado se alimenta en base a los batches con elementos de tipo V que procesa el stream.

<a href="https://scalerablog.files.wordpress.com/2016/04/stateful-stream.png" rel="attachment wp-att-2634"><img src="https://scalerablog.files.wordpress.com/2016/04/stateful-stream.png?w=700" alt="stateful stream" width="700" height="370" class="aligncenter size-large wp-image-2634" /></a>

La manera en que dicho estado se actualiza para un instante discreto <strong>Tn</strong> es aplicando una función definida por el usuario que toma como argumentos el estado que había en el instante <strong>Tn-1</strong> y el conjunto de valores que trae el batch recibido por el stream en <strong>Tn</strong>:

<a href="https://scalerablog.files.wordpress.com/2016/04/updatestate-function-2.jpg" rel="attachment wp-att-2309"><img src="https://scalerablog.files.wordpress.com/2016/04/updatestate-function-2.jpg" alt="updateState function (2)" width="700" height="200" class="aligncenter size-full wp-image-2309" /></a>

Que en una notación más familiar para el scalero de a pie sería

[code language="scala"]
type StateUpdate[S] = 
  (Option[S],Seq[V]) =&gt; Option[S]
[/code]

¿Por qué <code>Option[S]</code>? Por una razón principal: inicialmente, cuando arrancamos el stream, no disponemos de ningún estado <code>S</code>, de manera que la función no podía ser <code>(S,Seq[V]) =&gt; S</code>.

<h2>¿Y todo esto en la práctica?</h2>

La API de Spark para funciones de DStreams sobre pares (<code>PairDStreamFunctions</code>) provee el siguiente método para ello:

[code language="scala"]
def updateStateByKey[S]
  (updateFunc: (Seq[V], Option[S]) ⇒ Option[S])
  (implicit arg0: ClassTag[S]): DStream[(K, S)]
[/code]

De manera que para un <code>DStream</code> en el que podamos discriminar los elementos por una función que nos provea una clave (veremos un ejemplo más adelante), podremos aplicar este método, obteniendo un estado <code>S</code> (en la mayoría de los casos se podrá corresponder con una agregación) por cada clave.

El método se encuentra sobrecargado, de manera que se puede especificar un particionador disinto del <code>HashPartitioner</code>, indicar un número de particiones particular o bien pasar un estado inicial <code>RDD[(K,S)]</code> (recordad que, de otra manera, inicialmente nuestro estado para todas las claves <code>K</code> tiene que ser <code>None</code>). 

<h2> El ejemplo </h2>

Supongamos que tenemos intención de medir la rivalidad entre Android e IOS y queremos saber de quién se está hablando más en Twitter (en este ejemplo no distinguiremos entre si las menciones son positivas o negativas).

Utilizando el mismo proyecto que propusimos para el <a href="https://scalerablog.wordpress.com/2016/04/06/spark-streaming-twitter-analytics-al-gusto/" target="_blank">anterior ejemplo de Spark + Twitter</a>, modificaremos el fichero <code>Boot.scala</code> para que tenga el <a href="https://gist.github.com/JSantosP/38883bf8efbb15b6f4b1eec972c64b1d" target="_blank">contenido del siguiente gist</a>.

En primer lugar, tenemos que habilitar el directorio de checkpointing y los filtros de los tweets que nos interesan:

[code language="scala"]
  //  Set checkpoint dir

  ssc.checkpoint(&quot;/tmp&quot;)

  //  Add filters ...

  val Android = &quot;android&quot;
  val IOS = &quot;ios&quot;

  filter(
    Android,
    IOS
  )
[/code]

A continuación agruparemos nuestros tweets en base a si estos contienen el filtro Android o IOS (en caso de que el tweet contenga ambos, se contabilizará en ambas claves). El resultado obtenido es otro <code>DStream</code> pero que contiene pares de clave-valor (filtro-tweet):

[code language="scala"]
val groupedTweets = stream.flatMap{content =&gt;
  List(Android, IOS).flatMap(key =&gt;
    if (content.getText.contains(key)) 
      Option(key -&gt; content)
    else None)
  }
[/code]

Una vez agrupados los tweets, creamos un nuevo DStream a partir de este, usando la función que definimos al principio del post <code>updateStateByKey</code>, de manera que el estado <code>S</code> del que hablábamos sería la suma de tweets para cada palabra clave: 

[code language="scala"]
val aggregatedTweets: DStream[(String,Long)] =
  groupedTweets.updateStateByKey{
    (newTweets, previousState) =&gt;
      val newTweetsAmount = newTweets.size.toLong
      previousState.fold(
        Some(newTweetsAmount))(previousSize =&gt;
        Some(previousSize + newTweetsAmount))
  }
[/code]

La única parte 'complicada' de entender del fragmento de código podría ser el <code>fold</code>, pero es sencillo ya que en realidad indica que, en caso de tener una cantidad anterior (estado previo) sumamos la nueva cantidad a la anterior. En caso contrario, dejamos la nueva.

Aparte de esto, terminamos de hacer funcionar el snippet imprimiendo estas cantidades por pantalla y comenzando la escucha del stream:

[code language="scala"]
//  And add actions to perform (like printing the aggregatedTweets) ...

aggregatedTweets.foreachRDD{ results =&gt;
  results.foreach{
    case (team, amount) =&gt; 
      logger.info(s&quot;&gt;&gt;&gt; $team : $amount&quot;)
  }
}

// ... and begin listening

listen()
[/code]

¿Se te ocurre otra forma de hacer el stream más interesante? ¿jugar con la geolocalización de los tweets en un mapa de calor, por ejemplo? ;-)

¡Agur de limón!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2300</wp:post_id>
  <wp:post_date>2016-04-27 12:00:35</wp:post_date>
  <wp:post_date_gmt>2016-04-27 10:00:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>spark-streaming-streams-con-estado-android-vs-ios</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="spark"><![CDATA[spark]]></category>
  <category domain="post_tag" nicename="state"><![CDATA[state]]></category>
  <category domain="post_tag" nicename="stateful"><![CDATA[stateful]]></category>
  <category domain="post_tag" nicename="stream"><![CDATA[stream]]></category>
  <category domain="post_tag" nicename="streaming"><![CDATA[streaming]]></category>
  <category domain="post_tag" nicename="update"><![CDATA[update]]></category>
  <category domain="post_tag" nicename="updatebykey"><![CDATA[updateByKey]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/725263442425188352";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22216179021]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>101</wp:comment_id>
    <wp:comment_author><![CDATA[Jose Carlos García Serrano]]></wp:comment_author>
    <wp:comment_author_email>gserranojc@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>83.61.78.245</wp:comment_author_IP>
    <wp:comment_date>2016-04-29 00:16:03</wp:comment_date>
    <wp:comment_date_gmt>2016-04-28 22:16:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Os lo voy a hacer con MapWithState para trolear un poco!!!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1461906374</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1461906374.35680294036865234375;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value>1</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1461881764.1409409046173095703125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1461906374</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1461886496.5442640781402587890625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-04-28 22:16:03</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Spark: RDD basic operations</title>
  <link>https://scalerablog.wordpress.com/2016/04/04/spark-rdd-basic-operations/</link>
  <pubDate>Mon, 04 Apr 2016 10:00:11 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=2302</guid>
  <description/>
  <content:encoded><![CDATA[<p style="text-align:justify;">After more than a year publishing Scalera posts, I think the time for scratching one of the most important tools in Scala ecosystem has arrived. Of course, I'm talking about <em><strong>Spark</strong></em>.</p>
<p style="text-align:justify;">Spark is a framework that allows parallelizing collections and their process. This process might be batch map-reduce tasks over different data sources (HDFS, Cassandra, ElasticSearch, ...), streaming process of certain data flows (Kafka, Flume, ...); or perform different data sources queries in some unified way with a query language like SQL. But that's too much rock&amp;roll. We'll cover today the basic data type that is used in Spark: RDD.</p>
<p style="text-align:justify;"><strong>What's an RDD?</strong></p>
<p style="text-align:justify;">The <em><strong>RDD</strong></em> type (Resilient Distributed Dataset) looks like many other Scala collections. However, it's important to get to know some of its main features:</p>

<ul>
	<li style="text-align:justify;">It's a distributed collection. This means that it's partitioned among the different Spark nodes (known as workers).</li>
	<li style="text-align:justify;">They're immutable: when you apply a transformation over an RDD, we're actually creating a new one.</li>
	<li style="text-align:justify;">It's lazily evaluated. With RDD's, we're just defining the information flow, but it won't be evaluated at its definition moment, but at the moment when you apply an action over the RDD.<img class="  wp-image-2003 aligncenter" src="https://scalerablog.files.wordpress.com/2016/03/funny-meme-super-lazy1.jpg" alt="funny-meme-super-lazy1" width="289" height="248" /></li>
</ul>
Besides, it's good to know that you can perform two different type of operations on an RDD: transformations and actions.

<strong>Great, but how do I create them?</strong>

There are several ways to do so:
<ul>
	<li><em><strong>Parallelizing</strong></em> an in-memory collection, like a list of values. For doing so, we'll use the <em>parallelize</em> method of the <em>SparkContext</em>.
[code language="scala"]
val newRDD: RDD[Int] = 
  sc.parallelize(List(1, 2, 3, 4))
[/code]</li>
	<li>From some <em><strong>data source</strong></em> using, for example, the <em>textFile</em> function of the <em>SparkContext</em>.
[code language="scala"]
val newRDD: RDD[Int] = 
  sc.textFile(&quot;myValues.txt&quot;)
[/code]</li>
	<li><em><strong>Transforming</strong> <strong>an RDD</strong></em> by applying a transformation in order to create a new RDD from another one.
[code language="scala"]
val newRDD: RDD[String] = 
  intValues.map(_.toString)
[/code]</li>
</ul>
<strong>What about that transformations stuff ...?</strong>

Transformations define how the information flow will change by generating a new RDD. Some of these transformations are:
<ul>
	<li><em><strong>map</strong></em>: applies a function for transforming each collection element:
[code language="scala"]
intValues.map(_.toString) // RDD[String]
[/code]</li>
	<li><em><strong>filter</strong></em>: select the subset of elements that match certaing boolean expression:
[code language="scala"]
intValues.filter(_.isOdd)// RDD[Int]
[/code]</li>
	<li><em><strong>flatMap</strong></em>: apart from applying the map function, it flattens the returning collection:

[code language="scala"]
textFile.map(_.split(&quot; &quot;)) //RDD[Array[String]] but ...
textFile.flatMap(_.split(&quot; &quot;)) //RDD[String]
[/code]</li>
</ul>
<strong>You spoke about actions, didn't you?</strong>

Actions will allow us to evaluate the RDD and return some result. This way, the whole defined data flow that represents the RDD is evaluated. Any example? Some of them:
<ul>
	<li><strong><em>count</em></strong>: it returns the total amount of elements:
[code language="scala"]
sc.parallelize(List(1, 2, 3, 4)).count //4
[/code]</li>
	<li><em><strong>collect</strong></em>: it returns the WHOLE collection inside an in-memory array:
[code language="scala"]
sc.parallelize(List(1, 2, 3, 4)).collect // Array(1, 2, 3, 4)
[/code]

So, beware! If the RDD size doesn't fit into the driver's assigned memory, the program will crash.</li>
	<li><em><strong>saveAsTextFile</strong></em>: it pipes the collection to some text file:
[code language="scala"]
intValues.saveAsTextFile(&quot;results.txt&quot;)
[/code]</li>
</ul>

<hr />

&nbsp;

So how can I apply all of these with Spark? We'll find out the way in a week, with a practical case that will join both Twitter and Spark Streaming functionalities for performing some basic analytics in an easy, simple, g-rated way. So we'll be able to make profit of it and feel both powerful and geek at the same time.

<img class="  wp-image-2030 aligncenter" src="https://scalerablog.files.wordpress.com/2016/03/aad69873-6bcc-4a0d-84eb-abe375f34c6c.gif" alt="aad69873-6bcc-4a0d-84eb-abe375f34c6c" width="390" height="195" />]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2302</wp:post_id>
  <wp:post_date>2016-04-04 12:00:11</wp:post_date>
  <wp:post_date_gmt>2016-04-04 10:00:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>spark-rdd-basic-operations</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="action"><![CDATA[action]]></category>
  <category domain="post_tag" nicename="bigdata"><![CDATA[BigData]]></category>
  <category domain="post_tag" nicename="collect"><![CDATA[collect]]></category>
  <category domain="post_tag" nicename="count"><![CDATA[count]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="filter"><![CDATA[filter]]></category>
  <category domain="post_tag" nicename="map"><![CDATA[map]]></category>
  <category domain="post_tag" nicename="rdd"><![CDATA[rdd]]></category>
  <category domain="post_tag" nicename="spark"><![CDATA[spark]]></category>
  <category domain="post_tag" nicename="transformation"><![CDATA[transformation]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21436035704]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/716928365819617282";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Scala: Un lenguaje para gobernarlos a todos (I)</title>
  <link>https://scalerablog.wordpress.com/2016/04/13/scala-un-lenguaje-para-gobernarlos-a-todos-i/</link>
  <pubDate>Wed, 13 Apr 2016 10:00:22 +0000</pubDate>
  <dc:creator>pfcoperez</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=2312</guid>
  <description/>
  <content:encoded><![CDATA[<em>Al principio, no teníamos lenguajes de programación, sólo código máquina. Entonces, la <a href="https://en.wikipedia.org/wiki/Automatic_programming">programación automática</a> vino para salvarnos a todos. Proporcionando anillos de poder para controlar a las máquinas: Estos fueron llamados "Lenguajes de programación". Se diversificaron, sirvieron de inspiración para otros nuevos y acabaron constituyendo un rico ecosistema. De entre ellos surgió un nuevo y útil género de lenguajes para ordenadores: Los DSLs.</em>
<h1>DSLs</h1>
Los lenguajes de propósito específico, <strong><em>D</em></strong><em>omain <strong>S</strong>pecific (computer) <strong>L</strong>anguages</em>, existen desde hace bastante tiempo. La definición académica para este sub-grupo establece que han de estar enfocados en el marco de un dominio concreto de aplicación. Los <strong>DSLs</strong> son pequeños y concisos, esto implica que son de gran ayuda ya que guían a sus usuarios a través del proceso de describir acciones, entidades y relaciones dentro de su dominio de aplicación. Aún más importante es el hecho de que están hechos y diseñados para servir a un único propósito.
<blockquote><em>Si soy un matemático y estoy haciendo un estudio estadístico con mi ordenador ¿Por qué debería preocuparme acerca de la gestión de memoria?</em></blockquote>
No es de sorprender que haya surgido un gran reino de mini-lenguajes que han tomado el poder sobre actividades teles como el aprendizaje automático, la programación científica, el diseño y gestión de hardware, modelado de datos, ...
<h1>¡Y a mi qué! ¿No era esto un blog sobre Scala?</h1>
¡Cierto! todo esto puede sonar a antiguas batallitas. Sin embargo, en una actualidad en la que todos parecemos estar obsesionados por la adquisición, almacenamiento y análisis de grandes volúmenes de datos que son, a su vez, de naturaleza muy variable (o lo que es lo mismo, mezclando peras con manzanas); Estamos obligados a enfrentarnos a docenas de formas de tratar estos datos y muchas de estas formas no son más que casos concretos de DSLs: SQL, HiveQL, CQL, bash, grep, awk, R... !Por favor! !Cuando va a acabar esta lista! Probablemente: Nunca. Y eso que estamos obviando lo que está por venir.

Que maravilla si hubiese una herramienta que nos ayudase, pobres humanos, a construir DSLs, un meta-DSL que, de alguna manera, nos guiase a la hora de desarrollar nuevos DSLs. Esta herramienta existe, y se llama <strong>Scala</strong>.

Cuando los creadores de este gran (no sólo por sus bondades sino por su extensión) lenguaje de programación le pusieron nombre, no sólo lo hicieron pensando en su capacidad para la re-utilización de código y potencial uso en entornos concurrentes con facilidad para escalar horizontalmente, sino que también tenían en mente su potencial para ser fácilmente expandido. Quizás sea esa la razón de su basta extensión en sintaxis y herramientas. Algunas de las características de Scala en la dirección de la expansibilidad son:
<ul>
	<li><strong>Notación infija: </strong>Cualquier llamada a un método que recibe un objeto como parámetro puede ser escrita de forma infija. Esto es,
<em>objA.metodo(objB) </em>puede escribirse como <em>objA metodo objB.
</em></li>
	<li><strong>No existencia de operadores:</strong> A diferencia de otros lenguajes, carece de operadores como elementos con entidad propia. Todo son métodos cuyas reglas de precedencia y asociatividad están determinadas por el último carácter del nombre del método.Así, cualquier método cuyo nombre no acabe en el caracter `:` asocia de izquierda a derecha: <em>obj1 + obj2 </em>es lo mismo que <em>obj1.+(obj2) </em>en tanto que <em>obj1 +: obj2 </em>es lo mismo que <em>obj2.+:(obj1).
</em>Algo parecido ocurre con la precedencia ya que existe un orden de importancia de caracteres finales, un ejemplo es la mayor importancia de `<em>*` </em>frente a `<em>+` </em>:<em>
obj1 + obj2 * obj3  </em>es siempre igual a <em>obj1 + (<em>obj2 * obj3</em>).</em>Esta es la lista de importancia (de menor a mayor prioridad):
<ul>
	<li>Todas las letras del alfabeto, en mayúsculas o minúsculas.</li>
	<li>|</li>
	<li>^</li>
	<li>&amp;</li>
	<li>Los símbolos = y !</li>
	<li>Los símbolos &lt; y &gt;</li>
	<li>:</li>
	<li>Las operaciones aritméticas + y -</li>
	<li>Las operaciones aritméticas *, / y %</li>
	<li>Cualquier otro caracter especial.</li>
</ul>
</li>
	<li><strong>Características avanzadas de programación orientada a objetos: </strong><em>object, trait, ...</em></li>
</ul>
&nbsp;

Estas tres características se combinan para proporcionar un entorno completo para el desarrollo de <a href="http://martinfowler.com/bliki/InternalDslStyle.html">DSLs internos</a> en el seno de Scala.
<h1>Primeros pasos</h1>
La notación infija sienta las base sobre la que construir nuestros lenguajes embebidos en Scala.

Partiendo, por ejemplo, del siguiente trait:

[code language="scala"]
trait MovingRobot {
  def moveForward(): MovingRobot = {
    println(&quot;Robot moved one position forward&quot;)
    this
  }
  def moveBackward(): MovingRobot = {
    println(&quot;Robot moved one position backward&quot;)
    this
  }
}
[/code]

Que puede mezclarse en la declaración de un objeto:

[code language="scala"]
object robot extends MovingRobot
[/code]

Podemos modelar los movimientos del un robot virtual llamando a los métodos de <em>MovigRobot </em>de una forma tradicional:

[code language="scala"]
robot.moveForward.moveBackward
[/code]
Pero el uso de la notación infija proporciona da lugar a un código mucho más cercano al lenguaje natural:

[code language="scala"]
robot moveForward() moveBackward
robot moveForward
robot moveBackward
[/code]
Este es el tipo más simple de los DSLs embebidos en Scala y sirve como punta de partida para enfoques más avanzados.
<h2>Transiciones de estado</h2>
Sí, simple y también imperativo además de ser de poca utilidad. Los comandos no están cambiando el estado del sistema más allá del efecto lateral que implica la impresión de caracteres por la salida estándar realizada por medio de <em>println:</em>

<img class=" size-full wp-image-2227 aligncenter" src="https://scalerablog.files.wordpress.com/2016/03/simpliest_automaton.png" alt="simpliest_automaton" width="336" height="260" />

Con DSLs de este nivel, existen dos opciones para modelar los efectos de las instrucciones del DSL:
<ul>
	<li><strong>El enfoque mutable:</strong> Es el más sencillo para aquellos llegados a Scala desde lenguajes imperativos pero, definitivamente, es mucho más arriesgado en lo que a la introducción de bugs respecta. La idea es muy similar a a que hay detrás de tantos builders o acumuladores de Java, por ejemplo, <em><a href="https://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html">StringBuilder</a></em>:El estado del acumulador es la cadena que se está componiendo. Métodos, como <em><strong><a href="https://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html#append(double)">append</a></strong>(double d), </em>devuelven una referencia a la instancia del acumulador cuyo estado se está modificando como consecuencia de la llamada. De esta manera, la misma referencia se devuelve llamada tras llamada ya que es la misma instancia de <em>StringBuilder </em>la que muta. ¿Suena familiar?

<img class=" size-full wp-image-2228 aligncenter" src="https://scalerablog.files.wordpress.com/2016/03/mutable_state.png" alt="mutable_state" width="278" height="160" /></li>
	<li><strong>El enfoque inmutable (o el camino a la sabiduría):</strong>  ¡No se debe cambiar nada! Hay que devolver un nuevo estado con los atributos derivados del estado anterior y la acción realizada. De ahora en adelante, sólo se tratará esta técnica.</li>
</ul>
La belleza de la segunda solución radica en que cada acción devuelve un único estado que mantiene una relación 1 a 1 con los estados reales del sistema modelado. Esto significa que las entidades del código que implementa al DSL son un reflejo exacto de los cambios y estados que se desean representar. Además, el estado es inmutable por definición.

<header class="f"></header>
<blockquote><header class="f"><a href="http://dle.rae.es/?id=GjqhajH">estado</a>
Del lat. status.Escr. con may. inicial en aceps. 6 y 7.
1. m. Situación en que se encuentra alguien o algo, y en especial cada uno de sus sucesivos modos de ser o estar.

(www.rae.es)

</header></blockquote>
Explicar el por qué del hecho de que la programación basada en la inmutabilidad es más segura (en lo que la introducción de bugs respecta) que la basada en la mutabilidad de objetos está fuera del alcance de este artículo, cientos de explicaciones están al alcance de buscador. Algunas razones están muy bien resumidas en <a href="http://www.ibm.com/developerworks/java/library/j-jtp02183/index.html">este</a> artículo de IBM.

Incluso, los creadores de Java, decidieron que la inmutabilidad era mejor, al menos para sus cadenas de texto.

<img class="alignnone size-full wp-image-2229" src="https://scalerablog.files.wordpress.com/2016/03/state_transition.png" alt="state_transition" width="588" height="246" />

Devolviendo en cada transición un, totalmente nuevo, estado se reduce la lista de responsabilidades del código que implementa dicha transición a sólo una: Generar un nuevo estado. Esto genera diseños mucho más sencillos para el conjunto del DSL. No pueden darse cambios inesperados fuera de llamadas explícitas a los métodos de transición.
<h2>Al grano de las  transiciones inmutables</h2>
Siguiendo el extremadamente complejo ejemplo de nuestra API para robots unidimensionales (llegados a este punto, un ávido lector de Scalera probablemente se de cuenta de que el <a href="https://scalerablog.wordpress.com/2016/01/20/scalera-challenge-de-la-tierra-a-la-luna/">anterior reto Scalera</a> incluía un bonito DSL). Este API puede cambiarse para seguir el enfoque funcional arriba descrito:

[code language="scala"]
// All states extend `RobotState`
trait RobotState {
  def position: Int
}

// Transitions which can be mixed with any state for which they
// make sense.

trait MovementTransitions {
  self: RobotState =&gt;

  def moveForward(nSteps: Int = 1): RobotState with MovementTransitions

  def moveBackward(nSteps: Int = 1): RobotState with MovementTransitions

}

// States
// In this example, states only differ in the robot position so they all
// are represented by the same case class.
case class Robot(position: Int) extends RobotState with MovementTransitions {

  def moveForward(nSteps: Int = 1) =
    Robot(position + nSteps)

  def moveBackward(nSteps: Int = 1) =
    Robot(position - nSteps)

}

// Initial state
val robot = new Robot(0)
[/code]

A continuación, un sencillo ejemplo de uso:

[code language="scala"]
robot moveForward(10) moveBackward() position
[/code]

Esto es una simplificación extrema que muestra las técnicas básicas detrás de los DSLs embebidos en Scala que puede resumirse en:
<ul>
	<li>El uso de la notación infija.</li>
	<li>De familias de estados y transiciones entre estos.</li>
	<li>Limitación de las transiciones de forma que sólo pueden producirse desde un estado y resultar en otro completamente nuevo que, podría compartir, la mayoría de los atributos con su predecesor.</li>
</ul>
<h1>Un poco de teoría: Máquinas de estado ¿En serio?</h1>
¿El realmente necesario un modelo de diseño y programación basado en máquinas de estado?  La respuesta es sí, siempre que no quieras acabar dándote un tiro en tu propio pie.

<img class="  wp-image-2230 alignleft" src="https://scalerablog.files.wordpress.com/2016/03/shootfoot.gif" alt="shootfoot" width="263" height="255" />Las máquinas de estados inmutables son sencillas de mantener, entender y expandir.

Por otro lado, hay que tener en cuenta que los DSLs no son otra cosa que lenguajes formales con gramáticas que tienen su lugar en la <a href="https://es.wikipedia.org/wiki/Jerarqu%C3%ADa_de_Chomsky">clasificación de Chomsky</a>: Habitualmente Gramáticas regulares y gramáticas independientes de contexto.
<ul>
	<li>¿Qué tipo de máquina es capaz de procesar/reconocer lenguajes basados en gramáticas regulares? Los <a href="https://es.wikipedia.org/wiki/Aut%C3%B3mata_finito">autómatas finitos</a>.</li>
	<li>En el caso de las gramáticas independientes de contexto, son los <a href="https://es.wikipedia.org/wiki/Aut%C3%B3mata_con_pila">autómatas de pila</a> los que pueden reconocer/procesar sus lenguajes. Estos (<span style="color:#ff0000;">¡Ojo! Simplificación</span>) no son más que autómatas finitos que pueden hacer uso de una pila auxiliar dónde colocar y de dónde leer símbolos que pueden determinar el resultado de una transición, junto con el estado anterior y la entrada.</li>
</ul>
El modelo de transiciones expuesto en las secciones anteriores parece encajar a la perfección con las máquinas teóricas de estado. Surge una pregunta que es, as su vez, su propia respuesta: ¿Debería un desarrollador invertir su tiempo en buscar nuevas soluciones, poco probadas y que pueden ser inestables o estar cargadas de bugs cuando tiene un modelo tan firme a su alcance?
<blockquote>- Bien, les sugiero caballeros que inventen una forma de encajar una clavija cuadrada en un agujero redondo.

<a href="https://scalerablog.files.wordpress.com/2016/03/gene_krantz.png" rel="attachment wp-att-2292"><img class="aligncenter size-full wp-image-2292" src="https://scalerablog.files.wordpress.com/2016/03/gene_krantz.png" alt="gene_krantz" width="700" height="376" /></a>

- Pero, señor, ¡Si nos sobran clavijas redondas!

<a href="https://scalerablog.files.wordpress.com/2016/03/engineer.png" rel="attachment wp-att-2293"><img class="aligncenter size-full wp-image-2293" src="https://scalerablog.files.wordpress.com/2016/03/engineer.png" alt="engineer" width="700" height="316" /></a></blockquote>
<h1>En el siguiente episodio...</h1>
Desarrollo práctico de un DSL útil, paso a paso. Sin historias de guerra, teoría y sin ninguna de esas cosas "tan aburridas". Sólo...

<img class=" size-full wp-image-2294 aligncenter" src="https://scalerablog.files.wordpress.com/2016/03/letsdoit.jpg" alt="letsdoit" width="400" height="400" />]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2312</wp:post_id>
  <wp:post_date>2016-04-13 12:00:22</wp:post_date>
  <wp:post_date_gmt>2016-04-13 10:00:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scala-un-lenguaje-para-gobernarlos-a-todos-i</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="dsl"><![CDATA[dsl]]></category>
  <category domain="post_tag" nicename="immutable"><![CDATA[immutable]]></category>
  <category domain="post_tag" nicename="mutable"><![CDATA[mutable]]></category>
  <category domain="post_tag" nicename="robot"><![CDATA[robot]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="state"><![CDATA[state]]></category>
  <category domain="post_tag" nicename="step"><![CDATA[step]]></category>
  <category domain="post_tag" nicename="transition"><![CDATA[transition]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21740550741]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/720192212210823168";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>111</wp:comment_id>
    <wp:comment_author><![CDATA[Scala: Un lenguaje para gobernarlos a todos (II) | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2016/05/25/scala-un-lenguaje-para-gobernarlos-a-todos-ii/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.100.153</wp:comment_author_IP>
    <wp:comment_date>2016-05-25 12:01:22</wp:comment_date>
    <wp:comment_date_gmt>2016-05-25 10:01:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Ha de ser tanto teórico como práctico pero, sobre todo, práctico.  En esta serie de posts ya se ha tratado algo de teoría y ahora toca la parte divertida del aprendizaje ¡Es hora de construir un DSL desde [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1464248407</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1464175222.619925022125244140625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1464170483.065496921539306640625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1464248407.7609760761260986328125;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-05-25 10:01:22</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Scalera tip: ¿Por qué 'scala.util.Try' no tiene 'finally'?</title>
  <link>https://scalerablog.wordpress.com/2016/05/11/scalera-tip-por-que-scala-util-try-no-tiene-finally/</link>
  <pubDate>Wed, 11 May 2016 10:00:34 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=2649</guid>
  <description/>
  <content:encoded><![CDATA[Hace algunos días, un compañero del trabajo planteó la duda del millón.

Si usamos el <code>try</code> tradicional de Java, podríamos encontrarnos con código similar a:

[code language="scala"]
val connection = database.getConnection()
var data: Seq[Data] = Seq()
try {
  val results = connection.query(&quot;select whatever&quot;)
  data = results.map(convertToWhatIneed)
} catch {
  case t: Throwable =&gt; logger.error(&quot;Oh noes!&quot;)
} finally {
  connection.close()
}
[/code]

En Scala, disponemos de una versión más funcional de este mecanismo: <code>scala.util.Try</code>.
El mismo ejemplo, utilizando esté tipo de datos, sería algo como

[code language="scala"]
val connection = database.getConnection()
val data: Seq[Data] = Try{
  val results = connection.query(&quot;select whatever&quot;)
  val data: Seq[Data] = 
    results.map(convertToWhatIneed)
  connection.close()
  data
} recover {
  case t: Throwable =&gt; 
    logger.error(&quot;Oh noes!&quot;)
    connection.close()
    Seq.empty[Data]
} get
[/code]

La pregunta es, ¿por qué <code>scala.util.Try</code> no considera una claúsula <code>finally</code> como el <code>try</code> de java?

<h2>Side effects....side effects everywhere...</h2>

Si recordáis el post en el que David habló sobre <a href="https://scalerablog.wordpress.com/2015/06/24/capturando-excepciones-en-scala-el-tipo-try/" target="_blank">el tipo Try[T]</a>, es un tipo que puede tener dos posibles estados: <code>Success(t: T)</code> o <code>Failure(t: Throwable)</code>. 

Por otra parte, si hacéis memoria sobre el post en el que hablábamos sobre <a href="https://scalerablog.wordpress.com/2016/03/09/scalera-tips-var-inmutable-vs-val-mutable/" target="_blank">los valores y las variables</a>, mencionábamos la <strong>transparencia referencial</strong> como principio que debe cumplirse para considerar una función pura.

Por lo tanto, si ponemos a prueba este principio con el snippet arriba descrito, podríamos sustituir la expresión de tipo <code>Try[Seq[Data]]</code> por el valor del mismo tipo que hubiéramos obtenido al evaluar la expresión, y deberíamos tener el mismo resultado. Por ejemplo:

[code language="scala"]
val connection = database.getConnection()
val data: Seq[Data] = 
  Success(Seq(data1,data2,data3)).get
[/code]

Sin embargo, vemos que no ha cerrado la conexión que hemos abierto justo antes...

<a href="https://scalerablog.files.wordpress.com/2016/04/o6dau.jpg" rel="attachment wp-att-2655"><img src="https://scalerablog.files.wordpress.com/2016/04/o6dau.jpg?w=300" alt="o6dau" width="300" height="235" class="aligncenter size-medium wp-image-2655" /></a>

Por ese motivo, tiene más lógica hacer algo así como:

[code language="scala"]
val connection = database.getConnection()
val data: Seq[Data] = Try{
  val results = connection.query(&quot;select whatever&quot;)
  results.map(convertToWhatIneed)
} recover {
  case t: Throwable =&gt; 
    Seq.empty[Data]
} get
connection.close()
[/code]

De esta forma, el valor de <code>data</code> puede ser sustituido fácilmente, sin implicar más efectos de lado.


...¡y por esto, amigos, no tiene sentido pensar en un <code>finally</code> para <code>Try[T]</code>! :-)

Agur de limón]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2649</wp:post_id>
  <wp:post_date>2016-05-11 12:00:34</wp:post_date>
  <wp:post_date_gmt>2016-05-11 10:00:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scalera-tip-por-que-scala-util-try-no-tiene-finally</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="catch"><![CDATA[catch]]></category>
  <category domain="post_tag" nicename="finally"><![CDATA[finally]]></category>
  <category domain="post_tag" nicename="functional"><![CDATA[functional]]></category>
  <category domain="post_tag" nicename="recover"><![CDATA[recover]]></category>
  <category domain="post_tag" nicename="referential-transparency"><![CDATA[referential transparency]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="side-effect"><![CDATA[side effect]]></category>
  <category domain="post_tag" nicename="tip"><![CDATA[tip]]></category>
  <category domain="post_tag" nicename="try"><![CDATA[try]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22698193240]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/730337182808825856";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Spark Streaming: stateful streams (Android vs IOS?)</title>
  <link>https://scalerablog.wordpress.com/2016/05/02/spark-streaming-stateful-streams-android-vs-ios/</link>
  <pubDate>Mon, 02 May 2016 10:00:01 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=2661</guid>
  <description/>
  <content:encoded><![CDATA[If you remember the post where we talk about how to <a href="https://scalerablog.wordpress.com/2016/04/11/spark-streaming-twitter-analytics-to-ones-taste/" target="_blank">connect Spark Streaming and Twitter</a>, we said that the limit for performing analytics was up to your imagination. 

In this post we're going to propose some example that works for illustrating the idea of keeping a state based on the defined stream feed. Speaking plainly, we'll see how popular is some Twitter topic compared to another one: Android vs IOS.

<a href="https://scalerablog.files.wordpress.com/2016/04/appleandroid.jpg" rel="attachment wp-att-2642"><img src="https://scalerablog.files.wordpress.com/2016/04/appleandroid.jpg?w=700" alt="appleandroid" width="700" height="280" class="aligncenter size-large wp-image-2642" /></a>

<h2>Stateful</h2>

The main idea is to have some S entity which state is fed by V-typed elements that are received and processed for each batch in the stream.

<a href="https://scalerablog.files.wordpress.com/2016/04/stateful-stream.png" rel="attachment wp-att-2634"><img src="https://scalerablog.files.wordpress.com/2016/04/stateful-stream.png?w=700" alt="stateful stream" width="700" height="370" class="aligncenter size-large wp-image-2634" /></a>

The way that the state is updated for a concrete instant <strong>Tn</strong> is by applying a user defined function that takes as parameters both the state that was at <strong>Tn-1</strong> instant and the value set that provides the batch received at <strong>Tn</strong> instant:

<a href="https://scalerablog.files.wordpress.com/2016/04/updatestate-function-2.jpg" rel="attachment wp-att-2309"><img src="https://scalerablog.files.wordpress.com/2016/04/updatestate-function-2.jpg" alt="updateState function (2)" width="700" height="200" class="aligncenter size-full wp-image-2309" /></a>

A more casual notation for a common 'scalero' would be

[code language="scala"]
type StateUpdate[S] = 
  (Option[S],Seq[V]) =&gt; Option[S]
[/code]

Why <code>Option[S]</code>? For a good main reason: initially, when we first start listening on the stram, we don't have any <code>S</code> state, so a <code>(S,Seq[V]) =&gt; S</code> function wouldn't make sense.

<h2>And in practice?</h2>

Spark's API for pair DStreams (<code>PairDStreamFunctions</code>) provides the following method for doing so:

[code language="scala"]
def updateStateByKey[S]
  (updateFunc: (Seq[V], Option[S]) ⇒ Option[S])
  (implicit arg0: ClassTag[S]): DStream[(K, S)]
[/code]

So for a <code>DStream</code> which is able to classify the elements by using a function that provides a key (we'll see an example later on), we'll be able to apply this method and get an <code>S</code> state (most of the cases, this state will refer to some aggregation over the values) for each key.

The method is overloaded, so you can specify a different partition apart from <code>HashPartitioner</code>, indicate a custom partition number or set an initial state (<code>RDD[(K,S)]</code>. Remember that, otherwise, initially our state for all <code>K</code> keys will be <code>None</code>).

<h2> The example </h2>

Let's suppose we want to measure how strong is the rivalry between Android and IOS and we want to know which is the top trending topic at Twitter (in this example we won't distinguish between against and in favour mentions).

Using the same project we proposed for the <a href="https://scalerablog.wordpress.com/2016/04/11/spark-streaming-twitter-analytics-to-ones-taste/" target="_blank">previous Spark + Twitter example</a>, we'll change the <code>Boot.scala</code> file so it looks like more to <a href="https://gist.github.com/JSantosP/38883bf8efbb15b6f4b1eec972c64b1d" target="_blank">the following gist</a> contents.

At first place, we have to enable the checkpointing dir and tweet filters that we are interested in:

[code language="scala"]
  //  Set checkpoint dir

  ssc.checkpoint(&quot;/tmp&quot;)

  //  Add filters ...

  val Android = &quot;android&quot;
  val IOS = &quot;ios&quot;

  filter(
    Android,
    IOS
  )
[/code]

We'll next group our tweets based on whether these tweets contain the 'Android' or 'IOS' filter (if the tweet contains both, it will be counted in both sides). The result we get is another <code>DStream</code> but that contains key-value pairs (filter-tweet):

[code language="scala"]
val groupedTweets = stream.flatMap{content =&gt;
  List(Android, IOS).flatMap(key =&gt;
    if (content.getText.contains(key)) 
      Option(key -&gt; content)
    else None)
  }
[/code]

Once we have grouped the tweets, we create a new <code>DStream</code> from the previous one by using the function we defined at the beginning of this post <code>updateStateByKey</code>, so the <code>S</code> state that we were talking about would be the sum of tweets for each key word: 

[code language="scala"]
val aggregatedTweets: DStream[(String,Long)] =
  groupedTweets.updateStateByKey{
    (newTweets, previousState) =&gt;
      val newTweetsAmount = newTweets.size.toLong
      previousState.fold(
        Some(newTweetsAmount))(previousSize =&gt;
        Some(previousSize + newTweetsAmount))
  }
[/code]

The only 'tricky' part to understand could be the <code>fold</code> code part, but it's simple. It actually indicates that, in case of having a previous amount (previous state) we just add the new amount to it. Otherwise, we use the new amount.

Apart from this, we make our snippet work by printing these figures and we start listening at the stream:

[code language="scala"]
//  And add actions to perform (like printing the aggregatedTweets) ...

aggregatedTweets.foreachRDD{ results =&gt;
  results.foreach{
    case (team, amount) =&gt; 
      logger.info(s&quot;&gt;&gt;&gt; $team : $amount&quot;)
  }
}

// ... and begin listening

listen()
[/code]

Can you think about another way to make the stream more interesting? Playing with tweets geo-location on a heat map, for example? ;-)

Easy peasy!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2661</wp:post_id>
  <wp:post_date>2016-05-02 12:00:01</wp:post_date>
  <wp:post_date_gmt>2016-05-02 10:00:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>spark-streaming-stateful-streams-android-vs-ios</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="bigdata"><![CDATA[BigData]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="spark"><![CDATA[spark]]></category>
  <category domain="post_tag" nicename="state"><![CDATA[state]]></category>
  <category domain="post_tag" nicename="stateful"><![CDATA[stateful]]></category>
  <category domain="post_tag" nicename="stream"><![CDATA[stream]]></category>
  <category domain="post_tag" nicename="streaming"><![CDATA[streaming]]></category>
  <category domain="post_tag" nicename="update"><![CDATA[update]]></category>
  <category domain="post_tag" nicename="updatebykey"><![CDATA[updateByKey]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22390481483]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/727077840944930820";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Scalera tip: Why 'scala.util.Try' doesn't have 'finally' clause?</title>
  <link>https://scalerablog.wordpress.com/2016/05/16/scalera-tip-why-scala-util-try-doesnt-have-finally-clause/</link>
  <pubDate>Mon, 16 May 2016 10:00:27 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=2668</guid>
  <description/>
  <content:encoded><![CDATA[Some days ago, a work colleage raised the million-dollar question.

If we use the traditional java <code>try</code>, we could be handling some code similar to this:

[code language="scala"]
val connection = database.getConnection()
var data: Seq[Data] = Seq()
try {
  val results = connection.query(&quot;select whatever&quot;)
  data = results.map(convertToWhatIneed)
} catch {
  case t: Throwable =&gt; logger.error(&quot;Oh noes!&quot;)
} finally {
  connection.close()
}
[/code]

In Scala, we have a more functional version of this mechanism: <code>scala.util.Try</code>.
The same example could be implemented by using this data type:

[code language="scala"]
val connection = database.getConnection()
val data: Seq[Data] = Try{
  val results = connection.query(&quot;select whatever&quot;)
  val data: Seq[Data] = 
    results.map(convertToWhatIneed)
  connection.close()
  data
} recover {
  case t: Throwable =&gt; 
    logger.error(&quot;Oh noes!&quot;)
    connection.close()
    Seq.empty[Data]
} get
[/code]

The question is, why doesn't <code>scala.util.Try</code> even consider a <code>finally</code> clause like Java's <code>try</code>?

<h2>Side effects....side effects everywhere...</h2>

If you remember the post where David talked about <a href="https://scalerablog.wordpress.com/2015/06/29/catching-exceptions-in-scala-try-type/" target="_blank">Try[T] data type</a>, it's a type that may have two different possible values <code>Success(t: T)</code> or <code>Failure(t: Throwable)</code>. 

On the other hand, if you remembet another post where we talked about <a href="https://scalerablog.wordpress.com/2016/03/14/scalera-tips-var-immutable-vs-val-mutable/" target="_blank">vals and vars</a>, we mentioned the <strong>referential transparency</strong> as principle that must be followed for considering a function to be pure.

So, if we test this principle with the previously described snippet, we could replace the <code>Try[Seq[Data]]</code> expression with the same type value that we would have got by evaluating the expression; and we should retrieve the same result. I.e.:

[code language="scala"]
val connection = database.getConnection()
val data: Seq[Data] = 
  Success(Seq(data1,data2,data3)).get
[/code]

We can see it hasn't closed the connection that we opened before though...

<a href="https://scalerablog.files.wordpress.com/2016/04/o6dau.jpg" rel="attachment wp-att-2655"><img src="https://scalerablog.files.wordpress.com/2016/04/o6dau.jpg?w=300" alt="o6dau" width="300" height="235" class="aligncenter size-medium wp-image-2655" /></a>

For this reason, it makes more sense to code something like this:

[code language="scala"]
val connection = database.getConnection()
val data: Seq[Data] = Try{
  val results = connection.query(&quot;select whatever&quot;)
  results.map(convertToWhatIneed)
} recover {
  case t: Throwable =&gt; 
    Seq.empty[Data]
} get
connection.close()
[/code]

This way, the <code>data</code> value can be replaced easily, without any extra side effect implication.


...And for this reason, fellows, it doesn't make sense to think about a <code>finally</code> clause for <code>Try[T]</code>! :-)

Peace out!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2668</wp:post_id>
  <wp:post_date>2016-05-16 12:00:27</wp:post_date>
  <wp:post_date_gmt>2016-05-16 10:00:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scalera-tip-why-scala-util-try-doesnt-have-finally-clause</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="catch"><![CDATA[catch]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="finally"><![CDATA[finally]]></category>
  <category domain="post_tag" nicename="functional"><![CDATA[functional]]></category>
  <category domain="post_tag" nicename="recover"><![CDATA[recover]]></category>
  <category domain="post_tag" nicename="referential-transparency"><![CDATA[referential transparency]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="side-effect"><![CDATA[side effect]]></category>
  <category domain="post_tag" nicename="tip"><![CDATA[tip]]></category>
  <category domain="post_tag" nicename="try"><![CDATA[try]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22858920791]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/732149212054327302";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Shapeless: funciones polimórficas</title>
  <link>https://scalerablog.wordpress.com/2016/06/01/shapeless-funciones-polimorficas/</link>
  <pubDate>Wed, 01 Jun 2016 10:00:38 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=2672</guid>
  <description/>
  <content:encoded><![CDATA[Hace ya un tiempo, nuestro amigo <a href="https://twitter.com/javifdev" target="_blank">Javier Fuentes</a> nos ilustró con una <a href="https://scalerablog.wordpress.com/2015/11/18/shapeless-introduccion-y-hlists-parte-1/" target="_blank">introducción a Shapeless</a>.
Unos meseses después, en el <a href="http://www.meetup.com/Scala-Programming-Madrid/" target="_blank">meetup de Scala en Madrid</a>, dio una interesante charla sobre inducción estructural con Shapeless y HLists. No pudimos evitarlo y nos contagiaron el entusiasmo :-P

<h2>Lo que queremos hacer</h2>

Pongamos como caso de estudio lo que yo creo que a más de uno le ha debido pasar: querer mezclar en la misma for-comprehension distintos tipos. Algo del estilo:

[code language="scala"]
import scala.util.Try

for {
  v1 &lt;- List(1,2,3)
  v2 &lt;- Try(&quot;hi, person &quot;)
} yield s&quot;$v2 $v1&quot;
[/code]

con la consiguiente frustración que produce ver el siguiente error:

[code]
&lt;console&gt;:15: error: type mismatch;
 found   : scala.util.Try[String]
 required: scala.collection.GenTraversableOnce[?]
         v2 &lt;- Try(&quot;hi, person &quot;)
            ^
[/code]

Necesitamos por tanto, una manera de transformar estos tipos de datos (<code>Future</code>, <code>Try</code>) en 'cosas' iterables (algo <code>GenTraversable[T]</code> nos podría valer). En nuestro ejemplo no tendremos en cuenta la información sobre el error si, por ejemplo, un tipo <code>Try</code> o un <code>Future</code> ha fallado e impide seguir evaluando la for-comprehension. Para entender un poco mejor el problema planteado, vamos a ver algunas pinceladas de teoría.

<a href="https://scalerablog.files.wordpress.com/2016/05/53132063.jpg" rel="attachment wp-att-2750"><img src="https://scalerablog.files.wordpress.com/2016/05/53132063.jpg?w=224" alt="53132063" width="224" height="300" class="aligncenter size-medium wp-image-2750" /></a>

<h2>Monomorfismo vs polimorfismo</h2>

Se define un método como monomórfico cuando solo se puede aplicar al tipo que indican los argumentos en su signatura, mientas que los métodos polimórficos pueden aplicarse a argumentos de cualquier tipo (siempre que encajen en la signatura: en el caso de Scala, tipos parametrizados). En cristiano:

[code language="scala"]
def monomorphic(parameter: Int): String

def polymorphic[T](parameter: T): String
[/code]

<h3>Tipos de polimorfismo</h3>

Otra cuestión importante es que un método puede ser polimórfico debido a los parameter types o bien por sub-tipado, por ejemplo:

[code language="scala"]
def parametricallyPolymorphic[T](parameter: T): String

def subtypedPolymorphic(parameter: Animal): String

subtypedPolymorphic(new Cat)
[/code]

Si usamos parameter types, y no tenemos <strong>NADA</strong> de información sobre dichos tipos, nos encontramos ante un caso de polimorfismo paramétrico.

Si usamos parameter types pero tenemos algún view / context bound sobre dicho tipo ( <code>T &lt;: Whatever</code> o <code>T:TypeClass</code> ), entonces hablamos de polimorfismo ad-hoc.

<h3>Problema: Function values</h3>

Con los métodos no hay problema a la hora de usar genéricos pero, ¿qué ocurre con los valores que son funciones? En Scala, el polimorfismo paramétrico no puede expresarse en base a valores que son funciones:

[code language="scala"]
val monomorphic: Int =&gt; String = _.toString

val anotherMonomorphic: List[Int] =&gt; Set[Int] = 
  _.toSet

[/code]

Nótese que la definición de una función que pasa de List a Set es independiente del tipo de elemento que contiene la lista; pero la sintaxis de Scala no nos permite definir nada parecido. Podríamos intentarlo asignando a un <code>val</code> (eta expansion) :

[code language="scala"]
def polymorphic[T](l: List[T]): Set[T] = l.toSet

val sadlyMonomorphic = polymorphic _
[/code]

Pero el compilador, que es muy listo, inferirá que que el tipo de la lista es <code>Nothing</code>: un tipo peculiar, pero concreto al fin y al cabo.

<a href="https://scalerablog.files.wordpress.com/2016/05/64331666.jpg" rel="attachment wp-att-2751"><img src="https://scalerablog.files.wordpress.com/2016/05/64331666.jpg?w=300" alt="64331666" width="300" height="300" class="aligncenter size-medium wp-image-2751" /></a>

<h2>Polimorfismo paramétrico en Shapeless</h3>

¿Cómo soluciona este problema Shapeless? Si por ejemplo tuviéramos que definir una función de transformación de <code>Option</code> a <code>List</code> en Scala, tendríamos la limitación antes citada para usar function values y sólo podríamos hacerlo definiendo un método:

[code language="scala"]
def toList[T](o: Option[T]): List[T] =
  o.toList
[/code]

Sin embargo Shapeless, haciendo gala de toda su alquimia, nos aporta varias formas de tener function values polimórficas. Es lo que en teoría de categorías, cuando hacemos referencia a transformaciones de constructores de tipos, se denomina <a href="https://en.wikipedia.org/wiki/Natural_transformation#Definition" target="_blank">transformaciones naturales</a>. La primera de ellas tiene la siguiente notación:

[code language="scala"]
import shapeless.poly._

val polyFunction = new (Option ~&gt; List){
  def apply[T](f: Option[T]): List[T] = f.toList
}
[/code]

Fijaros que lo que hace es trasladar el polimorfismo paramétrico a la definición del objeto. Para usar posteriormente esta función basta con:

[code language="scala"]
val result: List[Int] = polyFunction(Option(2))
[/code]

La otra notación posible consiste en definir el comportamiento de la función en base a casos, es decir, si queremos que la función solo valga para Int, String y Boolean, añadiríamos un caso para cada uno de estos tipos. 

[code language="scala"]
import shapeless.Poly1

object polymorphic extends Poly1 {

  implicit optionIntCase = 
    at[Option[Int]](_.toList.map(_ + 1))

  implicit optionStringCase = 
    at[Option[String]](_.toList.map(_ + &quot; mutated&quot;))

  implicit optionBooleanCase = 
    at[Option[Boolean]](_.toList.map(!_))

}
[/code]

Como podéis ver, si queremos que nuestra función esté definida para el caso en que un argumento de entrada sea <code>Option[Int]</code>, definimos que a todos los elementos de la lista que se devuelve, por ejemplo, se les sume 1. 

Esta expresión devuelve un <code>this.Case[Option[Int]]</code>, donde <strong>this</strong> hace referencia a la función <code>polymorphic</code> que estamos definiendo:

[code language="scala"]
implicit optionIntCase = 
  at[Option[Int]](_.toList.map(_ + 1))
[/code]

¿Lo bueno de esto? Que en caso de usar la función sobre un tipo de entrada que no tiene un caso definido en la función, obtendremos un error <strong>en tiempo de compilación</strong> (Brutal, ¿no?):

<h2>El resultado</h2>

Aplicando esta última forma de expresar funciones polimórficas en base a casos, obtenemos el resultado deseado que se planteaba en la introducción: poder usar una for-comprehension sobre valores de distintos tipos: iterables, Try, Future...

Podéis ver en detalle la solución propuesta <a href="https://github.com/Scalera/shapeless-handson/blob/master/src/main/scala/scalera/Polymorphic.scala" target="_blank">en el siguiente fichero</a>. 

En nuestra función tenemos un caso para los <code>GenTraversable</code>, el tipo <code>Try</code> y el tipo <code>Future</code> (en este último caso necesitamos disponer del valor del futuro para poder iterar sobre él, de manera que nos hace falta un timeout):

[code language="scala"]
object values extends Poly1 {

  implicit def genTraversableCase[T,C[_]](implicit ev: C[T] =&gt; GenTraversable[T]) = 
    at[C[T]](_.toStream)

  implicit def tryCase[T,C[_]](implicit ev: C[T] =&gt; Try[T]) = 
    at[C[T]](_.toOption.toStream)

  implicit def futureCase[T,C[_]](implicit ev: C[T] =&gt; Future[T], atMost: Duration = Duration.Inf) =
    at[C[T]](f =&gt; Try(Await.result(f,atMost)).toOption.toStream)

}
[/code]

Ahora podremos utilizarlo en nuestro controvertido snippet de código:

[code language="scala"]
import scala.concurrent.ExecutionContext.Implicits.global

case class User(name: String, age: Int)

val result: Stream[_] = for {
  v1 &lt;- values(List(1,2,3))
  v2 &lt;- values(Set(&quot;hi&quot;,&quot;bye&quot;))
  v3 &lt;- values(Option(true))
  v4 &lt;- values(Try(2.0))
  v5 &lt;- values(Future(User(&quot;john&quot;,15)))
} yield (v1,v2,v3,v4,v5)
[/code]

<h2>¿Única solución?</h2> 

¡En absoluto!, siempre se puede implementar usando type classes tradicionales de la huerta de Scala, aunque implique definir un trait que represente el iterable del ADT. Puedes ver el ejemplo en el <a href="https://gist.github.com/JSantosP/4888479a06b6c7064199f41f85b0b867" target="_blank">contenido del siguiente gist</a>.

¡Agur de limón!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2672</wp:post_id>
  <wp:post_date>2016-06-01 12:00:38</wp:post_date>
  <wp:post_date_gmt>2016-06-01 10:00:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>shapeless-funciones-polimorficas</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="ad-hoc"><![CDATA[ad-hoc]]></category>
  <category domain="post_tag" nicename="at"><![CDATA[at]]></category>
  <category domain="post_tag" nicename="case"><![CDATA[case]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="defined"><![CDATA[defined]]></category>
  <category domain="post_tag" nicename="function"><![CDATA[function]]></category>
  <category domain="post_tag" nicename="future"><![CDATA[future]]></category>
  <category domain="post_tag" nicename="gentraversable"><![CDATA[gentraversable]]></category>
  <category domain="post_tag" nicename="iterable"><![CDATA[iterable]]></category>
  <category domain="post_tag" nicename="iterator"><![CDATA[iterator]]></category>
  <category domain="post_tag" nicename="parametric"><![CDATA[parametric]]></category>
  <category domain="post_tag" nicename="polymorphic"><![CDATA[polymorphic]]></category>
  <category domain="post_tag" nicename="shapeless"><![CDATA[shapeless]]></category>
  <category domain="post_tag" nicename="stream"><![CDATA[stream]]></category>
  <category domain="post_tag" nicename="subtype"><![CDATA[subtype]]></category>
  <category domain="post_tag" nicename="try"><![CDATA[try]]></category>
  <category domain="post_tag" nicename="values"><![CDATA[values]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c6816fe84e2bcd99e4a47d0e7807fa21</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>draftfeedback_requests</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:13:"57220d279e90f";a:3:{s:3:"key";s:13:"57220d279e90f";s:4:"time";s:10:"1461849383";s:7:"user_id";s:8:"59615419";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[23395468713]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/737947051447590912";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Scalera tips: Transparencia referencial</title>
  <link>https://scalerablog.wordpress.com/2016/04/20/scala-tips-transparencia-referencial/</link>
  <pubDate>Wed, 20 Apr 2016 15:00:14 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=2690</guid>
  <description/>
  <content:encoded><![CDATA[<p style="text-align:justify;">Ya hemos hablado en otros <a href="https://scalerablog.wordpress.com/2016/03/09/scalera-tips-var-inmutable-vs-val-mutable/">post</a> sobre algunos detalles de la <em><strong>programación funcional pura</strong> </em>o sobre la importancia de evitar los <em><strong>efectos de lado</strong></em> siempre que sea posible.</p>
Si investigamos un poco en el tema, es posible que nos encontremos con el concepto de t<em><strong>ransparencia referencial</strong></em>. Hoy vamos a ver a qué se refiere este concepto.

<img class=" size-full wp-image-2693 aligncenter" src="https://scalerablog.files.wordpress.com/2016/04/giphy.gif" alt="giphy" width="260" height="225" />
<p style="text-align:justify;">La transparencia referencial está fuertemente ligada con el modelo de sustitución. Si queremos utilizar Scala utilizando toda su potencia como lenguaje de programación funcional, es necesario que tengamos en mente este concepto. A pesar de tener un nombre algo raruno, es bastante fácil de entender. La transparencia referencial indica que una función de tipo E =&gt; S debería poder ser sustituda por un valor de tipo S sin que eso supusiera una pérdida de funcionalidad. De esta forma, podemos estar seguros de que no la función no tiene efectos de lado.</p>

<blockquote><em><strong>Efectos de lado</strong></em>: una función no tiene efectos de lado si solamente transforma los argumentos de entrada en los de salida, y no realiza absolutamente nada más. Conectarse con una base de datos, imprimir por pantalla, crear logs o modificar una variable fuera del scope de la función, se consideran efectos de lado.</blockquote>
<p style="text-align:justify;">Vamos a ver un ejemplo con código. En este ejemplo vamos a crear una función que permita reservar una habitación de hotel. La función actualizará la lista de reservas del hotel y además devolverá un identificador para el usuario:</p>
[code language="scala"]
var reservations: List[Reservation] = List.empy[Reservation]

def reserveRoom(roomNumber: Int, from: String, to: String): Int = {
  val id = generateId()
  reservations = Reservation(roomNumber, from, to, id) :: reservations
  id
}

val myReservation: Int = reserveRoom(1, &quot;1/8/16&quot;, &quot;15/8/16&quot;)
[/code]
<p style="text-align:justify;">En este caso, estamos modificando una lista que está fuera del ámbito de la función. Esto es un efecto de lado. Por tanto, si realizamos una sustitución por un valor cualquiera perteneciente al dominio de la función realmente estamos perdiendo funcionalidad porque ya no se está añadiendo nada a la lista de reservas:</p>
[code language="scala"]
var reservations: List[Reservation] = List.empy[Reservation]

val myReservation: Int = &quot;1&quot; //Result of reserveRoom method

reservations.isEmpty //true....where is my reservation???
[/code]
<p style="text-align:justify;">¿Cómo podríamos cumplir la transparencia referencial? Una opción sencilla sería devolver, tanto una nueva lista actualizada, como el identificador de la reserva:</p>
[code language="scala"]
var reservations: List[Reservation] = List.empy[Reservation]

def reserveRoom(
  roomNumber: Int,
  from: Date,
  to: Date
): (Int, List[Reservation]) = {
  val id = generateId()
  (id, Reservation(roomNumber, from, to, id) :: reservations)
}

val (myReservation, reservationsUpdated) = reserveRoom(1, &quot;1/8/16&quot;, &quot;15/8/16&quot;)
reservations = reservationsUpdated

[/code]
<p style="text-align:justify;">De esta manera, si repetimos el ejercicio de sustituir por un valor, no perdemos información ¡Y ya hemos acabado! Hasta la próxima ;)</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2690</wp:post_id>
  <wp:post_date>2016-04-20 17:00:14</wp:post_date>
  <wp:post_date_gmt>2016-04-20 15:00:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scala-tips-transparencia-referencial</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="functional"><![CDATA[functional]]></category>
  <category domain="post_tag" nicename="referential-transparency"><![CDATA[referential transparency]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21980038923]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/722802252239347715";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>143</wp:comment_id>
    <wp:comment_author><![CDATA[Programación Funcional en JavaScript: La composición | el.abismo = de[null]]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://elabismodenull.wordpress.com/2016/12/13/programacion-funcional-en-javascript-la-composicion/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.99.140</wp:comment_author_IP>
    <wp:comment_date>2016-12-13 22:00:36</wp:comment_date>
    <wp:comment_date_gmt>2016-12-13 20:00:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] importante de la composición es que nosotros sigamos respetando la transparencia referencial que se da en las funciones puras involucradas. Es decir, que si yo ejecuto una función f con un [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1481659387</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1481659387.745274066925048828125;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1481659237.236403942108154296875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Scalera tips: Referential transparency</title>
  <link>https://scalerablog.wordpress.com/2016/04/25/scalera-tips-referential-transparency/</link>
  <pubDate>Mon, 25 Apr 2016 10:00:25 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=2761</guid>
  <description/>
  <content:encoded><![CDATA[<div>
<p style="text-align:justify;">We have already talked in other <a href="https://scalerablog.wordpress.com/2016/03/14/scalera-tips-var-immutable-vs-val-mutable/" target="_blank">posts</a> about several details of <i>pure functional programming</i> and the importance of avoiding <i>side effects</i> wherever possible.</p>

<div style="text-align:justify;">Should we investigate a bit further about it, we would likely run into the concept of<b><i> referential transparency</i></b>. Today it's time to see what this concept is about.</div>
<div></div>
</div>
<div>

<img class="CToWUd aligncenter" src="https://ci3.googleusercontent.com/proxy/TTQZDMnvQQlep00YCbq3BkQLNK_XQ0P-07gD3aKD-H2w5OHEycSClbCjHURT1U4XteoORO4YzeGxE00d_JT19VxI-8U2yiQWR7gHbK5-rA=s0-d-e1-ft#https://scalerablog.files.wordpress.com/2016/04/giphy.gif" alt="giphy" width="260" height="225" />
<p style="text-align:justify;">Referential transparency is strongly linked to the substitution model. If we want to use Scala and exploit its full potential as a functional programming language, we must keep this concept in mind. Despite its weird name, it is pretty easy to understand. Referential transparency means that a function of type I =&gt; O ought to be replaceable by a value of type O, without that entailing any loss of functionality. This way, we can be sure that the function has no side effects.</p>

<blockquote>
<p style="text-align:justify;"><em><strong>Side effects</strong></em>: a function has no side effects if it only transforms the input arguments into output arguments and does nothing else. Connecting to a database, printing on screen, writing logs or modifying a variable outside the scope of the function are considered to be side effects.</p>
</blockquote>
<p style="text-align:justify;">Let's see an example with code. In this example we are going to create a function that will allow us to book a hotel room. The function will update the hotel's reservations list and will return an identifier for the user:</p>
[code language="scala"]
var reservations: List[Reservation] = List.empy[Reservation]

def reserveRoom(roomNumber: Int, from: String, to: String): Int = {
  val id = generateId()
  reservations = Reservation(roomNumber, from, to, id) :: reservations
  id
}

val myReservation: Int = reserveRoom(1, &quot;1/8/16&quot;, &quot;15/8/16&quot;)
[/code]
<p style="text-align:justify;">In this case, we are modifying a list which is outside the scope of the function. This is a side effect. Therefore, if we performed a substitution by any value belonging to the function domain, we would lose functionality as nothing would be added to the reservations list:</p>
[code language="scala"]
var reservations: List[Reservation] = List.empy[Reservation]

val myReservation: Int = &quot;1&quot; //Result of reserveRoom method

reservations.isEmpty //true....where is my reservation???
[/code]
<p style="text-align:justify;">How can referential transparency be achieved? A simple option would be to return both the new updated list and the reservation identifier:</p>
[code language="scala"]
var reservations: List[Reservation] = List.empy[Reservation]

def reserveRoom(
  roomNumber: Int,
  from: Date,
  to: Date
): (Int, List[Reservation]) = {
  val id = generateId()
  (id, Reservation(roomNumber, from, to, id) :: reservations)
}

val (myReservation, reservationsUpdated) = reserveRoom(1, &quot;1/8/16&quot;, &quot;15/8/16&quot;)
reservations = reservationsUpdated

[/code]
<p style="text-align:justify;">This way, if we repeated the exercise of substituting by a value, we wouldn't be losing any information at all. And that's all for today! See you soon ;)</p>

</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2761</wp:post_id>
  <wp:post_date>2016-04-25 12:00:25</wp:post_date>
  <wp:post_date_gmt>2016-04-25 10:00:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scalera-tips-referential-transparency</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="functional"><![CDATA[functional]]></category>
  <category domain="post_tag" nicename="referential-transparency"><![CDATA[referential transparency]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22142771712]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/724538705457745920";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Shapeless: polymorphic functions</title>
  <link>https://scalerablog.wordpress.com/2016/06/06/shapeless-polymorphic-functions/</link>
  <pubDate>Mon, 06 Jun 2016 10:00:54 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=2773</guid>
  <description/>
  <content:encoded><![CDATA[Time ago, our friend <a href="https://twitter.com/javifdev" target="_blank">Javier Fuentes</a> illustrated us with an <a href="https://scalerablog.wordpress.com/2015/11/23/shapeless-introduction-and-hlists-part-1/" target="_blank">introduction to Shapeless</a>.
Some months after that, at <a href="http://www.meetup.com/Scala-Programming-Madrid/" target="_blank">Scala Madrid meetup</a>, he offered a pretty interesting speech about structural induction with Shapeless and HLists. We couldn't avoid it and we got the enthusiasm flu :-P

<h2>What we want to achieve</h2>

Let's set as our study case what I think more than one has thought before: how can I compose in the same for-comprehension different types. Something like:

[code language="scala"]
import scala.util.Try

for {
  v1 &lt;- List(1,2,3)
  v2 &lt;- Try(&quot;hi, person &quot;)
} yield s&quot;$v2 $v1&quot;
[/code]

which usually comes from the hand of the following frustrating error:

[code]
&lt;console&gt;:15: error: type mismatch;
 found   : scala.util.Try[String]
 required: scala.collection.GenTraversableOnce[?]
         v2 &lt;- Try(&quot;hi, person &quot;)
            ^
[/code]

Therefore we need a way to transform these data types (<code>Future</code>, <code>Try</code>) into iterable 'stuff' (<code>GenTraversable[T]</code> might work). In our example we won't have in mind the information that we loose about the error that might happen, for example, if certain <code>Try</code> or <code>Future</code> expression has failed. For have a better understanding about the problem we present, let's talk about some theory.

<a href="https://scalerablog.files.wordpress.com/2016/05/53132063.jpg" rel="attachment wp-att-2750"><img src="https://scalerablog.files.wordpress.com/2016/05/53132063.jpg?w=224" alt="53132063" width="224" height="300" class="aligncenter size-medium wp-image-2750" /></a>

<h2>Monomorphism vs polymorphism</h2>

We say a method is monomorphic when you can only invoke it with parameters whose concrete type is explicitly declared in the method signature, whilst the polymorphic methods can take parameters of any type while it fits in the signature (in case of Scala language: parameter types). Speaking proper English:

[code language="scala"]
def monomorphic(parameter: Int): String

def polymorphic[T](parameter: T): String
[/code]

<h3>Polimorphism</h3>

It's also good to know that a method can be polymorphic due to parameter types or just to parameter subtyping. E.g.:

[code language="scala"]
def parametricallyPolymorphic[T](parameter: T): String

def subtypedPolymorphic(parameter: Animal): String

subtypedPolymorphic(new Cat)
[/code]

If we use parameter types and we have <strong>NO</strong> information at all about those types, we are in front of a parametric polymorphism case.

If we use parameter types but we need any extra view / context bound for that type (<code>T &lt;: Whatever</code> o <code>T:TypeClass</code>), then we are talking about ad-hoc polymorphism.

<h3>Problem: Function values</h3>

There's not such a problem when using parametric polymorphism and methods but, what about function values? In Scala, it cannot be achieved and therefore it produces some lack of expressiveness:

[code language="scala"]
val monomorphic: Int =&gt; String = _.toString

val anotherMonomorphic: List[Int] =&gt; Set[Int] = 
  _.toSet

[/code]

Please, notice the definition of the function that trasforms a List into a Set. It could be totally independant of the list element type, but Scala syntax doesn't allow to define something similar. We could try asigning the method to a <code>val</code> (Eta expansion):

[code language="scala"]
def polymorphic[T](l: List[T]): Set[T] = l.toSet

val sadlyMonomorphic = polymorphic _
[/code]

But the compiler (as clever as usual) wil infer that the list contained type is <code>Nothing</code>: a special one, but concrete as the most.

<a href="https://scalerablog.files.wordpress.com/2016/05/64331666.jpg" rel="attachment wp-att-2751"><img src="https://scalerablog.files.wordpress.com/2016/05/64331666.jpg?w=300" alt="64331666" width="300" height="300" class="aligncenter size-medium wp-image-2751" /></a>

<h2>Shapeless parametric polymorphism</h3>

How does Shapeless solve this problem? If we had to define a transformation function from <code>Option</code> to <code>List</code> in Scala, we'd have the previously mentioned limitation for using function values and we could only achieve it by defining a method:

[code language="scala"]
def toList[T](o: Option[T]): List[T] =
  o.toList
[/code]

However, Shapeless, using its alchemy, provides us some ways to do so. In category theory, when talking about type constructors transformations, it's so called <a href="https://en.wikipedia.org/wiki/Natural_transformation#Definition" target="_blank">natural transformations</a>. First of them has the following notation:

[code language="scala"]
import shapeless.poly._

val polyFunction = new (Option ~&gt; List){
  def apply[T](f: Option[T]): List[T] = f.toList
}
[/code]

If you have a closer look at it, the parametric polymorphism is moved to the method inside the object. Using this function is as simple as:

[code language="scala"]
val result: List[Int] = polyFunction(Option(2))
[/code]

The other possible notation consists on defining the function behavior based on cases, in other words, if we want the function to be defined only for Int, String and Boolean, we'll add a case for each of them.

[code language="scala"]
import shapeless.Poly1

object polymorphic extends Poly1 {

  implicit optionIntCase = 
    at[Option[Int]](_.toList.map(_ + 1))

  implicit optionStringCase = 
    at[Option[String]](_.toList.map(_ + &quot; mutated&quot;))

  implicit optionBooleanCase = 
    at[Option[Boolean]](_.toList.map(!_))

}
[/code]

As you can see, if we want our function to be defined at the case where the input parameter is an  <code>Option[Int]</code>, we define that all contained elements in the list are added to 1.

This expression returns a <code>this.Case[Option[Int]]</code>, where <strong>this</strong> refers to <code>polymorphic</code> object that we are defining:

[code language="scala"]
implicit optionIntCase = 
  at[Option[Int]](_.toList.map(_ + 1))
[/code]

The good part of this? In case we wanted to use the funcion on a input type that doesn't have a defined case at the function, we'll get a <strong>compile-time</strong> error (Awesome, right?):
<h2>The result</h2>

Applying this last way (based on cases), we get the expected result that we mentioned in the introductory section: to be able to use a for-comprehension for composing different typed values: iterables, Try, Future... 

The proposed solution can be found <a href="https://github.com/Scalera/shapeless-handson/blob/master/src/main/scala/scalera/Polymorphic.scala" target="_blank">in the following file</a>. 

In our function we have a case for <code>GenTraversable</code>, another for <code>Try</code> and <code>Future</code> (this last one needs to have its expression evaluated for being able to iterate over it, so we need a timeout for waiting):

[code language="scala"]
object values extends Poly1 {

  implicit def genTraversableCase[T,C[_]](implicit ev: C[T] =&gt; GenTraversable[T]) = 
    at[C[T]](_.toStream)

  implicit def tryCase[T,C[_]](implicit ev: C[T] =&gt; Try[T]) = 
    at[C[T]](_.toOption.toStream)

  implicit def futureCase[T,C[_]](implicit ev: C[T] =&gt; Future[T], atMost: Duration = Duration.Inf) =
    at[C[T]](f =&gt; Try(Await.result(f,atMost)).toOption.toStream)

}
[/code]

Now we can use it in our controversial code snippet:

[code language="scala"]
import scala.concurrent.ExecutionContext.Implicits.global

case class User(name: String, age: Int)

val result: Stream[_] = for {
  v1 &lt;- values(List(1,2,3))
  v2 &lt;- values(Set(&quot;hi&quot;,&quot;bye&quot;))
  v3 &lt;- values(Option(true))
  v4 &lt;- values(Try(2.0))
  v5 &lt;- values(Future(User(&quot;john&quot;,15)))
} yield (v1,v2,v3,v4,v5)
[/code]

<h2>The sole solution?</h2> 

At all! you can always implement it using traditional Scala type classes, though it implies defining a trait that represent the ADT iterable. You can take a look at the example at the following <a href="https://gist.github.com/JSantosP/4888479a06b6c7064199f41f85b0b867" target="_blank">gist content</a>.

Peace out!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2773</wp:post_id>
  <wp:post_date>2016-06-06 12:00:54</wp:post_date>
  <wp:post_date_gmt>2016-06-06 10:00:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>shapeless-polymorphic-functions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="ad-hoc"><![CDATA[ad-hoc]]></category>
  <category domain="post_tag" nicename="at"><![CDATA[at]]></category>
  <category domain="post_tag" nicename="case"><![CDATA[case]]></category>
  <category domain="post_tag" nicename="defined"><![CDATA[defined]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="function"><![CDATA[function]]></category>
  <category domain="post_tag" nicename="future"><![CDATA[future]]></category>
  <category domain="post_tag" nicename="gentraversable"><![CDATA[gentraversable]]></category>
  <category domain="post_tag" nicename="iterable"><![CDATA[iterable]]></category>
  <category domain="post_tag" nicename="iterator"><![CDATA[iterator]]></category>
  <category domain="post_tag" nicename="parametric"><![CDATA[parametric]]></category>
  <category domain="post_tag" nicename="polymorphic"><![CDATA[polymorphic]]></category>
  <category domain="post_tag" nicename="shapeless"><![CDATA[shapeless]]></category>
  <category domain="post_tag" nicename="stream"><![CDATA[stream]]></category>
  <category domain="post_tag" nicename="subtype"><![CDATA[subtype]]></category>
  <category domain="post_tag" nicename="try"><![CDATA[try]]></category>
  <category domain="post_tag" nicename="values"><![CDATA[values]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/739759052968722434";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[23559212521]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Transformando el futuro</title>
  <link>https://scalerablog.wordpress.com/2016/05/04/transformando-el-futuro/</link>
  <pubDate>Wed, 04 May 2016 15:00:54 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=2778</guid>
  <description/>
  <content:encoded><![CDATA[<p style="text-align:justify;">Hace ya unas cuantas semanas <a href="https://scalerablog.wordpress.com/2015/12/09/leyendo-el-futuro-en-scala/">estuvimos hablando</a> sobre el tipo <em><strong>Future</strong></em> para crear llamadas asíncronas.
Vimos como trabajar con llamadas bloqueantes para obtener el valor del futuro. También utilizamos callbacks para obtener el resultado del futuro de forma asíncrona. Sin embargo se quedaron algunos puntos en el tintero. Me refiero a transformar los <em><strong>Future</strong></em> sin bloquear la ejecución.</p>

<h3>Transformaciones de Futuros</h3>
<p style="text-align:justify;">Para transformar los futuros, al igual que con otros tipos básicos de Scala, se usa principalmente los métodos <em><strong>map</strong></em> y <em><strong>flatmap</strong></em>.</p>

<h4 style="text-align:justify;">El método map</h4>
<p style="text-align:justify;">El método <em>map</em> nos permite cambiar el contenido de un futuro aplicando una función. Por ejemplo, si tenemos un método que nos permite obtener el primer millón de números primos, pero queremos transformarlo para que solo nos devuelva los cien primeros, podemos aplicar el método <em>map</em> de la siguiente manera:</p>
[code language="scala"]
def getFirstMillionOfPrimes(): Future[List[Int]] = ???

getFirstMillionOfPrimes().map(
  (list: List[Int]) =&gt; list.take(100)
)
[/code]
<p style="text-align:justify;">De esta forma estamos transformando el interior del Futuro sin romper la asincronía.</p>
<img class="  wp-image-2780 aligncenter" src="https://scalerablog.files.wordpress.com/2016/04/pi2band2bi.jpg" alt="pi2band2bi" width="283" height="230" />
<h4 style="text-align:justify;">El método flatMap</h4>
<p style="text-align:justify;">Por otro lado, el método <em>flatMap</em> nos permite aplicar una función al contenido del futuro, que devuelve un Futuro a su vez. Después, aplica una operación de <strong><em>flatten</em></strong> para convertir el Future[Future[A]] en un simple Future[A]. What the f...? Se entiende mejor con un ejemplo.</p>
<p style="text-align:justify;">Imaginemos que queremos concatenar en una cadena de texto el primer millón de números primos. Para ello utilizamos un nuevo método:</p>
[code language="scala"]
def concatenate(l: List[Int]): Future[String] = ???
[/code]

y ahora realizamos un <em>flatMap</em>

[code language="scala"]
getFirstMillionOfPrimes().flatMap(
  (list: List[Int]) =&gt; concatenate(list)
) //Future[String]
[/code]
<h3 style="text-align:justify;">¿Y como podemos componer hacer todo esto de una forma más sencilla?</h3>
<p style="text-align:justify;">Pues muy sencillo. ¡<em><strong>For comprehenssion</strong></em> al rescate! Aplicando un poco de syntactic sugar podemos tener un código mucho más legible.
Basta con hacer lo siguiente:</p>
[code language="scala"]
for {
  primes &lt;- getFirstMillionOfPrimes()
  primesString &lt;- concatenate(primes)
} yield primesString
[/code]
<p style="text-align:justify;">De esta manera, no se aplicará la operación de concatenación hasta que no se hayan obtenido los números primos mediante el método <em>getFirstMillionPrimes</em>.
Esta permite guardar un cierto orden a la hora de hacer composición de llamadas asíncronas. Además, si la primera llamada asíncrona falla, no se efectuará la segunda.</p>
<p style="text-align:justify;">Y esto es todo por hoy. Ahora ya sabes como cambiar el Futuro. Una lástima no poder cambiar el pasado :(</p>
<img class="  wp-image-2783 aligncenter" src="https://scalerablog.files.wordpress.com/2016/04/doesnt-go-into-girls-shower.jpg" alt="doesnt-go-into-girls-shower" width="308" height="299" />

¡Hasta la próxima!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2778</wp:post_id>
  <wp:post_date>2016-05-04 17:00:54</wp:post_date>
  <wp:post_date_gmt>2016-05-04 15:00:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>transformando-el-futuro</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="flatmap"><![CDATA[flatmap]]></category>
  <category domain="post_tag" nicename="future"><![CDATA[future]]></category>
  <category domain="post_tag" nicename="map"><![CDATA[map]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22472170841]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/727878075015270400";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Transforming the Future</title>
  <link>https://scalerablog.wordpress.com/2016/05/09/transforming-the-future/</link>
  <pubDate>Mon, 09 May 2016 10:00:49 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=2811</guid>
  <description/>
  <content:encoded><![CDATA[A few weeks ago we <a href="https://scalerablog.wordpress.com/2015/12/14/reading-the-future/" target="_blank">talked</a> about the type <em><strong>Future</strong></em> and its use to create asynchronous calls.
<p style="text-align:justify;">We saw how to work with blocking calls to obtain the value of the future. We also used callbacks in order to obtain the result of the future asynchronously. However, there are some issues that were left unsaid. And by that I'm referring to transforming the <b><i>Future</i></b> without blocking the execution.</p>

<h3>Future transformations</h3>
<p style="text-align:justify;">In order to transform futures, as with other Scala basic types, mainly two methods are used: <b><i>map </i></b>and <b><i>flatmap</i></b>.</p>

<h4>Map method</h4>
<p style="text-align:justify;"><i>Map </i>method allows us to change the content of a future by applying a function. For instance, if we have a method to get the first million prime numbers but we want to transform it to return just the first hundred ones, we can apply the map method in the following way:</p>
[code language="scala"]
def getFirstMillionOfPrimes(): Future[List[Int]] = ???

getFirstMillionOfPrimes().map(
  (list: List[Int]) =&gt; list.take(100)
)
[/code]

This way we will be transforming the inside of the future without breaking the asynchrony.

<img class="CToWUd a6T aligncenter" src="https://ci6.googleusercontent.com/proxy/IUXit7J2MBNUNzK0juc8t5lTmEIxMrzPu2zEQPCKCC5S6WHyBZXr4zp1HnC_DZQrTId80r2Mk1Tf-jRZtTDHJ9SeSdVGltyByg5MB01p7C_N8kTs=s0-d-e1-ft#https://scalerablog.files.wordpress.com/2016/04/pi2band2bi.jpg" alt="pi2band2bi" width="283" height="230" />
<h4>FlatMap method</h4>
<p style="text-align:justify;">On the other hand, the <i>flatMap </i>method allows us to apply a function to the content of the future and returning a future in turn. After that, a <b><i>flatten </i></b>operation is applied to convert the Future[Future[A]] into a simple Future[A]. What the f...? Better explained with an example.</p>
<p style="text-align:justify;">Imagine we want to concatenate the first million prime numbers in a string. To do so, we'll use a new method:</p>
[code language="scala"]
def concatenate(l: List[Int]): Future[String] = ???
[/code]

and now we perform a  <em>flatMap</em>

[code language="scala"]
getFirstMillionOfPrimes().flatMap(
  (list: List[Int]) =&gt; concatenate(list)
) //Future[String]
[/code]
<h3>And how can we do all this in a more simple way?</h3>
<p style="text-align:justify;">Easy question. <b>For comprehension</b> to the rescue! With a spoonful of syntactic sugar we can write a much more readable code.</p>
[code language="scala"]
for {
  primes &lt;- getFirstMillionOfPrimes()
  primesString &lt;- concatenate(primes)
} yield primesString
[/code]
<p style="text-align:justify;">This way, the concatenation operation won't be applied until the prime numbers are obtained with the method <em>getFirstMillionPrimes</em>.</p>
<p style="text-align:justify;">This allows us to keep an order when composing asynchronous calls. Besides, if the first asynchronous call fails, the second won't be conducted.</p>
<p style="text-align:justify;">And that's all for today. Now you know how to change the future. What a shame not to be able to change the past :(</p>
<img class="CToWUd a6T aligncenter" src="https://ci5.googleusercontent.com/proxy/GjY8lHdXZ1jinwlFAcIPXz4BEYlO9qKmrhR3cka2pHI0a-Vmy6-VCpA-6YaJv1-zVH8aQTHCbwMJXrPmSvyGu6aMByOO2JQad1buUMsUJa7EdO0rQtEuzjj2RuHBmtc8ubhTlYI=s0-d-e1-ft#https://scalerablog.files.wordpress.com/2016/04/doesnt-go-into-girls-shower.jpg" alt="doesnt-go-into-girls-shower" width="308" height="299" />

See you soon!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2811</wp:post_id>
  <wp:post_date>2016-05-09 12:00:49</wp:post_date>
  <wp:post_date_gmt>2016-05-09 10:00:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>transforming-the-future</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="flatmap"><![CDATA[flatmap]]></category>
  <category domain="post_tag" nicename="future"><![CDATA[future]]></category>
  <category domain="post_tag" nicename="map"><![CDATA[map]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22627037406]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/729614457656074240";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Recursividad recursivamente recursiva</title>
  <link>https://scalerablog.wordpress.com/2016/05/18/recursividad-recursivamente-recursiva/</link>
  <pubDate>Wed, 18 May 2016 15:00:09 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=2822</guid>
  <description/>
  <content:encoded><![CDATA[<p style="text-align:justify;">Hoy hablaremos de la recursividad. ¿No sabés lo que es la recursividad? No te preocupes, hoy hablaremos de la recursividad. ¿No sábes lo que es la recursividad? No te preocupes, hoy hablaremos de la recursividad. ¿No sabes lo que es la recursividad? No te preocupes, hoy hablaremos de la recursividad. ¿No sa....bueno, como broma ya está bien :)</p>
<p style="text-align:justify;">Debido a que Scala es un lenguaje que, a pesar de ser orientado a objetos, su verdadero potencial reside en gran parte en su parte funcional, es normal que la recursividad sea un factor importante. Sin embargo, aún más importante es generar las llamadas recursivas de forma correcta para no provocar un <strong>stack overflow</strong>.</p>

<blockquote>
<p style="text-align:justify;">Stack Overflow: además de una página bastante famosa, es lo que ocurre cuando realizamos tantas llamadas recursivas que la pila de memoria se llena.</p>
</blockquote>
<img class="  wp-image-2830 aligncenter" src="https://scalerablog.files.wordpress.com/2016/05/szpjhwz.jpg" alt="szpjhwz" width="203" height="267" />
<p style="text-align:justify;">Para generar las llamadas recursivas de forma correcta es necesario que la función sea <strong>tail-recursive</strong>. Esto quiere decir, que la función no necesita guardarse nada en memoria a la espera del resultado de la llamada recursiva. De esta forma no se provocará un overflow de la pila. También puede verse como una función que en el caso recursivo solamente se llama a si misma con distintos argumentos. Ejemplos de funciones que no cumplen la condición tail-recursive son aquellas en las que se realizan operaciones con los resultados de las llamadas recursivas. Por ejemplo, la función factorial codificada de la siguiente manera:</p>
[code language="scala"]
def factorial(n: Int): Int =
  if (n &lt;= 1) 1
  else n * factorial(n - 1)
[/code]
<p style="text-align:justify;">al estar multiplicada la llamada por n, no cumplirá una recursividad tail-recursive</p>
<p style="text-align:justify;"><strong>¿Y cómo saber si una función es tail-recursive?</strong> Scala nos lo pone fácil. Podemos añadir la anotación tailRecursive en dicha función para que en caso de que no se haya codificado de forma tail-recursive, Scala nos devuelva un error de compilación. El compilador nos hace el trabajo :)</p>
<p style="text-align:justify;">Vamos a ver como lo haríamos con la función que nos devuelve el elemento n de la sucesión de Fibonacci (un clásico). En primer lugar sin tail-recursive:</p>
[code language="scala"]
@annotation.tailrec
def fibonacci(n : Int) : Int = n match {
  case 0 | 1 =&gt; n
  case _ =&gt; fibonacci( n-1 ) + fibonacci( n-2 )
}
[/code]

Esto nos devuelve un error de compilación tal que así:
<blockquote><em>"could not optimize @tailrec annotated method fibonacci: it contains a recursive call not in tail position"</em></blockquote>
<p style="text-align:justify;">Sin embargo, si pensamos un poco más podremos conseguir la misma función mucho más eficiente :)</p>
[code language="scala"]
def fibonacci(n: Int): Int = {

  @annotation.tailrec
  def loop(i: Int, previous: Int, current: Int): Int =
    if (i == 0) previous
    else loop(i - 1, current, previous + current)

  loop(n, 0, 1)
}
[/code]
<p style="text-align:justify;">En este caso no habrá ningún error de compilación.</p>
<img class="  wp-image-2831 aligncenter" src="https://scalerablog.files.wordpress.com/2016/05/28b5865ebe59280d5c3ed18fc1147964309d9d0c81663c0c3f81d42fc5979c8f.jpg" alt="28b5865ebe59280d5c3ed18fc1147964309d9d0c81663c0c3f81d42fc5979c8f" width="382" height="247" />
<p style="text-align:justify;">Y hasta aquí este post. Y hasta aquí este post. Y hasta aquí este ...</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2822</wp:post_id>
  <wp:post_date>2016-05-18 17:00:09</wp:post_date>
  <wp:post_date_gmt>2016-05-18 15:00:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>recursividad-recursivamente-recursiva</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="recursive"><![CDATA[recursive]]></category>
  <category domain="post_tag" nicename="stackoverflow"><![CDATA[stackoverflow]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22937591328]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/732950495346622465";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Scala: One language to rule them all (II)</title>
  <link>https://scalerablog.wordpress.com/2016/05/30/scala-one-language-to-rule-them-all-ii/</link>
  <pubDate>Mon, 30 May 2016 10:00:06 +0000</pubDate>
  <dc:creator>pfcoperez</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=2847</guid>
  <description/>
  <content:encoded><![CDATA[You wouldn't put a layman under the controls of a brand new Airbus 380. Such a powerful tool requires its users to be trained; something similar happens with Scala when it is used to cast new rings of power, I mean, DSLs. Some theory and lots of <em>learning by doing.</em>  <a href="https://scalerablog.wordpress.com/2016/04/18/scala-one-language-to-rule-them-all-i/">We've already seen a bit of theory</a> and now is time to learn by building a DSL from scratch.
<h1>Our DSL's target</h1>
Our brand new DSL is intended to serve as an didactic exercise. However, despite of its purpose, it needs to have a target. That is (or):
<ul>
	<li>A process or system to govern.</li>
	<li>Another language to serve as proxy of.</li>
</ul>
In our example we'll tackle the second case.
<h2>Introducing AWK</h2>
Are you kidding? does it need introduction?
Let your unix terminal introduce it for me:

[code language="bash"]
man awk | head -n 6
[/code]
<blockquote><em>GAWK(1) Utility Commands GAWK(1)</em>

<em>NAME</em>
<em> gawk - pattern scanning and processing language</em></blockquote>
OK, <a href="https://en.wikipedia.org/wiki/AWK">Wikipedia</a> seems a little more verbose:
<blockquote><em><b>AWK</b> is an <a title="Interpreter (computing)" href="https://en.wikipedia.org/wiki/Interpreter_(computing)">interpreted</a> <a title="Programming language" href="https://en.wikipedia.org/wiki/Programming_language">programming language</a> designed for text processing and typically used as a <a title="Data extraction" href="https://en.wikipedia.org/wiki/Data_extraction">data extraction</a> and reporting tool. It is a standard feature of most <a title="Unix-like" href="https://en.wikipedia.org/wiki/Unix-like">Unix-like</a> <a title="Operating system" href="https://en.wikipedia.org/wiki/Operating_system">operating systems</a>.</em>

<em>The AWK language is a <a title="Data-driven programming" href="https://en.wikipedia.org/wiki/Data-driven_programming">data-driven</a> <a title="Scripting language" href="https://en.wikipedia.org/wiki/Scripting_language">scripting language</a> consisting of a set of actions to be taken against <a title="Stream (computing)" href="https://en.wikipedia.org/wiki/Stream_(computing)">streams</a> of textual data – either run directly on files or used as part of a <a title="Pipeline (Unix)" href="https://en.wikipedia.org/wiki/Pipeline_(Unix)">pipeline</a></em></blockquote>
Consider these two heroes:

<a href="https://scalerablog.files.wordpress.com/2016/05/gnu-and-penguin-color.png"><img class="aligncenter size-medium wp-image-3389" src="https://scalerablog.files.wordpress.com/2016/05/gnu-and-penguin-color.png?w=300" alt="Gnu-and-penguin-color" width="300" height="277" /></a>

Gnu has a belt you can't see in this drawing and there he hides a powerful weapon: AWK.
It is so powerful because it allows many scripts, running  upon (and used to build) GNU/Linux/BSD distributions, to transform, filter, aggregate,... data from other commands outputs. Let's see an example:

<a href="https://scalerablog.files.wordpress.com/2016/05/awk_sample.png"><img class="aligncenter size-full wp-image-3391" src="https://scalerablog.files.wordpress.com/2016/05/awk_sample.png" alt="awk_sample" width="700" height="70" /></a>

Here, the output generated by <em>lsmod </em>is piped to AWK whereby each line is processed by extracting its second column value which will be accumulated in a <em>total</em> byte counter. This way, when the output has been exhausted, <em>total</em> will be printed as the total amount of Kilo Bytes of memory used by Linux Kernel modules.
<h2>A hard nut to crack?</h2>
The applications of AWK are innumerable as well as the amount of time you can save once you have a grasp of it. However, for many people, it is more like...

<a href="https://scalerablog.files.wordpress.com/2016/05/6bkfb7b.png"><img class="aligncenter size-medium wp-image-3392" src="https://scalerablog.files.wordpress.com/2016/05/6bkfb7b.png?w=300" alt="6bkFb7B" width="300" height="179" /></a>

... than a helping tool. Its 1475 lines of <a href="https://en.wikipedia.org/wiki/Man_page" target="_blank">man</a> pages aren't precisely light reading.

It seem therefore that guiding an user through the composition of AWK programs could be of great help. Does this phrase ring a bell to you?

<em><strong>DSLs</strong> are <strong>small </strong>and <strong>concise</strong> which implies that they guide their users in the process of describing actions, entities or relations within their domain of application.</em>

Yes! A Scala internal DSL could be used to build such a tool!
<h1>Hands on <del>the DSL</del> Scalawk construction</h1>
<blockquote><em>The most important thing in the programming language is the name...</em>
Donald Erving Knuth</blockquote>
First things first and, if we take the <em>argument from authority </em>as a valid argument, we should start by giving a name to our DSL.

To be brief: We'll compose AWK programs by the use of a Scala internal DSL,
<p style="text-align:center;">Scala + AWK = <strong>Scalawk</strong></p>
<p style="text-align:left;">So far so good!</p>

<table border="1">
<tbody>
<tr>
<td>You can already clone Scalawk source code <a href="https://github.com/pfcoperez/scalawk">GitHub</a>

[code language="bash"]
git clone https://github.com/pfcoperez/scalawk.git
[/code]</td>
</tr>
</tbody>
</table>
<h2 style="text-align:left;">Divide &amp; Conquer</h2>
<a href="https://scalerablog.wordpress.com/2016/04/18/scala-one-language-to-rule-them-all-i/" target="_blank">In the last episode</a> we agreed that the safest way to design a DSL is by the use of the state machine model. These machines are easily decomposed into:
<ul>
	<li><strong>States</strong> (one of them is the machine initial state).</li>
	<li><strong>Transitions</strong>:
<ul>
	<li>Inputs triggering the transition.</li>
	<li>Transition effects:
<ul>
	<li>The machine changes its current state.</li>
	<li>Some output could be generated besides the state transition.</li>
</ul>
</li>
</ul>
</li>
	<li><strong>Machine alphabet</strong>: Machine input entities.</li>
</ul>
By drawing the state machine diagram, which is not different from designing an interactive guide, we'll complete the whole creative process in the creation of the DSL. The remaining work isn't more than beautiful Scala boilerplate.

<a href="https://scalerablog.files.wordpress.com/2016/05/machine.png"><img class="aligncenter size-full wp-image-3393" src="https://scalerablog.files.wordpress.com/2016/05/machine.png" alt="machine" width="361" height="553" /></a>

All possible users interaction with Scalawk are represented in the previous graph, e.g:

[code language="scala"]
lines splitBy &quot;;&quot; arePresentedAs ('c1, 'c2)
[/code]

<a href="https://scalerablog.files.wordpress.com/2016/05/machine_walkthrough.png"><img class="aligncenter size-full wp-image-3394" src="https://scalerablog.files.wordpress.com/2016/05/machine_walkthrough.png" alt="machine_walkthrough" width="451" height="553" /></a>

This machine modelling and decomposition leads to the following Scala packages structure:

<a href="https://scalerablog.files.wordpress.com/2016/05/packages.png"><img class="aligncenter size-full wp-image-3395" src="https://scalerablog.files.wordpress.com/2016/05/packages.png" alt="packages" width="187" height="75" /></a>
<h2>The nuts &amp; bolts or: How I Learnt to Stop Worrying and Love the Building Blocks that Scala Provides</h2>
States, transitions and auxiliary elements are entities contained by the packages listed above. In fact, they are nothing but Scala objects, classes, methods and traits.
<h3>Initial State</h3>
<a href="https://scalerablog.files.wordpress.com/2016/05/initial_state.png"><img class="aligncenter size-full wp-image-3396" src="https://scalerablog.files.wordpress.com/2016/05/initial_state.png" alt="initial_state" width="92" height="71" /></a>

As <a href="https://scalerablog.wordpress.com/2016/04/18/scala-one-language-to-rule-them-all-i/" target="_blank">we already know</a>,  states are objects. Either they are instances of classes or singleton objects. On the other hand, we've also seen that the right way to implement state machines is to make these states immutable, being transitions responsible for new states generation.

The initial state ins't generated by any transition, it exists as it is from the beginning of the program. That is a good indicator of its singleton nature which is definitely confirmed by the fact that no other instance of this initial state can exist:

[code language="scala"]
object lines extends ToCommandWithSeparator
[/code]

From the DSL user standpoint, this initial state should be just a word indicating the start of a phrase in the language. That's another reason supporting the singleton object approach.

The initial state need to transit to the next one, that's is why <em>lines </em>is extending <em>ToCommandWithSeparator </em>. Don't rush, but keep in mind that <em>ToCommandWithSeparator </em>is <strong>transition set trait</strong>.
<h3>Transitory and final states</h3>
Yeah, states are objects... is that all? No!  There are different kinds of states, besides, many states are quite alike and they could be built from templates. Lets review some tricks and tips.

The top-level classification of non-initial states should be this one: <strong>Transitory</strong> and <strong>final</strong>. Conceptually, the former can't be used to generate a result whereas the latter can. In the concrete case of Scalawk that implies that transitory states can't generate valid AWK programs but final states can.

[caption id="attachment_3397" align="aligncenter" width="107"]<a href="https://scalerablog.files.wordpress.com/2016/05/with_initialprogram_st.png"><img class="aligncenter  wp-image-3397" src="https://scalerablog.files.wordpress.com/2016/05/with_initialprogram_st.png" alt="with_initialprogram_st" width="107" height="76" /></a> <a href="https://scalerablog.files.wordpress.com/2016/05/with_initialprogram_st.png">Non-final state<br /></a>[/caption]

[caption id="attachment_3398" align="aligncenter" width="114"]<img class="  wp-image-3398 aligncenter" src="https://scalerablog.files.wordpress.com/2016/05/solidcomand_st.png" alt="solidcomand_st" width="114" height="74" /> Final state[/caption]

In Scalawk, any entity able to generate valid AWK code should mix <em>AwkElement</em>

[code language="scala"]
trait AwkElement {
  def toAwk: String
}
[/code]

By doing so, we are adding <em>toAwk </em>method to that entity, the entry point to ask for AWK code from client code.

Despite of their differences, almost all states share a common set of attributes from which AWK commands can be composed:
<ul>
	<li><strong>Command line options</strong>, e.g: <em>Token separator</em></li>
	<li><strong>Initial program: </strong>Instructions to be run by AWK before starting line processing. e.g: Initialize<em> a counter value</em>.</li>
	<li><strong>Line program:</strong> Instructions to be executed for each line of the AWK input. e.g: <em>Printing a line; adding a value to an accumulator initialized at the Initial Program.</em></li>
	<li><strong>End program:</strong> Instructions to be executed after all lines have been processed, that is, after <em>Line Program </em>has been run using each single input line as its own input. e.g: <em>Printing counters values.</em></li>
</ul>
At each state, these fields might be empty or not and when a final state is asked to produce an AWK program, they will be used to generate the result string value.

[code language="scala"]
abstract class AwkCommand protected(
  private[scalawk] val commandOptions: Seq[String] = Seq.empty,
  private[scalawk] val linePresentation: Seq[AwkExpression] = Seq.empty,
  private[scalawk] val lineProgram: Seq[SideEffectStatement] = Seq.empty,
  private[scalawk] val initialProgram: Seq[SideEffectStatement] = Seq.empty,
  private[scalawk] val endProgram: Seq[SideEffectStatement] = Seq.empty
) {
  def this(prev: AwkCommand) = this(
    prev.commandOptions,
    prev.linePresentation,
    prev.lineProgram,
    prev.initialProgram,
    prev.endProgram
  )
}
[/code]

So far, we know that non-initial states:
<ul>
	<li>For sure, contain the building blocks of a result and propagate the previous state contents for these fields:  <strong>Then they should extend <em>AwkCommand </em>abstract class.</strong></li>
	<li>Most probably, add or change some piece of information from the previous state <em>AwkCommand </em>attributes: <strong>Then they should override <em>AwkCommand </em>attributes.</strong></li>
	<li>Optionally, can <strong>transit</strong> to another state: If it is the case, they should have a method with the type of the target state as return value or mix  a transition family trait.</li>
</ul>
You might be thinking: <em>Why is AwkCommand an abstract class and not a trait?
</em>Well, <em>AwkCommand</em>'s <strong>goal is to provide a re-usable code for continuity</strong>. That is, it provides the constructor to build a state from another state (<em>prev </em>parameter). This way, states code is reduced to just their transitions and <em>AwkCommand </em>attribute overrides but <strong>only for those attributes whose information is changing in the new state.</strong>

Obviously, the only way to provide a constructor in a class hierarchy is by providing a class, if this class can't be instantiated: Make it abstract.

<a href="https://scalerablog.files.wordpress.com/2016/05/abstract_with_constructor.jpg"><img class="aligncenter size-medium wp-image-3399" src="https://scalerablog.files.wordpress.com/2016/05/abstract_with_constructor.jpg?w=300" alt="abstract_with_constructor" width="300" height="300" /></a>

[code language="scala"]
class CommandWithLineProgram(
                              statements: Seq[SideEffectStatement]
                            )(prev: AwkCommand) extends AwkCommand(prev)
  with ToSolidCommand {

  override private[scalawk]val lineProgram: Seq[SideEffectStatement] = statements

}
[/code]

<em>CommandWithLineProgram</em> is a non-final state hence it doesn't mix <em>AwkElement </em>trait.

[code language="scala"]
//This is the first state which can be used to obtain an AWK command string `toAwk`
class SolidCommand(val lineResult: Seq[AwkExpression], prevSt: AwkCommand) extends AwkCommand(prevSt)
  with AwkElement
  with ToCommandWithLastAction {
 ...
 ...
 ...
}
[/code]

On the contrary, <em>SolidCommand </em>does<em>,</em> therefore needs to provide an implementation to <em>toAwk </em>method:

[code language="scala"]
 // AWK Program sections

// BEGIN
protected def beginBlock: String = programToBlock(initialProgram)

// Per-line
protected def eachLineActionBlock: String =
programToBlock(lineProgram ++ linePresentation.headOption.map(_ =&gt; Print(linePresentation)))


// END
protected def endBlock: String = programToBlock(endProgram)

protected def programToBlock(program: Seq[SideEffectStatement]) =
{program.map(_.toAwk) mkString &quot;; &quot;} +
program.headOption.map(_ =&gt; &quot;; &quot;).getOrElse(&quot;&quot;)

protected def optionsBlock: String =
{commandOptions mkString &quot; &quot;} + commandOptions.headOption.map(_ =&gt; &quot; &quot;).getOrElse(&quot;&quot;)

override def toAwk: String =
s&quot;&quot;&quot;|awk ${optionsBlock}'
|${identifyBlock(&quot;BEGIN&quot;, beginBlock)}
|${identifyBlock(&quot;&quot;, eachLineActionBlock)}
|${identifyBlock(&quot;END&quot;, endBlock)}'&quot;&quot;&quot;.stripMargin.replace(&quot;\n&quot;, &quot;&quot;)

//Auxialiary methods
private[this] def identifyBlock(blockName: String, blockAwkCode: String): String =
blockAwkCode.headOption.map(_ =&gt; s&quot;$blockName{$blockAwkCode}&quot;).getOrElse(&quot;&quot;)
[/code]

This class hierarchy enables code re-utilization, for example, <em>SolidCommandWithLastAction</em> is almost an exact copy of <em>SolidCommand</em> and nothing prevents us from extending it in order to define <em>SolidCommandWithLastAction:</em>

[code language="scala"]
class SolidCommandWithLastAction(lastAction: Seq[SideEffectStatement])(prevSt: SolidCommand)
extends SolidCommand(prevSt) {...}
[/code]

At this point, you should be able to start exploring <a href="https://github.com/pfcoperez/scalawk">the repository</a> as well as to associate each state from the graph diagram with a state class in the code. Just in case, the following table collect these associations:
<table class="c2">
<tbody>
<tr class="c7">
<td class="c0" colspan="1" rowspan="1">
<p class="c6"><strong><span class="c11">Graph Node</span></strong></p>
</td>
<td class="c5" colspan="1" rowspan="1">
<p class="c6"><strong><span class="c11">Entity</span></strong></p>
</td>
<td class="c8" colspan="1" rowspan="1">
<p class="c6"><strong><span class="c11">Is final state?</span></strong></p>
</td>
<td class="c3" colspan="1" rowspan="1">
<p class="c6"><strong><span class="c11">Entity Kind</span></strong></p>
</td>
</tr>
<tr class="c7">
<td class="c0" colspan="1" rowspan="1">
<p class="c6"><span class="c1">init</span></p>
</td>
<td class="c5" colspan="1" rowspan="1">
<p class="c6"><span class="c9">lines</span></p>
</td>
<td class="c8" colspan="1" rowspan="1">
<p class="c6"><span class="c1">No</span></p>
</td>
<td class="c3" colspan="1" rowspan="1">
<p class="c6"><span class="c1">Singleton Object</span></p>
</td>
</tr>
<tr class="c7">
<td class="c0" colspan="1" rowspan="1">
<p class="c6"><span class="c1">command</span></p>
</td>
<td class="c5 c10" colspan="1" rowspan="1">
<p class="c6"><span class="c10 c14">CommandWithSeparator</span></p>
</td>
<td class="c8" colspan="1" rowspan="1">
<p class="c6"><span class="c1">No</span></p>
</td>
<td class="c3" colspan="1" rowspan="1">
<p class="c6"><span class="c1">Class</span></p>
</td>
</tr>
<tr class="c7">
<td class="c0" colspan="1" rowspan="1">
<p class="c6"><span class="c1">with line program</span></p>
</td>
<td class="c5" colspan="1" rowspan="1">
<p class="c6"><span class="c9">CommandWithLineProgram</span></p>
</td>
<td class="c8" colspan="1" rowspan="1">
<p class="c6"><span class="c1">No</span></p>
</td>
<td class="c3" colspan="1" rowspan="1">
<p class="c6"><span class="c1">Class</span></p>
</td>
</tr>
<tr class="c7">
<td class="c0 c10" colspan="1" rowspan="1">
<p class="c6"><span class="c10 c13">with initial program</span></p>
</td>
<td class="c5" colspan="1" rowspan="1">
<p class="c6"><span class="c9">CommandWithInitialProgram</span></p>
</td>
<td class="c8" colspan="1" rowspan="1">
<p class="c6"><span class="c1">No</span></p>
</td>
<td class="c3" colspan="1" rowspan="1">
<p class="c6"><span class="c1">Class</span></p>
</td>
</tr>
<tr class="c7">
<td class="c0" colspan="1" rowspan="1">
<p class="c6"><span class="c1">solid command</span></p>
</td>
<td class="c5" colspan="1" rowspan="1">
<p class="c6"><span class="c9">SolidCommand</span></p>
</td>
<td class="c8" colspan="1" rowspan="1">
<p class="c6"><span class="c1">Yes</span></p>
</td>
<td class="c3" colspan="1" rowspan="1">
<p class="c6"><span class="c1">Class</span></p>
</td>
</tr>
<tr class="c7">
<td class="c0" colspan="1" rowspan="1">
<p class="c6"><span class="c1">with last action</span></p>
</td>
<td class="c5" colspan="1" rowspan="1">
<p class="c6"><span class="c9">SolidCommandWithLastAction</span></p>
</td>
<td class="c8" colspan="1" rowspan="1">
<p class="c6"><span class="c1">Yes</span></p>
</td>
<td class="c3" colspan="1" rowspan="1">
<p class="c6"><span class="c1">Class</span></p>
</td>
</tr>
</tbody>
</table>
<h3></h3>
<h3>Transitions</h3>
Transitions between states are the easy part, they are as simple as methods returning new states. Thanks to Scala infix notation they create the illusion of natural language expressions, at least to some degree...

Some states might share transitions so it seems a good a idea to create traits containing them. By the use of mixing, states can thus use them as LEGO pieces in order to build their own transition set.

There are two special cases which deserve special attention: <strong>Groups of transitions </strong>and<strong> Empty input transitions</strong>.
<h4>Group of transitions...</h4>
... are composed by transitions which are always present together or which are different versions of the same transition. These are normally defined at the same trait named following the pattern <em>To&lt;STATE_CLASS_NAME&gt;.</em>

[code language="scala"]
trait ToCommandWithSeparator {

  def splitBy(separator: String) = new CommandWithSeparator(separator)
  def splitBy(separator: Regex) =  new CommandWithSeparator(separator)

}
[/code]

The example above is a rather clear case of two versions of the same transition: One receiving a string input and the other receiving a regular expression.

<span style="color:#ff0000;"><strong>Note that</strong></span>, in relation with the abstract state machine, the machine input is both the method name and its parameters.
<h4>Empty input transitions</h4>
Consider the following transition, extracted from our state machine:

<a href="https://scalerablog.files.wordpress.com/2016/05/empty_transition.png"><img class="aligncenter size-full wp-image-3400" src="https://scalerablog.files.wordpress.com/2016/05/empty_transition.png" alt="empty_transition" width="249" height="70" /></a>

State machines can move from one state to another when the input is an empty string. It might seem bizarre but it can be done with our object modelling of state machines thanks to <a href="http://orionsword.no-ip.org/blog/wordpress/?p=600" target="_blank">implicit conversions</a>.

An implicit conversion from a state (Source) to another (Target) by just trying to access one of T<em>arget </em>methods having a S<em>ource </em>instance will be perceived by the DSL user as an empty transition. As simply as it sounds.

What is more, by just defining the implicit conversion at the companion object of either the <em>Source </em>or <em>Target </em>class/trait, it will be available in the scope of the sentence where the empty transition occurs. No need of imports which means: ABSOLUTELY TRANSPARENCY for the user.

Thus, the following code:

[code language="scala"]
object ToCommandWithSeparator {
  implicit def toCommandWithSep(x: ToCommandWithSeparator) = new CommandWithSeparator()
}
[/code]

... enables the transition described in the diagram below:

<a href="https://scalerablog.files.wordpress.com/2016/05/empty_transition2.png"><img class="aligncenter size-full wp-image-3401" src="https://scalerablog.files.wordpress.com/2016/05/empty_transition2.png" alt="empty_transition2" width="203" height="71" /></a>
<blockquote><img class="  wp-image-3944 aligncenter" src="https://scalerablog.files.wordpress.com/2016/05/vvqnk6o.jpg" alt="VvqNk6o" width="385" height="290" />

- If <em>ToCommandWithSeparator</em> is a transition family trait, isn't its equally named companion object the companion object of that transition family? Didn't we set that the implicit conversion should be defined within <em>Source </em>or <em>Target</em>'s companion object and, therefore, within a state class?

- Exactly! And what's <em>ToCommandWithSeparator</em>'s fate if not to be mixed at a state class definition?</blockquote>
In Scala, implicit conversions defined at a trait companion object will also apply for those classes extending or mixing that trait and they'll be available on any scope where that class is available. This feature, besides being extremely useful, seems to be a very rational one: The class mixing/extending the trait can be regarded as a kind-of that trait, a subtype, so any of its instances are also of the type given by the trait and it should be expected that any conversion applying to that type could also apply to these instances.

Take, for example, the traits <em>T </em>and <em>S </em>, both having companion objects where implicit conversions to <em>D </em>and <em>E </em>are respectively defined:

[code language="scala"]
case class E(x: Int)
case class D(x: Int)

trait T
object T { implicit def toD(from: T): D = D(1) }

trait S
object S { implicit def toE(from: S): E = E(2) }
[/code]

Mix both of them in the definition of the class <em>C</em>...

[code language="scala"]
case class C() extends T with S
[/code]

... and check how a <em>C</em> instance is implicitly converted into instances of <em>E</em> or <em>D</em>.

[code language="scala"]
scala&gt; val c: C = C()
c: C = C()

scala&gt; val d: D = c
d: D = D(1)
scala&gt; val e: E = c
e: E = E(2)
[/code]
<h3>Expressions</h3>
Most Scalawk transition inputs fit into the pattern <em>transition name + basic type value. </em>However, some of them receive expressions, identifiers or sentences. These are particular types created to express instructions and values within the AWK program. Hence they should not be part of a generic guide on how to create a DSL. Yet, the constructs behind them are not uncommon in many Scala Internal DSLs so we'll take a brief look at some of them.
<h4>Identifiers in Scalawk (Internal Identifiers)</h4>
Some DSL expressions, such as <em>arePresentedAs, </em>need to make reference to AWK variables, declared by some other DSL expression. You could use strings to represent these internal identifiers. But having to surround our DSL identifiers in double quotes throws a bucket of cold water on its user experience, making the user conscious of the fact that she/he is actually using Scala instead of a crafted-from-scratch domain language.

Scala offers a mechanism to <em><a href="http://www.scala-lang.org/api/2.11.8/#scala.Symbol">get unique objects for equal strings</a></em>. That is exactly what a good DSL identifier needs.

If anyone writes:

[code language="scala"]
'counter
[/code]

... her/he will be obtaining a reference to a <em>Symbol </em>instance.  <em>Symbol </em>class has a <em>name </em>attribute whereby you can recover the character string used to obtain the instance.

The user would just write <em>'counter </em>and the DSL developer can obtain the string <em>counter</em> and use it for the internal representation of, in this case, the AWK variable.
<h4>Sentences</h4>
By combining internal identifiers with ad-hoc classes and implicit conversions it isn't difficult to express assignation sentences, event algebraic operations.

[code language="scala"]
's := 's + 1
[/code]

This article is already far too long and with what has been hinted and the tricks of previous sections it is actually easy to understand the code to build this kind of expressions. That code is located under <a href="https://github.com/pfcoperez/scalawk/tree/master/src/main/scala/org/pfcoperez/scalawk/entities"><em>entities </em>package</a>.  Take that package as if it were a embedded DSL within Scalawk, yes, a DSL embedded in a DSL which is in turn embedded in Scala.
<h1>Some final thoughts</h1>
Developing internal DSLs isn't precisely a piece of cake. If being forced to fall back to the host language constructs, users will easily wake up from the dream of being using a language built for them from the ground up. Nobody likes to be reminded he/her is not that special.

<a href="https://scalerablog.files.wordpress.com/2016/05/scala_has_you.png"><img class="aligncenter size-full wp-image-3402" src="https://scalerablog.files.wordpress.com/2016/05/scala_has_you.png" alt="scala_has_you" width="384" height="113" /></a>

You'll encounter many pitfalls when trying to faithfully reproduce the state machine, the temptation to abandon the model is huge. Trust me, this is complex and, if you leave the path of the state machine, the ogres in the forest will have your heart for breakfast sooner than you imagine. Scala has proven it can offer a solution to any bump of the state machine road, outside that road you are free to face a minefield.

As a last piece of advice, I'd recommend you to buy a white/black board, a paper notebook and a good pen... whatever you feel confortable to draw on.

These are two examples of the early stages of design of Scalawk:

<a href="https://scalerablog.files.wordpress.com/2016/05/whiteboard.jpg"><img class="aligncenter size-medium wp-image-3403" src="https://scalerablog.files.wordpress.com/2016/05/whiteboard.jpg?w=225" alt="whiteboard" width="225" height="300" /></a>

<a href="https://scalerablog.files.wordpress.com/2016/05/notebook.jpg"><img class="aligncenter size-medium wp-image-3404" src="https://scalerablog.files.wordpress.com/2016/05/notebook.jpg?w=238" alt="notebook" width="238" height="300" /></a>

Think! draw! think! and draw again! so you are a better DSL architect than this guy...
<a href="https://scalerablog.files.wordpress.com/2016/05/be-21-architect.jpg"><img class="aligncenter  wp-image-3405" src="https://scalerablog.files.wordpress.com/2016/05/be-21-architect.jpg?w=300" alt="BE-21-architect" width="388" height="219" /></a>

... so your Neo(s) wouldn't wake so easily.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2847</wp:post_id>
  <wp:post_date>2016-05-30 12:00:06</wp:post_date>
  <wp:post_date_gmt>2016-05-30 10:00:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scala-one-language-to-rule-them-all-ii</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_0482a0514aca5d57e4cd326f75db5b4f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[23323868040]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/737224365066964992";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Scala: Un lenguaje para gobernarlos a todos (II)</title>
  <link>https://scalerablog.wordpress.com/2016/05/25/scala-un-lenguaje-para-gobernarlos-a-todos-ii/</link>
  <pubDate>Wed, 25 May 2016 10:00:41 +0000</pubDate>
  <dc:creator>pfcoperez</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=3420</guid>
  <description/>
  <content:encoded><![CDATA[A ninguna aerolínea se le ocurriría poner a los mandos de un Airbus 380 a alguien sin entrenamiento.
Algo parecido ocurre con la creación de anillos de poder, ¡ups! DSLs, en Scala. Es una actividad que requiere entrenamiento, aunque por suerte no tan intensivo. Ha de ser tanto teórico como práctico pero, sobre todo, práctico.  En esta serie de posts <a href="https://scalerablog.wordpress.com/2016/04/13/scala-un-lenguaje-para-gobernarlos-a-todos-i/" target="_blank">ya se ha tratado algo de teoría</a> y ahora toca la parte divertida del aprendizaje ¡Es hora de construir un DSL desde cero!
<h1>El objetivo de nuestro DSL</h1>
El fin último de nuestro futuro DSL es el de servir de ejercicio didáctico. Sin embargo, todo DSL ha de ser de ayuda en un dominio concreto, bien (o):
<ul>
	<li>Facilitando la gestión o control de un sistema.</li>
	<li>Sirviendo de lenguaje intermedio para otros lenguajes que son demasiado complejos o extensos.</li>
</ul>
En el ejemplo que vamos a desarrollar abordaremos el segundo caso.
<h2>Os presento a AWK</h2>
¡Menuda broma! Quién no conoce AWK ¡Si hasta tu Linux Box sabe qué es!

[code language="bash"]
man awk | head -n 6
[/code]
<blockquote><em>GAWK(1) Utility Commands GAWK(1)</em>

<em>NAME</em>
<em> gawk - pattern scanning and processing language</em></blockquote>
OK, es necesario recurrir a <a href="https://es.wikipedia.org/wiki/AWK" target="_blank">Wikipedia</a> para encontrar una explicación algo menos tácita:
<blockquote><em><b>AWK </b>es un lenguaje de programación diseñado para procesar datos basados en texto, ya sean ficheros o flujos de datos...</em>

<em>
... <strong>AWK</strong> fue una de las primeras herramientas en aparecer en Unix (en la versión 3) y ganó popularidad como una manera de añadir funcionalidad a las tuberías de Unix. La implementación de alguna versión del lenguaje AWK es estándar en casi todo sistema operativo tipo unix moderno.
</em></blockquote>
Recordemos a este tandem de superheroes:

<a href="https://scalerablog.files.wordpress.com/2016/05/gnu-and-penguin-color.png"><img class="aligncenter size-medium wp-image-3389" src="https://scalerablog.files.wordpress.com/2016/05/gnu-and-penguin-color.png?w=300" alt="Gnu-and-penguin-color" width="300" height="277" /></a>

Aunque no puede apreciarse en el dibujo, GNU tiene un cinturón en el que oculta un arma muy poderosa: AWK.
Su poder más destacado es el de permitir la creación de scripts que pueden transformar, filtrar, agregar... los datos originados por las salidas de otros mandatos. Convirtiéndose, de esta manera, en una herramienta fundamental para la construcción de scripts de sistema en los que se apoyan nuestras distribuciones y aplicaciones favoritas.

Ejemplo:

<a href="https://scalerablog.files.wordpress.com/2016/05/awk_sample.png"><img class="aligncenter size-full wp-image-3391" src="https://scalerablog.files.wordpress.com/2016/05/awk_sample.png" alt="awk_sample" width="700" height="70" /></a>

Con esta, aparentemente simple, línea hemos escrito un script capaz de indicarnos la memoria total utilizada por los módulos cargados en el sistema. Procesa la salida del comando de listado de módulos y agrega los valores de tamaño en memoria de cada entrada.
<h2>¿Un hueso duro de roer?</h2>
Siendo un lenguaje que aporta una máquina de Turing completa, las aplicaciones de AWK son infinitas. Es capaz de ahorrar horas de trabajo, facilitando la automatización de muchas tareas del sistema pero todo tiene un precio, y en el caso de AWK, el precio es que asusta a los usuarios que acuden por primera vez a él. Para muchos de ellos, se parece más a ...

<a href="https://scalerablog.files.wordpress.com/2016/05/6bkfb7b.png"><img class="aligncenter size-medium wp-image-3392" src="https://scalerablog.files.wordpress.com/2016/05/6bkfb7b.png?w=300" alt="6bkFb7B" width="300" height="179" /></a>

... que a una herramienta para facilitarles la vida. Las 1475 líneas de su entrada en <a href="https://es.wikipedia.org/wiki/Man_(Unix)" target="_blank">Man</a> tampoco suponen una lectura ligera.

Si en esa cabina ponemos a un piloto al que pedirle que nos guíe ¿A que perdemos un poco el miedo?
<blockquote><em>Los DSLs son pequeños y concisos, esto implica que son de gran ayuda ya que guían a sus usuarios a través del proceso de describir acciones</em></blockquote>
Si, parece que un DSL interno en Scala podría ser de gran utilidad como guía en la utilización de AWK.
<h1>Manos a la obra en la construcción <del>del DSL</del> de Scalawk</h1>
<blockquote><em>La característica más importante de un lenguaje de programación es el nombre...</em>
Donald Erving Knuth</blockquote>
Empecemos por lo más importante, y si tomamos el <em>principio de autoridad</em> como un argumento válido, deberíamos empezar dándole nombre al DSL que vamos a construir.

Queremos componer programas AWK usando un DSL interno en Scala:
<p style="text-align:center;">Scala + AWK = <strong>Scalawk</strong></p>
<p style="text-align:left;">¡Buen comienzo!</p>

<table border="1">
<tbody>
<tr>
<td>Todo el código de Scalawk está disponible en <a href="https://github.com/pfcoperez/scalawk">GitHub</a>:

[code language="bash"]
git clone https://github.com/pfcoperez/scalawk.git
[/code]</td>
</tr>
</tbody>
</table>
<h2 style="text-align:left;">Divide y vencerás</h2>
<a href="https://scalerablog.wordpress.com/2016/04/13/scala-un-lenguaje-para-gobernarlos-a-todos-i/" target="_blank">En la entrega anterior</a> de esta serie de posts llegamos a la conclusión de que la mejor forma de diseñar un DSL es usando el modelo de máquinas de estado. Estas máquinas son fácilmente divisibles en componentes:
<ul>
	<li><strong>Estados</strong> (siendo el estado inicial un caso especial).</li>
	<li><strong>Transiciones </strong>(cambios de estado):
<ul>
	<li>Entradas que provocan la transición.</li>
	<li>Efectos derivados de la transición:
<ul>
	<li>La máquina cambia su estado.</li>
	<li>Laterales: Al margen del cambio de estado, es posible que la transición provoque la generación de salida.</li>
</ul>
</li>
</ul>
</li>
	<li><strong>Alfabeto de la máquina</strong>: Conjunto de entradas válidas.</li>
</ul>
Diseñar y dibujar el diagrama de estados de la máquina, lo cual no es diferente a diseñar la guía interactiva que queremos construir, constituye el 90% del proceso creativo en la creación del DSL. La mayor parte del trabajo restante no es más que elegante y bonita fontanería Scala.

<a href="https://scalerablog.files.wordpress.com/2016/05/machine.png"><img class="aligncenter size-full wp-image-3393" src="https://scalerablog.files.wordpress.com/2016/05/machine.png" alt="machine" width="361" height="553" /></a>

Todas las posibles interacciones del usuario con Scalawk están representadas en el diagrama de estados anterior. Por ejemplo:

[code language="scala"]
lines splitBy arePresentedAs ('c1, 'c2)
[/code]

<a href="https://scalerablog.files.wordpress.com/2016/05/machine_walkthrough.png"><img class="aligncenter size-full wp-image-3394" src="https://scalerablog.files.wordpress.com/2016/05/machine_walkthrough.png" alt="machine_walkthrough" width="451" height="553" /></a>

Esta descomposición y modelado de la máquina de estados nos regala la estructura de paquetes de nuestro proyecto:

<a href="https://scalerablog.files.wordpress.com/2016/05/packages.png"><img class="aligncenter size-full wp-image-3395" src="https://scalerablog.files.wordpress.com/2016/05/packages.png" alt="packages" width="187" height="75" /></a>
<h2>Al grano: O como perder el miedo y disfrutar de la materia prima que nos da Scala</h2>
Los estados, transiciones y elementos auxiliares son entidades definidas dentro de los paquetes descritos más arriba. De hecho, no son más que objetos, clases, métodos y traits Scala.
<h3>Estado inicial</h3>
<a href="https://scalerablog.files.wordpress.com/2016/05/initial_state.png"><img class="aligncenter size-full wp-image-3396" src="https://scalerablog.files.wordpress.com/2016/05/initial_state.png" alt="initial_state" width="92" height="71" /></a>

Como <a href="https://scalerablog.wordpress.com/2016/04/13/scala-un-lenguaje-para-gobernarlos-a-todos-i/" target="_blank">ya sabemos</a>, los estados son objetos. O bien son instancias de clases u objetos singleton. Por otra parte, también hemos vista que la forma correcta de implementar máquinas de estado es hacer que estos estados, en definitiva objetos, sean inmutables. De esa manera, son las transiciones las responsables de generar nuevos estados totalmente nuevos.

El estado inicial, al diferencia del resto de estados, no se genera por medio de una transición. Es el estado actual al iniciar la interacción con el DSL. Esto indica su naturaleza como singleton, la cual queda confirmada definitivamente por el hecho de que no puede existir ninguna otra instancia de él.

[code language="scala"]
object lines extends ToCommandWithSeparator
[/code]

Desde el punto de vista del usuario de Scalawk, este estado inicial debería ser una palabra indicando el comienzo de una frase en el DSL. Esta es otra razón para justificar el que sea implementado como un objeto singleton.

El estado inicial necesita transitar a otro, es por ello por lo que el singleton <em>lines </em>extiende el trait <em>ToCommandWithSeparator. Para</em> no adelantar acontecimientos basta que, por el momento, tengamos en cuenta que <em>ToCommandWithSeparator</em> es un trait que contiene un conjunto de transiciones.
<h3>Estados transitorios y finales</h3>
¡Claro! Los estados son objetos pero... ¿Eso es todo? ¡No!
Hay diferentes tipos de estados. Además, muchos de estos estados son bastante parecidos entre sí y podrían construirse a partir de una plantilla común. Revisemos algunos trucos y consejos para implementarlos.

La clasificación de más alto nivel para los estados no iniciales debería ser la siguiente: <strong>Transitorios </strong>y <strong>finales</strong>.
Conceptualmente, los estados del primer grupo no pueden usarse para generar resultados en tanto que los del segundo sí. Obviamente, esta limitación ocurre igualmente en la implementación de los estados y ello implica que los estados transitorios no pueden generar programas AWK mientras que los finales si.

[caption id="attachment_3397" align="aligncenter" width="107"]<a href="https://scalerablog.files.wordpress.com/2016/05/with_initialprogram_st.png"><img class="aligncenter  wp-image-3397" src="https://scalerablog.files.wordpress.com/2016/05/with_initialprogram_st.png" alt="with_initialprogram_st" width="107" height="76" /></a> Estado no final[/caption]

[caption id="attachment_3398" align="aligncenter" width="114"]<img class="  wp-image-3398 aligncenter" src="https://scalerablog.files.wordpress.com/2016/05/solidcomand_st.png" alt="solidcomand_st" width="114" height="74" /> Estado final[/caption]

En Scalawk, cualquier entidad capaz de generar código AWK, sin importar de que se trate de un programa completo o no, debería extender o mezclarse con el trait <em>AwkElement.</em>

[code language="scala"]
trait AwkElement {
  def toAwk: String
}
[/code]

De este modo, añadimos el método <em>toAwk </em>a dicha entidad. Esto es, le estamos otorgando del punto de entrada por el que la entidad es capaz de proveer código AWK.

A pesar de sus diferencias, prácticamente todos los estados comparten un conjunto común de atributos a partir del cual es posible componer cadenas de texto que contienen mandatos AWK:
<ul>
	<li><b>Opciones de línea de comando</b>, e.j: <em>Token separador (espacio, salto de linea, ...)</em></li>
	<li><strong>Programa inicial: </strong>Instrucciones a ser ejecutadas por AWK antes de empezar a procesar la entrada línea a línea. e.g: <em>Inicializar un contador.</em></li>
	<li><strong>Programa de línea:</strong> Instrucciones que AWK ejecutará para cada una de las líneas de texto de entrada, las mismas instrucciones para todas las líneas. e.j: <em>Imprimir una línea, incrementar un contador o acumulador, etc</em><em>.</em></li>
	<li><strong>Programa final:</strong> Programa a ejecutar una vez que toda la entrada ha sido procesada, esto es, después de que el <em>programa de línea</em><em> </em>se haya ejecutado para todas y cada una de las líneas de entrada. e.j: <em>Imprimir el valor de los contadores.</em></li>
</ul>
En cada estado estos atributos pueden estar vacíos o no y, cuando se le pide a un estado final que genere un programa AWK, dichos atributos se utilizarán para generar el resultado en formato de cadena de texto.

[code language="scala"]
abstract class AwkCommand protected(
  private[scalawk] val commandOptions: Seq[String] = Seq.empty,
  private[scalawk] val linePresentation: Seq[AwkExpression] = Seq.empty,
  private[scalawk] val lineProgram: Seq[SideEffectStatement] = Seq.empty,
  private[scalawk] val initialProgram: Seq[SideEffectStatement] = Seq.empty,
  private[scalawk] val endProgram: Seq[SideEffectStatement] = Seq.empty
) {
  def this(prev: AwkCommand) = this(
    prev.commandOptions,
    prev.linePresentation,
    prev.lineProgram,
    prev.initialProgram,
    prev.endProgram
  )
}
[/code]

Hasta el momento sabemos de los estados no iniciales que:
<ul>
	<li>Siempre contienen las piezas constituyentes de un resultado e inicialmente adquieren los valores de estas piezas a partir del estado que les precede: Por tanto, <strong>han de extender la clase abstracta <em>AwkCommand</em></strong>.</li>
	<li>Muy probablemente, añadan o cambien alguna de estas piezas de información: En ese caso, <strong>han de sobreescribir todos o algunos de los atributos de  <strong><em>AwkCommand.</em></strong></strong></li>
	<li>De forma opcional, pueden <strong>transitar</strong> a otro estado: En cuyo caso, <strong>han de ofrecer al menos un método cuyo valor de retorno sea del tipo del estado destino. </strong>También podrían mezclar sus clases con algún trait de familia o conjunto de transiciones.</li>
</ul>
Surge la pregunta<em> </em>¿Por<em> AwkCommand </em>es una clase abstracta y no un trait?
Bien, el objetivo de <em>AwkCommand</em> es proveer código reutilizable para garantizar la continuidad. Es decir, proveer un constructor para construir nuevos estados a partir del que les precede (parámetro <em>prev</em>). Gracias a este constructor, el código de cada clase de estado queda reducido a tan sólo la definición de sus transiciones y sobreescrituras de los atributos heredados de <em>AwkCommand </em>(únicamente cuando estos atributos han de cambiar al transitar al nuevo estado).

Obviamente, la única forma de proveer un constructor en una jerarquía de clases es por medio de una clase, no hay ningún problema si esta clase no debe ser instanciada: Basta con hacerla abstracta.

<a href="https://scalerablog.files.wordpress.com/2016/05/abstract_with_constructor.jpg"><img class="aligncenter size-medium wp-image-3399" src="https://scalerablog.files.wordpress.com/2016/05/abstract_with_constructor.jpg?w=300" alt="abstract_with_constructor" width="300" height="300" /></a>

[code language="scala"]
class CommandWithLineProgram(
                              statements: Seq[SideEffectStatement]
                            )(prev: AwkCommand) extends AwkCommand(prev)
  with ToSolidCommand {

  override private[scalawk]val lineProgram: Seq[SideEffectStatement] = statements

}
[/code]

La clase<em> CommandWithLineProgram</em> se corresponde con un estado no final y por ello no mezcla el trait <em>AwkElement</em>.

[code language="scala"]
//This is the first state which can be used to obtain an AWK command string `toAwk`
class SolidCommand(val lineResult: Seq[AwkExpression], prevSt: AwkCommand) extends AwkCommand(prevSt)
  with AwkElement
  with ToCommandWithLastAction {
 ...
 ...
 ...
}
[/code]

En cambio, <em>SolidCommand representa un estado final</em> y ha de proporcionar una implementación del método <em>toAwk</em>:

[code language="scala"]
 // AWK Program sections

// BEGIN
protected def beginBlock: String = programToBlock(initialProgram)

// Per-line
protected def eachLineActionBlock: String =
programToBlock(lineProgram ++ linePresentation.headOption.map(_ =&gt; Print(linePresentation)))


// END
protected def endBlock: String = programToBlock(endProgram)

protected def programToBlock(program: Seq[SideEffectStatement]) =
{program.map(_.toAwk) mkString &quot;; &quot;} +
program.headOption.map(_ =&gt; &quot;; &quot;).getOrElse(&quot;&quot;)

protected def optionsBlock: String =
{commandOptions mkString &quot; &quot;} + commandOptions.headOption.map(_ =&gt; &quot; &quot;).getOrElse(&quot;&quot;)

override def toAwk: String =
s&quot;&quot;&quot;|awk ${optionsBlock}'
|${identifyBlock(&quot;BEGIN&quot;, beginBlock)}
|${identifyBlock(&quot;&quot;, eachLineActionBlock)}
|${identifyBlock(&quot;END&quot;, endBlock)}'&quot;&quot;&quot;.stripMargin.replace(&quot;\n&quot;, &quot;&quot;)

//Auxialiary methods
private[this] def identifyBlock(blockName: String, blockAwkCode: String): String =
blockAwkCode.headOption.map(_ =&gt; s&quot;$blockName{$blockAwkCode}&quot;).getOrElse(&quot;&quot;)
[/code]

La jerarquía de clases presentada posibilita la reutilización. Por ejemplo, <em>SolidCommandWithLastAction </em>es prácticamente una copia de <em>SolidCommand </em>y nada nos impide que extendamos esta segunda clase a la hora de definir <em>SolidCommandWithLastAction.</em>

[code language="scala"]
class SolidCommandWithLastAction(lastAction: Seq[SideEffectStatement])(prevSt: SolidCommand)
extends SolidCommand(prevSt)
[/code]

En este punto, deberíamos ser capaces de empezar a explorar el <a href="https://github.com/pfcoperez/scalawk" target="_blank">repositorio</a> y asociar cada estado del grafo con su clase correspondiente en el código.
<table class="c2">
<tbody>
<tr class="c7">
<td class="c0" colspan="1" rowspan="1">
<p class="c6"><strong><span class="c11">Nodo en el grafo</span></strong></p>
</td>
<td class="c5" colspan="1" rowspan="1">
<p class="c6"><strong><span class="c11">Entidad</span></strong></p>
</td>
<td class="c8" colspan="1" rowspan="1">
<p class="c6"><strong><span class="c11">¿Es estado final?</span></strong></p>
</td>
<td class="c3" colspan="1" rowspan="1">
<p class="c6"><strong><span class="c11">Tipo de entidad</span></strong></p>
</td>
</tr>
<tr class="c7">
<td class="c0" colspan="1" rowspan="1">
<p class="c6"><span class="c1">init</span></p>
</td>
<td class="c5" colspan="1" rowspan="1">
<p class="c6"><span class="c9">lines</span></p>
</td>
<td class="c8" colspan="1" rowspan="1">
<p class="c6"><span class="c1">No</span></p>
</td>
<td class="c3" colspan="1" rowspan="1">
<p class="c6"><span class="c1">Objeto singleton</span></p>
</td>
</tr>
<tr class="c7">
<td class="c0" colspan="1" rowspan="1">
<p class="c6"><span class="c1">command</span></p>
</td>
<td class="c5 c10" colspan="1" rowspan="1">
<p class="c6"><span class="c10 c14">CommandWithSeparator</span></p>
</td>
<td class="c8" colspan="1" rowspan="1">
<p class="c6"><span class="c1">No</span></p>
</td>
<td class="c3" colspan="1" rowspan="1">
<p class="c6"><span class="c1">Clase</span></p>
</td>
</tr>
<tr class="c7">
<td class="c0" colspan="1" rowspan="1">
<p class="c6"><span class="c1">with line program</span></p>
</td>
<td class="c5" colspan="1" rowspan="1">
<p class="c6"><span class="c9">CommandWithLineProgram</span></p>
</td>
<td class="c8" colspan="1" rowspan="1">
<p class="c6"><span class="c1">No</span></p>
</td>
<td class="c3" colspan="1" rowspan="1">
<p class="c6">Clase</p>
</td>
</tr>
<tr class="c7">
<td class="c0 c10" colspan="1" rowspan="1">
<p class="c6"><span class="c10 c13">with initial program</span></p>
</td>
<td class="c5" colspan="1" rowspan="1">
<p class="c6"><span class="c9">CommandWithInitialProgram</span></p>
</td>
<td class="c8" colspan="1" rowspan="1">
<p class="c6"><span class="c1">No</span></p>
</td>
<td class="c3" colspan="1" rowspan="1">
<p class="c6">Clase</p>
</td>
</tr>
<tr class="c7">
<td class="c0" colspan="1" rowspan="1">
<p class="c6"><span class="c1">solid command</span></p>
</td>
<td class="c5" colspan="1" rowspan="1">
<p class="c6"><span class="c9">SolidCommand</span></p>
</td>
<td class="c8" colspan="1" rowspan="1">
<p class="c6"><span class="c1">Sí</span></p>
</td>
<td class="c3" colspan="1" rowspan="1">
<p class="c6">Clase</p>
</td>
</tr>
<tr class="c7">
<td class="c0" colspan="1" rowspan="1">
<p class="c6"><span class="c1">with last action</span></p>
</td>
<td class="c5" colspan="1" rowspan="1">
<p class="c6"><span class="c9">SolidCommandWithLastAction</span></p>
</td>
<td class="c8" colspan="1" rowspan="1">
<p class="c6"><span class="c1">Sí</span></p>
</td>
<td class="c3" colspan="1" rowspan="1">
<p class="c6">Clase</p>
</td>
</tr>
</tbody>
</table>
<h3></h3>
<h3>Transiciones</h3>
Las transiciones entre estados son bastante más sencillas, son simples métodos que devuelven nuevos estados. Gracias a la notación infija, Scala proporciona la ilusión de estar manejando expresiones en lenguaje natural, tan natural como describir en nuestro idioma humano lo que queremos.

Algunos estados pueden compartir transiciones por lo que una buena idea es agruparlos en traits. Por medio de mixings, los estados pueden usar estos traits de transición como si de piezas de LEGO se tratase para construir sus conjuntos de transiciones.

Hay dos casos especiales que requieren especial atención: <strong>Grupos de transiciones </strong>y <strong>transiciones de entrada vacía.</strong>
<h4>Los grupos de transiciones...</h4>
... están compuestos por transiciones que siempre se agrupan de la misma forma, digamos que son transiciones amigas que jamás se separan, a veces estas transiciones son diferentes versiones de la misma transición y el trait en el que se agrupan suele tomar nombres que encajan en el patrón <em>To&lt;TargetState&gt;.</em>

[code language="scala"]
trait ToCommandWithSeparator {

  def splitBy(separator: String) = new CommandWithSeparator(separator)
  def splitBy(separator: Regex) =  new CommandWithSeparator(separator)

}
[/code]

Este es un caso bastanete evidente de dos versiones de la misma transición: Una en la que recibe una cadena de texto y otra en la que recibe una expresión regular.

<strong><span style="color:#ff0000;">Nótese que</span>, en relación con la máquina abstracta de estados, la entrada es la conjunción del nombre del método de transición y sus parámetros.</strong>
<h4>Transiciones de entrada vacía</h4>
Consideremos la siguiente transición (extraída de la máquina de estados):

<a href="https://scalerablog.files.wordpress.com/2016/05/empty_transition.png"><img class="aligncenter size-full wp-image-3400" src="https://scalerablog.files.wordpress.com/2016/05/empty_transition.png" alt="empty_transition" width="249" height="70" /></a>

Las máquinas de estado pueden transitar con entradas vacías. Esto puede parecer extraño pero es bastante común, tanto que ocurre con Scalawk. Además, no hay problema a la hora de plasmar esto en el modelo que estamos implementando con Scala gracias a las <a href="http://orionsword.no-ip.org/blog/wordpress/?p=600" target="_blank">conversiones implícitas</a>.

Una conversión implícita desde un estado (Fuente) a otro (Objetivo), que se aplica al intentar acceder a uno de los métodos de <em>Objetivo</em> teniendo una instancia de <em>Fuente, </em>será percibida por el usuario del DSL como una transición de entrada vacía. Tan simple como suena.<em> </em>

Es más, basta con definir la conversión implícita en el objeto de compañía de <em>Fuente </em>o en el de <em>Objetivo  </em>para  que esté disponible en el ámbito de la sentencia en la que la transición de entrada vacía ocurre. Sin necesidad de <em>import</em>s explícitos, esto es: De forma TOTALMENTE TRANSPARENTE para el usuario.

Así, el siguiente código:

[code language="scala"]
object ToCommandWithSeparator {
  implicit def toCommandWithSep(x: ToCommandWithSeparator) = new CommandWithSeparator()
}
[/code]

... activa la transición descrita en el diagrama presentado a continuación:

<a href="https://scalerablog.files.wordpress.com/2016/05/empty_transition2.png"><img class="aligncenter size-full wp-image-3401" src="https://scalerablog.files.wordpress.com/2016/05/empty_transition2.png" alt="empty_transition2" width="203" height="71" /></a>
<blockquote><img class="  wp-image-3944 aligncenter" src="https://scalerablog.files.wordpress.com/2016/05/vvqnk6o.jpg" alt="VvqNk6o" width="399" height="257" />
- Si <em>ToCommandWithSeparator</em> es un trait de familia de transiciones, el objeto homónimo (del snippet de código anterior) ¿No es el objeto de compañía de un trait de familia de transiciones? ¿No hemos dicho que la conversión implícita ha de estar definida en el objeto de compañía de <em>Fuente </em>u <em>Objetivo </em>y, por tanto, en el objeto de compañía de una clase de <strong>estado</strong>?

- ¡Y así es! ¿Cual es el fin de <em>ToCommandWithSeparator</em> si no ser mezclado en una clase de estado?</blockquote>
En Scala, las conversiones implícitas definidas en el objeto de compañía de un trait aplicarán también a las clases que mezclen o extiendan ese trait y estarán disponibles en todos los scopes en los que la clase esté disponible. Esto, además de ser extremadamente útil para casos como el que nos ocupa, encaja con el sentido común: Se entiende que dicha clase es un sub-tipo del trait.

Por ejemplo, si declaramos los traits <em>T </em>y <em>S</em>, con objetos de compañía en los que  hay conversiones implícitas a <em>D </em>y <em>E </em>respectivamente:

[code language="scala"]
case class E(x: Int)
case class D(x: Int)

trait T
object T { implicit def toD(from: T): D = D(1) }

trait S
object S { implicit def toE(from: S): E = E(2) }
[/code]

Para luego mezclarlos en en una tercera clase <em>C...</em>

[code language="scala"]
case class C() extends T with S
[/code]

... entonces, cualquier instancia de C puede implícitamente convertirse en instancias de <em>E</em> o <em>D</em>:

[code language="scala"]
scala&gt; val c: C = C()
c: C = C()

scala&gt; val d: D = c
d: D = D(1)
scala&gt; val e: E = c
e: E = E(2)
[/code]
<h3>Expresiones</h3>
La mayor parte de las transiciones posibles en Scalawk encajan con el patrón <em>transición + valor de tipo básico.
</em>Pero algunas de ellas reciben expresiones, identificadores o sentencias. Estos son valores de tipos creados ad-hoc para expresar instrucciones y valores internos al lenguaje AWK. Ergo, los detalles acerca de estos tipos no deberían formar parte de una guía genérica para la creación de DSLs. Aún así, las construcciones Scala detrás de estos tipos son muy comunes en el universo de los DSLs creados a partir de Scala y merece la pena mencionarlas, al menos de forma superficial.
<h4>Identificadores (internos) en Scalawk</h4>
Algunas expresiones de este DSL, como <em>arePresentedAs</em>, necesitan hacer referencia a variables dentro del programa AWK, declaradas previamente por medio de otra expresión del DSL. Se podrían usar cadenas de texto para representar estos identificadores internos. Tener que envolver los identificadores en comillas dobles es lanzar una jarra de agua fría sobre la experiencia del usuario, haciéndole consciente del hecho de que, realmente, está utilizando Scala en vez de un lenguaje de dominio.

Scala ofrece un mecanismo para obtener objetos <a href="http://www.scala-lang.org/api/2.11.8/#scala.Symbol" target="_blank">únicos para cadenas iguales</a>. Y es eso, precisamente, lo que un buen identificador interno al DSL necesita.

Si alguien escribe:

[code language="scala"]
'counter
[/code]

... obtendrá una referencia a una instancia de la clase <em>Symbol. </em>Esta clase tiene un atributo nombre gracias al cual, su usuario puede recuperar la cadena de texto que se utilizó para obtener la instancia.

De esta forma,  el usuario escribiría <em>'counter </em>y del desarrollador del DSL podría contar con obtener la cadena<em> counter </em>y usarla para la representación interna de, en este caso, la variable de AWK.
<h4>Sentencias</h4>
Mediante la combinación de los identificadores internos (arriba descritos) con clases ad-hoc y conversiones implícitas es relativamente sencillo expresar sentencias de asignación e incluso expresiones algebraicas.

[code language="scala"]
's := 's + 1
[/code]

Este artículo está empezando a alargarse y, con las pistas y trucos que hemos ido desarrollando a lo largo de las secciones anteriores, es posible entender el código de Scalawk dedicado a la construcción de este tipo de expresiones. Ese código se encuentra dentro del paquete <a href="https://github.com/pfcoperez/scalawk/tree/master/src/main/scala/org/pfcoperez/scalawk/entities">entities</a>. Ese paquete puede verse como otro DSL embebido en Scalawk ¡Sí! un DSL dentro de otro DSL que, por último, se encuentra embebido en Scala
<h1>Divagaciones finales</h1>
Nadie dijo que desarrollar DSLs internos fuese pan comido. Es fácil hacer que el usuario se despierte del sueño de estar usando un lenguaje diseñado desde el principio para él/ella. Esto ocurre cuando se encuentra con construcciones que, sin motivo evidente, no deberían ser ser como son si no fuese porque pertenecen al lenguaje que alberga al DSL.

<a href="https://scalerablog.files.wordpress.com/2016/05/scala_has_you.png"><img class="aligncenter size-full wp-image-3402" src="https://scalerablog.files.wordpress.com/2016/05/scala_has_you.png" alt="scala_has_you" width="384" height="113" /></a>

Es común encontrar obstáculos en el camino al intentar reproducir la máquina de estados de forma fidedigna. La tentación a abondar el modelo puede llegar a ser irresistible. Creedme cuando os digo que esta es una actividad compleja en la que, si abandonáis la calzada de adoquines que proporciona el modelo de máquina de estados, los ogros del bosque del "todo vale" devorarán vuestros corazones antes de que os deis cuenta.

Scala ha probado su valía a la hora de ofrecer soluciones a los baches y obstáculos en el camino de las máquinas de estado, salid de este e intentad sobrevivir en un campo de minas.

Como último consejo, os recomiendo que compréis pizarras, cuadernos, piedras y cinceles... cualquier cosa con la que os sintáis cómodos dibujando grafos.

Estos son dos bocetos de un incipiente Scalawk:

<a href="https://scalerablog.files.wordpress.com/2016/05/whiteboard.jpg"><img class="aligncenter size-medium wp-image-3403" src="https://scalerablog.files.wordpress.com/2016/05/whiteboard.jpg?w=225" alt="whiteboard" width="225" height="300" /></a>

<a href="https://scalerablog.files.wordpress.com/2016/05/notebook.jpg"><img class="aligncenter size-medium wp-image-3404" src="https://scalerablog.files.wordpress.com/2016/05/notebook.jpg?w=238" alt="notebook" width="238" height="300" /></a>

¡Pensad! ¡Dibujad! ¡Pensad de nuevo! Así seréis mejores arquitectos de DSL que este...
<a href="https://scalerablog.files.wordpress.com/2016/05/be-21-architect.jpg"><img class="aligncenter  wp-image-3405" src="https://scalerablog.files.wordpress.com/2016/05/be-21-architect.jpg?w=300" alt="BE-21-architect" width="388" height="219" /></a>

... y vuestros Neo(s) nunca despertarán.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3420</wp:post_id>
  <wp:post_date>2016-05-25 12:00:41</wp:post_date>
  <wp:post_date_gmt>2016-05-25 10:00:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scala-un-lenguaje-para-gobernarlos-a-todos-ii</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/735410409545420800";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[23163076522]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Recursion recursive recursively.</title>
  <link>https://scalerablog.wordpress.com/2016/05/23/3952/</link>
  <pubDate>Mon, 23 May 2016 10:00:05 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=3952</guid>
  <description/>
  <content:encoded><![CDATA[<p style="text-align:justify;">Today we will discuss about recursion. Don't you know what is the recursion? Don't worry, now we are going to talk about recursion. Don't you know what is the recursion? Don't worry, now we are going to talk about recursion. Don't you know what is the recursion?  Don't worry, now we are going to talk about recursion. Do .... Well, as a joke it's ok :)</p>
<p style="text-align:justify;">Because Scala is a language that, despite being object-oriented, its true potential lies largely in its functional part, it is normal that recursion has a special importance. However, even more important, it is to generate the recursive calls properly to not have a stack overflow.</p>

<blockquote>
<p style="text-align:justify;">Stack Overflow: plus a pretty famous page, is what happens when we perform many recursive calls and, in consequence, the stack memory is overflowed.</p>
</blockquote>
<img class="  wp-image-2830 aligncenter" src="https://scalerablog.files.wordpress.com/2016/05/szpjhwz.jpg" alt="szpjhwz" width="203" height="267" />
<p style="text-align:justify;">In order to generate recursive calls properly it is necessary that the function will be <strong>tail-recursive</strong>. This means that the function needn't to stored in memory the result of the recursive call. Thus, a stack overflow is not triggered. It can also be seen as a recursive function when the function only calls itself with different arguments. Examples of functions that do not meet the tail-recursive condition are those in which operations are performed with the results of the recursive calls. For example, the factorial function encoded on this way:</p>
[code language="scala"]
def factorial(n: Int): Int =
  if (n &lt;= 1) 1
  else n * factorial(n - 1)
[/code]
<p style="text-align:justify;">because the call is multiplied by n, it will not perform a tail-recursive recursion.</p>
<p style="text-align:justify;"><strong>And how do you know if a function is tail-recursive?</strong> Scala makes the whole thing easy. We can add the tailRecursive annotation in this function so that if it has not been written on a tail-recursive way, Scala return us a compilation error. The compiler makes the work for us :)</p>
<p style="text-align:justify;">Let's see how we can build a function which returns the element n of the Fibonacci sequence (a tipical example). First without tail-recursive:</p>
[code language="scala"]
@annotation.tailrec
def fibonacci(n : Int) : Int = n match {
  case 0 | 1 =&gt; n
  case _ =&gt; fibonacci( n-1 ) + fibonacci( n-2 )
}
[/code]

This returns a compilation error like this:
<blockquote><em>"could not optimize @tailrec annotated method fibonacci: it contains a recursive call not in tail position"</em></blockquote>
<p style="text-align:justify;">However, if we think a little more we can get it a function much efficient :)</p>
[code language="scala"]
def fibonacci(n: Int): Int = {

  @annotation.tailrec
  def loop(i: Int, previous: Int, current: Int): Int =
    if (i == 0) previous
    else loop(i - 1, current, previous + current)

  loop(n, 0, 1)
}
[/code]
<p style="text-align:justify;">In this case there will be no compilation error.</p>
<img class="  wp-image-2831 aligncenter" src="https://scalerablog.files.wordpress.com/2016/05/28b5865ebe59280d5c3ed18fc1147964309d9d0c81663c0c3f81d42fc5979c8f.jpg" alt="28b5865ebe59280d5c3ed18fc1147964309d9d0c81663c0c3f81d42fc5979c8f" width="382" height="247" />
<p style="text-align:justify;">And that's all. And that's all. And that's ...</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3952</wp:post_id>
  <wp:post_date>2016-05-23 12:00:05</wp:post_date>
  <wp:post_date_gmt>2016-05-23 10:00:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>3952</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="recursive"><![CDATA[recursive]]></category>
  <category domain="post_tag" nicename="stackoverflow"><![CDATA[stackoverflow]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[23091136095]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/734685477442228224";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Scala: Interpretación de código en runtime</title>
  <link>https://scalerablog.wordpress.com/2016/06/15/scala-interpretacion-de-codigo-en-runtime/</link>
  <pubDate>Wed, 15 Jun 2016 10:00:04 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=3970</guid>
  <description/>
  <content:encoded><![CDATA[En el post de hoy vamos a ver cómo generar código de Scala al vuelo: en tiempo de runtime. Hemos de ser cautos de no confundirlo con las macros de Scala, las cuales generan código en tiempo de compilación. Estas últimas hacen uso del sistema de tipos de Scala, lo cual es infinitamente más seguro que generar código en tiempo de ejecución.  

<a href="https://scalerablog.files.wordpress.com/2016/06/house-of-cards-but-why.gif"><img src="https://scalerablog.files.wordpress.com/2016/06/house-of-cards-but-why.gif" alt="House-of-cards-but-why" width="500" height="200" class="aligncenter size-full wp-image-4155" /></a>

¿Cúando es útil hacer uso de este mecanismo entonces? Trataremos de arrojar luz siguiendo un ejemplo muy sencillo, abstrayéndonos de la verdadera implementación, la cual podéis encontrar en <a href="https://github.com/Scalera/runtime-reflect-handson" target="_blank">el Github de Scalera</a>

<h2>El problema: "el" serializador</h2>

Supongamos un caso (no tan descabellado) en el que queramos comunicar dos servicios vía un bus de eventos (nos abstraeremos de la implementación: podría ser una cola de mensajes tipo Kafka, un stream de Akka, ...). 

El punto de partida es el siguiente: 

<a href="https://scalerablog.files.wordpress.com/2016/06/sender-receiver-schema.png"><img src="https://scalerablog.files.wordpress.com/2016/06/sender-receiver-schema.png" alt="Sender-receiver-schema" width="612" height="367" class="aligncenter size-full wp-image-4148" /></a>

El productor sabe enviar y el consumidor tiene asociado un callback para cuando llegue un mensaje:

[code language="scala"]
trait Producer{
  def produce(message: Any): Try[Unit]
}
trait Consumer{
  val consume: Any =&gt; Unit
}
[/code]

Tanto el servicio productor como el consumidor conocen los tipos de mensajes que pueden llegar, en nuestro ejemplo serán estos:

[code language="scala"]
case class Foo(att1: Int, att2: String)
case class Bar(att1: String)
[/code]

Si el servidor quiere enviar un mensaje usando el bus de eventos, deberá serializarlo de alguna forma (JSON, array de bytes, XML, ...) para que, al llegar al otro extremo, el consumidor realice el proceso inverso (deserialización) y obtenga el mensaje original.

...hasta aquí nada extraño.

<a href="https://scalerablog.files.wordpress.com/2016/06/whydoeseverythinghavetobesocomplicated.gif"><img src="https://scalerablog.files.wordpress.com/2016/06/whydoeseverythinghavetobesocomplicated.gif" alt="Whydoeseverythinghavetobesocomplicated" width="500" height="269" class="aligncenter size-full wp-image-4151" /></a>

Si tenemos un serializador para JSONs ...

[code language="scala"]
trait JsonSer[T] {
  def serialize(t: T): String
  def deserialize(json: String): T
}
[/code]

y serializamos nuestro mensaje...

[code language="scala"]
implicit val fooSerializer: JsonSer[Foo] = ???
val foo: Foo = ???
producer.send(implicitly[JsonSer[Foo]].serialize(foo))
[/code]

¿Cómo sabemos qué deserializador usar cuando el consumidor reciba el mensaje?

<h2>Opción 1: Probar con todos hasta que uno encaje</h2>

En nuestro consumidor tendríamos:

[code language="scala"]
lazy val consumer = new Consumer {
  override val consume: Any =&gt; Unit = {
    case message: String =&gt;
      Seq(barSerializer, fooSerializer).flatMap { ser =&gt;
        Try(ser.deserialize(message)).toOption
      }.headOption.fold(ifEmpty = println(&quot;Couldn't deserialize&quot;)) {
        case bar: Bar =&gt; println(&quot;it's a bar!&quot;)
        case foo: Foo =&gt; println(&quot;it's a foo!&quot;)
        case _ =&gt; println(&quot;it's ... something!&quot;)
      }
  }
}
[/code]

Un poco burdo, ¿no? Si el serializador correcto es el último de 100, estaríamos probando y fallando con 99 antes de dar con el correcto (¡qué desperdicio de CPU!).

<a href="https://scalerablog.files.wordpress.com/2016/06/4d8.gif"><img src="https://scalerablog.files.wordpress.com/2016/06/4d8.gif" alt="4d8" width="473" height="261" class="aligncenter size-full wp-image-4152" /></a>

Además, también podría darse el caso de que hubiera un deserializador para otro tipo, pero que encaja y es capaz de deserializar parcial o erróneamente el mensaje. 

<h2>Opción 2: Añadir el tipo al mensaje</h2>

Podríamos añadir una capa por encima al mensaje e indicar el tipo de mensaje que es. Así, al recibirlo, podríamos determinar el tipo de serializador que necesitamos usar.

<a href="https://scalerablog.files.wordpress.com/2016/06/messagewrapper.png"><img src="https://scalerablog.files.wordpress.com/2016/06/messagewrapper.png?w=300" alt="MessageWrapper" width="300" height="220" class="aligncenter size-medium wp-image-4149" /></a>

Para escribir el tipo, nos apoyaremos en los <code>TypeTag</code> de Scala, obteniendo información sobre el tipo de mensaje contenido T.

[code language="scala"]

//Wrapper for the message (and its serializer)

import scala.reflect.runtime.universe.{TypeTag, typeTag}

case class Message[T: TypeTag](content: T){
  val messageType: Message.Type = typeTag[T].tpe.toString
}
object Message {

  type Type = String

  def typeFrom(msg: String): Message.Type = ???

  implicit def messageSer[T:TypeTag:JsonSer]: JsonSer[Message[T]] = ???

}

//We'll make use of it for sending

producer.produce(messageSer[Foo].serialize(Message(foo)))

//And we redefine the consumer

lazy val consumer = new Consumer {
    override val consume: Any =&gt; Unit = {
      case message: String =&gt;
        Message.typeFrom(message) match {

          case &quot;org.scalera.reflect.runtime.Bar&quot; =&gt;
            println(&quot;it's a bar!&quot;)
            val value = messageSer[Bar].deserialize(message).content
            println(value.att1)

          case &quot;org.scalera.reflect.runtime.Foo&quot; =&gt;
            val value = messageSer[Foo].deserialize(message).content
            println(&quot;it's a foo!&quot;)
            println(value.att2)

          case _ =&gt;
            println(&quot;it's ... something!&quot;)
        }
    }
  }
[/code]

Cómo podéis ver, ya no tenemos que ir probando con todos los serializadores posibles hasta que demos con uno que funcione; sino que, a partir del tipo de mensaje (extraido del envoltorio de tipo Message que hemos añadido), somos capaces de usar el deserializador adecuado.

Pero también es cierto, que tenemos que añadir un case por cada string que representa el tipo. ¿No sería mejor poder deserializar (como sea) y que el <strong>case</strong> solo esté definido sobre los objetos ya deserializados (como antes pero sin probar a lo loco con mil serializadores)? Algo de este estilo:

[code language="scala"]
lazy val consumer = new Consumer {
  override val consume: Any =&gt; Unit = { msg =&gt;
    genericDeserialize(msg) match {
      case f: Foo =&gt;
      case b: Bar =&gt;
      case _ =&gt;
    }
  }
}
[/code]

<h2>Opción 2-guay: Serializadores 'under the hood'</h2>

Para conseguir algo parecido, debemos de centrarnos en ese método <code>genericDeserialize</code>: ¿qué signatura debería tener? Inicialmente algo del siguiente estilo:

[code language="scala"]
def genericDeserialize(msg: String): Any
[/code]

¿Un <code>Any</code>? ¿En serio? Amigos, en tiempo de runtime, no tenemos ni idea del tipo que nos puede llegar. Solo sabemos que, a partir de un String, vamos a obtener un 'algo'. El <code>match</code> que se aplica sobre dicho Any nos permitirá pasar de algo totamente abstracto a tipos más concretos.

Es en este punto, donde entra en juego la librería de reflect y el compilador de scala.

<h3>reflect.Toolbox</h3>

La api de <code>Toolbox</code> permite parsear cadenas de texto y obtener el AST (abstract syntax tree) resultante. Del mismo modo, a partir del AST es capaz de evaluar la expresión devolviendo una instancia de un tipo determinado.

Para poder instanciar un Toolbox y usar referencias a tipos, es preciso añadir como dependencias a nuestro proyecto las librerías de <code>scala-compiler</code> y <code>scala-reflect</code>:

[code language="scala"]
libraryDependencies ++= Seq(
  &quot;org.scala-lang&quot; % &quot;scala-compiler&quot; % &quot;2.11.8&quot;,
  &quot;org.scala-lang&quot; % &quot;scala-reflect&quot; % &quot;2.11.8&quot;)
[/code]

Si por ejemplo quisiéramos parsear la operación <code>"2".toInt + 4</code>,

[code language="scala"]
import scala.tools.reflect.ToolBox
import scala.reflect.runtime.{universe =&gt; ru}
import ru._

//  Scala compiler tool box
val tb = ru.runtimeMirror(
  this.getClass.getClassLoader).mkToolBox()

println(ru.showRaw(tb.parse(&quot;&quot;&quot;&quot;2&quot;.toInt + 4&quot;&quot;&quot;)))
[/code]

nos devolverá el árbol sintáctico generado como un string (usando <code>showRaw</code>):

[code language="scala"]
Apply(Select(Select(Literal(Constant(&quot;2&quot;)), TermName(&quot;toInt&quot;)), TermName(&quot;$plus&quot;)), List(Literal(Constant(4))))
[/code]

Si a partir de la expresión parseada, usamos el toolbox para evaluarla,

[code language="scala"]
println(tb.eval(tb.parse(&quot;&quot;&quot;&quot;2&quot;.toInt + 4&quot;&quot;&quot;)))
[/code]

obtendremos un Any que representa el valor resultante de la suma:

[code]
6
[/code]

<h3>"El" serializador</h3>

Una vez visto el funcionamiento general, aplicamos el mismo principio a nuestro serializador, de manera que la expresión que vamos a intentar interpretar es algo similar a:

[code language="scala"]
{
  import scala.reflect._;
  import spray.json._;
  import org.scalera.reflect.runtime._;
  import MySprayJsonImplicits._;
  import MyJsonSerImplicits._;

  implicitly[JsonSer[Message[$messageType]]]
}
[/code]

donde <code>MySprayJsonImplicits</code> y <code>MyJsonSerImplicits</code> representan los objetos que contienen tanto los implícitos de Spray para JsonFormat que hemos definido, como los implícitos de la type class JsonSer que hemos definido nosotros.

<code>$messageType</code> representa el tipo concreto a deserializar que habremos obtenido previamente usando el TypeTag (como hemos visto antes).

Si lo adaptamos a nuestro código obtendremos algo similar a:

[code language="scala"]
object GenSer {

  import scala.tools.reflect.ToolBox
  import scala.reflect.runtime.{universe =&gt; ru}
  import ru._

  //  Scala compiler tool box
  private val tb = ru.runtimeMirror(this.getClass.getClassLoader).mkToolBox()

  def genericDeserialize(msg: String)(serContainers: Seq[AnyRef]): Any = {

    val messageType = Message.typeFrom(msg)

    val serContainersImport = serContainers.map(container =&gt;
      &quot;import &quot; + container.toString.split(&quot;\\$&quot;).head + &quot;._&quot;).mkString(&quot;;\n&quot;)

    val expr =
      s&quot;&quot;&quot;
         |{
         |  import scala.reflect._;
         |  import spray.json._;
         |  import org.scalera.reflect.runtime._;
         |  $serContainersImport;
         |
         |  implicitly[JsonSer[Message[$messageType]]]
         |}
        &quot;&quot;&quot;.stripMargin

    tb.eval(tb.parse(expr))
      .asInstanceOf[JsonSer[Message[Any]]]
      .deserialize(msg).content
  }

}
[/code]

Si os fijáis, hemos permitido en la notación del método de deserialización genérica, que se le pase una secuencia de objetos a importar, de manera que no se explicita qué objeto es el que contiene los implícitos de Spray y qué otro contiene los de nuestro <code>JsonSer</code>.

[code language="scala"]
val serContainersImport = serContainers.map(container =&gt;
  &quot;import &quot; + container.toString.split(&quot;\\$&quot;).head + &quot;._&quot;).mkString(&quot;;\n&quot;)
[/code]

También cabe destacar que, al deserializar, obtenemos un Message[Any]; por lo que posteriormente hay que obtener el campo 'content' que representa el valor plano de tipo Any que representa el mensaje deserializado.

<h2>El resultado</h2>

Ahora sí, podemos usar nuestra función para deserializar de manera genérica y dejar el código de nuestro consumidor de manera 'reshulona':

[code language="scala"]
lazy val consumer = new Consumer {
  override val consume: Any =&gt; Unit = { 
    case msg: String =&gt;
      genericDeserialize(msg)(Seq(case3,Message)) match {
        case bar: Bar =&gt; println(&quot;it's a bar!&quot;)
        case foo: Foo =&gt; println(&quot;it's a foo!&quot;)
        case _ =&gt; println(&quot;it's ... something!&quot;)
      }
  }
}
[/code]

<h2>Conclusiones</h2>

Poder interpretar código en tiempo de runtime da bastante juego cuando queremos interpretar tipos en base a String's. Ahora bien, interpretar código en runtime se pasa por el forro el sistema de tipos que tanta seguridad aporta en Scala, por lo que son herramientas a usar con algo de cuidado.

También es algo costoso en tiempo la evaluación de estas expresiones. Os recomendaría que usarais una cache de tipos. Algo tan sencillo como un mapa:

[code language="scala"]
type TypeName = String
var cache: Map[TypeName, JsonSer[Message[_]]]
[/code]

Y al ejecutar el método, comprobar si existe ya un JsonSer almacenado en el mapa. De ser así, usamos ese y en caso contrario, lo creamos, lo almacenamos en la caché y lo devolvemos como resultado.

<a href="https://scalerablog.files.wordpress.com/2015/06/post-28553-steve-jobs-mind-blown-gif-hd-t-pvbd.gif"><img src="https://scalerablog.files.wordpress.com/2015/06/post-28553-steve-jobs-mind-blown-gif-hd-t-pvbd.gif" alt="post-28553-Steve-Jobs-mind-blown-gif-HD-T-pVbd" width="350" height="233" class="aligncenter size-full wp-image-466" /></a>

Easy peasy...
¡Agur de limón!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3970</wp:post_id>
  <wp:post_date>2016-06-15 12:00:04</wp:post_date>
  <wp:post_date_gmt>2016-06-15 10:00:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scala-interpretacion-de-codigo-en-runtime</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="code"><![CDATA[code]]></category>
  <category domain="post_tag" nicename="compiler"><![CDATA[compiler]]></category>
  <category domain="post_tag" nicename="generation"><![CDATA[generation]]></category>
  <category domain="post_tag" nicename="generic"><![CDATA[generic]]></category>
  <category domain="post_tag" nicename="json"><![CDATA[json]]></category>
  <category domain="post_tag" nicename="macros"><![CDATA[macros]]></category>
  <category domain="post_tag" nicename="reflect"><![CDATA[reflect]]></category>
  <category domain="post_tag" nicename="reflection"><![CDATA[reflection]]></category>
  <category domain="post_tag" nicename="runtime"><![CDATA[runtime]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="serializer"><![CDATA[serializer]]></category>
  <category domain="post_tag" nicename="spray"><![CDATA[spray]]></category>
  <category domain="post_tag" nicename="toolbox"><![CDATA[toolbox]]></category>
  <category domain="post_tag" nicename="type"><![CDATA[type]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>draftfeedback_requests</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:19:"pfcoperez@gmail.com";a:3:{s:3:"key";s:13:"575564800fd5d";s:4:"time";s:10:"1465214080";s:7:"user_id";s:8:"59615419";}s:13:"576108ac2434c";a:3:{s:3:"key";s:13:"576108ac2434c";s:4:"time";s:10:"1465977004";s:7:"user_id";s:8:"59615419";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[23854653581]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/743020720880386048";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>132</wp:comment_id>
    <wp:comment_author><![CDATA[luis dipotet]]></wp:comment_author>
    <wp:comment_author_email>ldipotet.job@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://mojitoverde.blogspot.com</wp:comment_author_url>
    <wp:comment_author_IP>62.83.45.91</wp:comment_author_IP>
    <wp:comment_date>2016-09-07 17:09:32</wp:comment_date>
    <wp:comment_date_gmt>2016-09-07 15:09:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Lo cierto es que no se porque complicarse tanto. Solucionarias todo creando valores implicitos y con las librerias de play podrias serializar/deserializar los objetos (cuando hablemos de JSON,por ejemplo)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1473260973.5181419849395751953125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1473261038</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1473261038</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1473261038.1803989410400390625;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>133</wp:comment_id>
    <wp:comment_author><![CDATA[jpaniego]]></wp:comment_author>
    <wp:comment_author_email>javiersantospaniego@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>83.47.209.241</wp:comment_author_IP>
    <wp:comment_date>2016-09-07 17:15:56</wp:comment_date>
    <wp:comment_date_gmt>2016-09-07 15:15:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hola Luis,

La verdad es que en el escenario propuesto (bastante común por otra parte), el mensaje que recibe el consumidor es solamente un String. Para determinar qué tipo de deserializador tienes que usar, debes examinar el valor recibido, la instancia (es decir, se trata de una comprobación en runtime), mientras que la resolución de implícitos está ligada al sistema de tipos de Scala y, por tanto, se resuelve en tiempo de compilación.

¡Un saludo y gracias por tu comentario!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>132</wp:comment_parent>
    <wp:comment_user_id>59615419</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1473261356.0600440502166748046875;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1473261356</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1473261356</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Grafitti Rules: jugando con JSON [Snow]</title>
  <link>https://scalerablog.wordpress.com/2016/06/08/grafitti-rules-spray-json/</link>
  <pubDate>Wed, 08 Jun 2016 15:00:40 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=4087</guid>
  <description/>
  <content:encoded><![CDATA[<p style="text-align:justify;">Hace ya unos meses hablamos de <a href="https://scalerablog.wordpress.com/2016/01/27/graffiti-rules-hello-word-con-spray/">Spray</a>, un toolkit que nos permitía construir API's REST de una forma sencilla con un DSL bastante completo.</p>
<p style="text-align:justify;">Uno de los componentes que forman el toolkit es spray-json. Con este modulo podemos serializar y deserializar nuestros objetos a un formato JSON. Hoy vamos a ver como trabajar con él de forma muy rápida y sencilla.</p>
<p style="text-align:justify;">¿Cómo crear los serializadores de las distintas clases? Pues existen dos opciones en función de cómo esté definida la clase que queramos serializar.</p>
<strong>Opción fácil: </strong>cuando tenemos una case class
<p style="text-align:justify;">Esto está tirado. Lo único que tenemos que utilizar es el método <em>jsonFormatN</em>() donde N representa el número de argumentos que tiene el método apply de la case class. Veamos un ejemplo:</p>
[code language="scala"]
case class Character(name: String, family: String, isDead: Boolean)

object MyJsonProtocol extends DefaultJsonProtocol {

 implicit val characterFormat = jsonFormat3(Character.apply)

}
[/code]
<p style="text-align:justify;">Como se puede ver, para crear un serializador para la case class <em>Character</em> creamos un valor implícito con la ayuda de jsonFormat3 (ya que tiene 3 atributos). Dicho objeto implícito lo definiremos dentro de un trait que extenderá de DefaultJsonProtocol. En este trait están definidos los serializadores para los tipos básicos de Scala: Int, String, Boolean ... Fácil y sencillo.</p>
<p style="text-align:justify;"><img class="  wp-image-4111 aligncenter" src="https://scalerablog.files.wordpress.com/2016/06/tumblr_mfuulmem1p1qem4feo1_250.gif" alt="tumblr_mfuulmem1p1qem4feo1_250" width="185" height="185" /></p>
<p style="text-align:justify;"><strong>Opción menos fácil</strong>: cuando no tenemos una case class o queremos serializar una case class de una forma distinta.</p>
<p style="text-align:justify;">En este caso, es necesario picarnos a mano como debe ser la serialización y la deserialización del tipo en cuestión. Para ello, es necesario crear un implicit object que extienda de <em>RootJsonFormat</em>[T] donde <em>T</em> es el tipo que se quiere serializar. Dicho trait contiene dos métodos a implementar. Por un lado existe un método <em>write</em>, que convierte un tipo <em>T</em> en un Json, y por otro lado un tipo <em>read</em>, que realiza el proceso inverso. A continuación vemos un ejemplo con el mismo tipo que antes:</p>
[code language="scala"]
class Character(val name: String, val family: String, val isDead: Boolean)

object MyJsonProtocol extends DefaultJsonProtocol {

  implicit object CharacterJsonFormat extends RootJsonFormat[Character] {

    def write(c: Character) =
      JsArray(JsString(c.name), JsString(c.family), JsBoolean(c.isDead))

    def read(value: JsValue) = value match {
      case JsArray(Vector(JsString(name), JsString(family), JsBoolean(isDead))) =&gt;
        new Character(name, family, isDead.toBoolean)
      case _ =&gt; throw new DeserializationException(&quot;Character expected&quot;)
    }
  }
}
[/code]

Como se puede observar, es un poco más tedioso pero no demasiado complicado.

<strong>¿Y cómo lo usamos?</strong> Basta con importar el objeto donde hemos definido los implícitos y realizar llamadas a los métodos <em>toJson</em> o <em>convertTo[T]</em>.

[code language="scala"]
import MyJsonProtocol._

val json = Character(&quot;Jon Snow&quot;, &quot;Stark&quot;, ???).toJson //....You know nothing!!!!
// Returns {&quot;name&quot;: &quot;Jon Snow&quot;, &quot;family&quot;: &quot;Stark&quot;, &quot;isDead&quot;: ???}
val jonSnow = json.convertTo[Character]
[/code]

<img class="alignnone  wp-image-4095 aligncenter" src="https://scalerablog.files.wordpress.com/2016/06/giphy.gif" alt="giphy" width="392" height="193" />
<p style="text-align:justify;">Además, si usamos la API REST de Spray, la transformación se hará de forma transparente y no será necesario llamar a <em>toJson</em> o <em>convertTo</em> de forma explícita. Pero esto para otro post. La semana que viene, se hará una pequeña mención a esta librería, por lo que no venía mal dar unas pequeñas pinceladas antes :)
Agur de limón!</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4087</wp:post_id>
  <wp:post_date>2016-06-08 17:00:40</wp:post_date>
  <wp:post_date_gmt>2016-06-08 15:00:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>grafitti-rules-spray-json</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="json"><![CDATA[json]]></category>
  <category domain="post_tag" nicename="spray"><![CDATA[spray]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/740560006110576640";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[23635891935]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Graffiti Rules: playing with JSON [Snow]</title>
  <link>https://scalerablog.wordpress.com/2016/06/13/graffiti-rules-playing-with-json-snow/</link>
  <pubDate>Mon, 13 Jun 2016 10:00:33 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=4135</guid>
  <description/>
  <content:encoded><![CDATA[<p style="text-align:justify;">A few months ago we talked about <a href="https://scalerablog.wordpress.com/2016/02/01/1420/" target="_blank">Spray</a>, a toolkit that allowed us to build REST APIs in an easy way with a pretty complete DSL.</p>

<div>
<p style="text-align:justify;">One of the components belonging to this toolkit is spray-json. This module allows us to serialize and deserialize our objects to/from a JSON format. Today we'll see how to work with it quickly and easily.</p>
<p style="text-align:justify;">How to create serializers to different classes? Well, there are two options depending on how the class we want to serialize is defined.</p>
<p style="text-align:justify;"><strong>Easy option: </strong>when we have a case class</p>
<p style="text-align:justify;">Well, that's a piece of cake. The only thing we need to use is the <em>jsonFormatN</em>() method where N represents the number of arguments of the case class apply method. Let's see it with an example:</p>
[code language="scala"]
case class Character(name: String, family: String, isDead: Boolean)

object MyJsonProtocol extends DefaultJsonProtocol {

 implicit val characterFormat = jsonFormat3(Character.apply)

}
[/code]
<p style="text-align:justify;">As you can see, in order to create a serializer for the <i>Character </i>case class, we create an implicit value with the help of jsonFormat3 (as it has 3 attributes). Such an implicit object will be defined inside a trait which will extend from DefaultJsonProtocol. In this trait, the serializers for Scala basic types (Int, String, Boolean...) are defined... Easy peasy.</p>
<img class="CToWUd a6T aligncenter" src="https://ci4.googleusercontent.com/proxy/TWYNZDnq6OofVnxgzQkWVXcsWMOebphZNjH3e06U0Fu5NmrhPSEtPbRbpcKL4bxWW-CnA2C3MV2jnjVmmpmDTZLLc1rMCIcl5vELzKMLRLM4ulY4PC7z0z90FYArE34K8cEFGxuASKQ=s0-d-e1-ft#https://scalerablog.files.wordpress.com/2016/06/tumblr_mfuulmem1p1qem4feo1_250.gif" alt="tumblr_mfuulmem1p1qem4feo1_250" width="185" height="185" />
<p style="text-align:justify;"><strong>Less easy option</strong>: when we don't have a case class or we want to serialize a case class in a different way.</p>
<p style="text-align:justify;">In such a case, we'll need to implement how the serialization and deserialization of the given type should be. To do so, we may need to create an implicit object extending from <i>RootJsonFormat</i>[T] where <i>T</i> is the type we want to serialize. Such a trait contains two methods that need to be implemented. On the one hand, there is the <i>write </i>method, which converts a type<i>T</i> in a Json, and on the other a method <i>read</i>, performing the reverse process. We'll now see an example with the same type as before:</p>
[code language="scala"]
class Character(val name: String, val family: String, val isDead: Boolean)

object MyJsonProtocol extends DefaultJsonProtocol {

  implicit object CharacterJsonFormat extends RootJsonFormat[Character] {

    def write(c: Character) =
      JsArray(JsString(c.name), JsString(c.family), JsBoolean(c.isDead))

    def read(value: JsValue) = value match {
      case JsArray(Vector(JsString(name), JsString(family), JsBoolean(isDead))) =&gt;
        new Character(name, family, isDead.toBoolean)
      case _ =&gt; throw new DeserializationException(&quot;Character expected&quot;)
    }
  }
}
[/code]
<p style="text-align:justify;">As can be observed, it is a bit more tedious but not too complicated.</p>
<p style="text-align:justify;"><strong>And how do we use it?</strong> We just have to import the object where we have defined the implicits and call the methods <em>toJson</em> or <em>convertTo[T]</em>.</p>
[code language="scala"]
import MyJsonProtocol._

val json = Character(&quot;Jon Snow&quot;, &quot;Stark&quot;, ???).toJson //....You know nothing!!!!
// Returns {&quot;name&quot;: &quot;Jon Snow&quot;, &quot;family&quot;: &quot;Stark&quot;, &quot;isDead&quot;: ???}
val jonSnow = json.convertTo[Character]
[/code]

<img class="CToWUd a6T aligncenter" src="https://ci3.googleusercontent.com/proxy/D53upFbAgfeqFTw4bbfCJ3CL74UorKmtIzGdJuvu3aqmcvLbahYF8RPdTJ8RQD9BDGVWQhYpIXi6AzsATM0lOPaNoUUxTsk7t_rIgXLGwg=s0-d-e1-ft#https://scalerablog.files.wordpress.com/2016/06/giphy.gif" alt="giphy" width="392" height="193" />
<p style="text-align:justify;">Besides, if we use Spray's REST API, the transformation will be done in a transparent way and it won't be necessary to call  <em>toJson</em> or <em>convertTo</em> explicitely. But we'll leave that to other post. Next week we'll be talking about this library so we'd better see something of it before :)</p>
See you all!

</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4135</wp:post_id>
  <wp:post_date>2016-06-13 12:00:33</wp:post_date>
  <wp:post_date_gmt>2016-06-13 10:00:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>graffiti-rules-playing-with-json-snow</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="beginner"><![CDATA[beginner]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="json"><![CDATA[json]]></category>
  <category domain="post_tag" nicename="spray"><![CDATA[spray]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/742296266336440320";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[23785512748]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Scala: Code interpretation at runtime</title>
  <link>https://scalerablog.wordpress.com/2016/06/20/scala-code-interpretation-at-runtime/</link>
  <pubDate>Mon, 20 Jun 2016 10:00:15 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=4161</guid>
  <description/>
  <content:encoded><![CDATA[With today's post, we'll dive into Scala code generation on the fly: at runtime. We have to be cautious of not mixing concepts with Scala macros, which generate code at compile-time. These make use of Scala type system, which is much safer than generating code at runtime.

<a href="https://scalerablog.files.wordpress.com/2016/06/house-of-cards-but-why.gif"><img class="aligncenter size-full wp-image-4155" src="https://scalerablog.files.wordpress.com/2016/06/house-of-cards-but-why.gif" alt="House-of-cards-but-why" width="500" height="200" /></a>

When is it useful to make use of this mechanism then? We'll try to shed light on this by following a very simple example, getting abstract of real implementation (that you may find at <a href="https://github.com/Scalera/runtime-reflect-handson" target="_blank">Scalera's Github</a>).

<h2>The problem: "da" serializer</h2>

Let's suppose a not-so-wild case, which consists on communicating two services via an event bus (we'll get abstract of its implementation: it could be a message queue like Kafka, Akka streams, ...).

The main idea is the following:

<a href="https://scalerablog.files.wordpress.com/2016/06/sender-receiver-schema.png"><img class="aligncenter size-full wp-image-4148" src="https://scalerablog.files.wordpress.com/2016/06/sender-receiver-schema.png" alt="Sender-receiver-schema" width="612" height="367" /></a>

The producer knows how to send and the consumer has an associated callback for message arrivals:

[code language="scala"]
trait Producer{
  def produce(message: Any): Try[Unit]
}
trait Consumer{
  val consume: Any =&gt; Unit
}
[/code]

Both producer and consumer services know the message types that may arrive. In our example, they could be one of these:

[code language="scala"]
case class Foo(att1: Int, att2: String)
case class Bar(att1: String)
[/code]

If the producer wants to send a message using the event bus, it will have to serialize it somehow (JSON, Byte array, XML, ...) so, by the time it reaches the opposite end, the consumer will start the inverse process (deserialization) and will get the original message.

...nothing weird so far.

<a href="https://scalerablog.files.wordpress.com/2016/06/whydoeseverythinghavetobesocomplicated.gif"><img class="aligncenter size-full wp-image-4151" src="https://scalerablog.files.wordpress.com/2016/06/whydoeseverythinghavetobesocomplicated.gif" alt="Whydoeseverythinghavetobesocomplicated" width="500" height="269" /></a>

If we have a JSON serializer ...

[code language="scala"]
trait JsonSer[T] {
  def serialize(t: T): String
  def deserialize(json: String): T
}
[/code]

and we serialize our message ...

[code language="scala"]
implicit val fooSerializer: JsonSer[Foo] = ???
val foo: Foo = ???
producer.send(implicitly[JsonSer[Foo]].serialize(foo))
[/code]

How do we know which deserializer to use when the consumer gets the message?

<h2>Option 1: Try every possible serializer until one of them works</h2>

In our consumer, we'd have:

[code language="scala"]
lazy val consumer = new Consumer {
  override val consume: Any =&gt; Unit = {
    case message: String =&gt;
      Seq(barSerializer, fooSerializer).flatMap { ser =&gt;
        Try(ser.deserialize(message)).toOption
      }.headOption.fold(ifEmpty = println(&quot;Couldn't deserialize&quot;)) {
        case bar: Bar =&gt; println(&quot;it's a bar!&quot;)
        case foo: Foo =&gt; println(&quot;it's a foo!&quot;)
        case _ =&gt; println(&quot;it's ... something!&quot;)
      }
  }
}
[/code]

A lil' bit coarse, right? If the proper serializer is the last of a 100 list, we would have tried and failed with 99 serializers before (Such a waste of CPU!).

<a href="https://scalerablog.files.wordpress.com/2016/06/4d8.gif"><img class="aligncenter size-full wp-image-4152" src="https://scalerablog.files.wordpress.com/2016/06/4d8.gif" alt="4d8" width="473" height="261" /></a>

Besides, we could also consider the case of having a different type deserializer, but it fits with the received message, so it would partially or wrongly deserialize the message.

<h2>Option 2: Add the message type to the message itself</h2>

We could add an extra layer wrapping the message for indicating the message type that it contains. This way, when receiving it, we could determine the serializer type we have to use.

<a href="https://scalerablog.files.wordpress.com/2016/06/messagewrapper.png"><img class="aligncenter size-medium wp-image-4149" src="https://scalerablog.files.wordpress.com/2016/06/messagewrapper.png?w=300" alt="MessageWrapper" width="300" height="220" /></a>

For writing the type, we'll make use of Scala's <code>TypeTag</code>s, getting info about the <code>T</code> contained message type.

[code language="scala"]

//Wrapper for the message (and its serializer)

import scala.reflect.runtime.universe.{TypeTag, typeTag}

case class Message[T: TypeTag](content: T){
  val messageType: Message.Type = typeTag[T].tpe.toString
}
object Message {

  type Type = String

  def typeFrom(msg: String): Message.Type = ???

  implicit def messageSer[T:TypeTag:JsonSer]: JsonSer[Message[T]] = ???

}

//We'll make use of it for sending

producer.produce(messageSer[Foo].serialize(Message(foo)))

//And we redefine the consumer

lazy val consumer = new Consumer {
    override val consume: Any =&gt; Unit = {
      case message: String =&gt;
        Message.typeFrom(message) match {

          case &quot;org.scalera.reflect.runtime.Bar&quot; =&gt;
            println(&quot;it's a bar!&quot;)
            val value = messageSer[Bar].deserialize(message).content
            println(value.att1)

          case &quot;org.scalera.reflect.runtime.Foo&quot; =&gt;
            val value = messageSer[Foo].deserialize(message).content
            println(&quot;it's a foo!&quot;)
            println(value.att2)

          case _ =&gt;
            println(&quot;it's ... something!&quot;)
        }
    }
  }
[/code]

As you can see, we don't have to try every possible serializer anymore. Instead of that, from the message type we've extracted from the Message wrapper we have added, we're able to use the proper deserializer.

But it is also true that we have to add an extra case for each string that represents the message type. Wouldn't it be nice to deserialize somehow and to have the defined <code>case</code> only for the already deserialized objects? (Something similar what we first tried but without trying all posible serializers). Something like:

[code language="scala"]
lazy val consumer = new Consumer {
  override val consume: Any =&gt; Unit = { msg =&gt;
    genericDeserialize(msg) match {
      case f: Foo =&gt;
      case b: Bar =&gt;
      case _ =&gt;
    }
  }
}
[/code]

<h2>Option 2-cool: Serializers 'under the hood'</h2>

For achieving something similar, we have to get focused on that <code>genericDeserialize</code> method: Which signature should it have? Initially, something like this:

[code language="scala"]
def genericDeserialize(msg: String): Any
[/code]

An <code>Any</code>? Seriously? My fellows, at runtime, we have no idea about the type we can get. We just know that, from a String, we'll get 'some....thing'. The <code>match</code> that applies to that Any will allow us to go from something totally abstract to more concrete types.

At this point is where both reflect library and Scala compiler appear.

<h3>reflect.Toolbox</h3>

The <code>Toolbox</code> API allows parsing strings and getting the resulting AST (abstract syntax tree). From that AST, it is able to evaluate the expression and returns an instance of an Any as well.

For instantiating a Toolbox and use type references, we hace to add as SBT dependencies the following:

[code language="scala"]
libraryDependencies ++= Seq(
  &quot;org.scala-lang&quot; % &quot;scala-compiler&quot; % &quot;2.11.8&quot;,
  &quot;org.scala-lang&quot; % &quot;scala-reflect&quot; % &quot;2.11.8&quot;)
[/code]

For example, if we wanted to parse the <code>"2".toInt + 4</code> operation,

[code language="scala"]
import scala.tools.reflect.ToolBox
import scala.reflect.runtime.{universe =&gt; ru}
import ru._

//  Scala compiler tool box
val tb = ru.runtimeMirror(
  this.getClass.getClassLoader).mkToolBox()

println(ru.showRaw(tb.parse(&quot;2&quot;.toInt + 4&quot;)))
[/code]

we would get the abstract syntax tree generated as a String (by using <code>showRaw</code>):

[code language="scala"]
Apply(Select(Select(Literal(Constant(&quot;2&quot;)), TermName(&quot;toInt&quot;)), TermName(&quot;$plus&quot;)), List(Literal(Constant(4))))
[/code]

If we use the toolbox for evaluating the parsed expression,

[code language="scala"]
println(tb.eval(tb.parse(&quot;2&quot;.toInt + 4&quot;)))
[/code]

we'll get an Any that represents the resulting value of the sum:

[code]
6
[/code]

<h3>"Da" serializer</h3>

Once we've seen how it generally works, we apply the same principle to our serializer, so the expression we're going to try to interpret is similar to:

[code language="scala"]
{
  import scala.reflect._;
  import spray.json._;
  import org.scalera.reflect.runtime._;
  import MySprayJsonImplicits._;
  import MyJsonSerImplicits._;

  implicitly[JsonSer[Message[$messageType]]]
}
[/code]

where <code>MySprayJsonImplicits</code> and <code>MyJsonSerImplicits</code> represent the objects that contain both the Spray implicits for JsonFormat and the JsonSer implicits that we have defined before.

<code>$messageType</code> represents the concrete type to deserialize that we would have got by using the TypeTag (as seen before).

If we adapt it to our code, we'll get something similar to:

[code language="scala"]
object GenSer {

  import scala.tools.reflect.ToolBox
  import scala.reflect.runtime.{universe =&gt; ru}
  import ru._

  //  Scala compiler tool box
  private val tb = ru.runtimeMirror(this.getClass.getClassLoader).mkToolBox()

  def genericDeserialize(msg: String)(serContainers: Seq[AnyRef]): Any = {

    val messageType = Message.typeFrom(msg)

    val serContainersImport = serContainers.map(container =&gt;
      &quot;import &quot; + container.toString.split(&quot;\\$&quot;).head + &quot;._&quot;).mkString(&quot;;\n&quot;)

    val expr =
      s&quot;
         |{
         |  import scala.reflect._;
         |  import spray.json._;
         |  import org.scalera.reflect.runtime._;
         |  $serContainersImport;
         |
         |  implicitly[JsonSer[Message[$messageType]]]
         |}
        &quot;.stripMargin

    tb.eval(tb.parse(expr))
      .asInstanceOf[JsonSer[Message[Any]]]
      .deserialize(msg).content
  }

}
[/code]

If you take a look, we've empowered the generic deserialization method notation to hold a sequence of objects to import, so we won't make explicit which object contains the Spray implicits and which one contains our <code>JsonSer</code>'s.

[code language="scala"]
val serContainersImport = serContainers.map(container =&gt;
  &quot;import &quot; + container.toString.split(&quot;\\$&quot;).head + &quot;._&quot;).mkString(&quot;;\n&quot;)
[/code]

It is also noteworthy that, when deserializing, we get a <code>Message[Any]</code>; so we'll have to get the 'content' field that represents the raw value of Any type that holds the deserialized message.

<h2>The result</h2>

So finally, we can now make use of our function for generically deserialize and let our consumer code be 'swaggy':

[code language="scala"]
lazy val consumer = new Consumer {
  override val consume: Any =&gt; Unit = { 
    case msg: String =&gt;
      genericDeserialize(msg)(Seq(case3,Message)) match {
        case bar: Bar =&gt; println(&quot;it's a bar!&quot;)
        case foo: Foo =&gt; println(&quot;it's a foo!&quot;)
        case _ =&gt; println(&quot;it's ... something!&quot;)
      }
  }
}
[/code]

<h2>Conclusions</h2>

Being able to evaluate code at runtime let us do a lot of interesting things when we want to interpret String based types. However, these kind of techniques won't care about the so worthy and safe Scala type system, so these are tools to be used with a lil' bit of care.

It is also kind of expensive in time terms to evaluate these expressions. I would recommend to use a type cache in this case. Something really simple like a map:

[code language="scala"]
type TypeName = String
var cache: Map[TypeName, JsonSer[Message[_]]]
[/code]

And when invoking the method, we'll check if the type evidence (JsonSer) we're looking for is already stored in the map. If so, we'll use it, otherwise, we'll create and store it in the cache, using it as result.

<a href="https://scalerablog.files.wordpress.com/2015/06/post-28553-steve-jobs-mind-blown-gif-hd-t-pvbd.gif"><img class="aligncenter size-full wp-image-466" src="https://scalerablog.files.wordpress.com/2015/06/post-28553-steve-jobs-mind-blown-gif-hd-t-pvbd.gif" alt="post-28553-Steve-Jobs-mind-blown-gif-HD-T-pVbd" width="350" height="233" /></a>

Easy peasy...
Peace out!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4161</wp:post_id>
  <wp:post_date>2016-06-20 12:00:15</wp:post_date>
  <wp:post_date_gmt>2016-06-20 10:00:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scala-code-interpretation-at-runtime</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="code"><![CDATA[code]]></category>
  <category domain="post_tag" nicename="compiler"><![CDATA[compiler]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="generation"><![CDATA[generation]]></category>
  <category domain="post_tag" nicename="generic"><![CDATA[generic]]></category>
  <category domain="post_tag" nicename="json"><![CDATA[json]]></category>
  <category domain="post_tag" nicename="macros"><![CDATA[macros]]></category>
  <category domain="post_tag" nicename="reflect"><![CDATA[reflect]]></category>
  <category domain="post_tag" nicename="reflection"><![CDATA[reflection]]></category>
  <category domain="post_tag" nicename="runtime"><![CDATA[runtime]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="serializer"><![CDATA[serializer]]></category>
  <category domain="post_tag" nicename="spray"><![CDATA[spray]]></category>
  <category domain="post_tag" nicename="toolbox"><![CDATA[toolbox]]></category>
  <category domain="post_tag" nicename="type"><![CDATA[type]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[24008003937]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/744832708329668608";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>126</wp:comment_id>
    <wp:comment_author><![CDATA[Stefan]]></wp:comment_author>
    <wp:comment_author_email>stefan@ploing.de</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>80.187.114.249</wp:comment_author_IP>
    <wp:comment_date>2016-07-15 14:02:25</wp:comment_date>
    <wp:comment_date_gmt>2016-07-15 12:02:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You happen to have a complete code example online?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1468584145.8301351070404052734375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1468584217</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1468584217</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1468584218.039535045623779296875;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-07-15 12:02:25</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>127</wp:comment_id>
    <wp:comment_author><![CDATA[jpaniego]]></wp:comment_author>
    <wp:comment_author_email>javiersantospaniego@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>80.39.48.142</wp:comment_author_IP>
    <wp:comment_date>2016-07-15 14:04:52</wp:comment_date>
    <wp:comment_date_gmt>2016-07-15 12:04:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[As you can see at the top of the post, there's an online example on Github :-)

<a href="https://github.com/Scalera/runtime-reflect-handson" rel="nofollow">https://github.com/Scalera/runtime-reflect-handson</a>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>126</wp:comment_parent>
    <wp:comment_user_id>59615419</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1468584295</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1468584293</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1468584294.373004913330078125;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-07-15 12:04:52</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>128</wp:comment_id>
    <wp:comment_author><![CDATA[Stefan]]></wp:comment_author>
    <wp:comment_author_email>stefan@ploing.de</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.225.187.130</wp:comment_author_IP>
    <wp:comment_date>2016-07-15 15:33:04</wp:comment_date>
    <wp:comment_date_gmt>2016-07-15 13:33:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks - missed it while reading!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1468589585</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1468589584</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1468589584.98353290557861328125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-07-15 13:33:04</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Scala, Scala, y nada más.</title>
  <link>https://scalerablog.wordpress.com/2016/06/22/aprendiendo-scala/</link>
  <pubDate>Wed, 22 Jun 2016 15:00:18 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=4169</guid>
  <description/>
  <content:encoded><![CDATA[Después de tantos posts sobre Scala, de tantos snippets de código, y tantos conceptos rarunos, llega un post que teníamos pendiente desde casi el comienzo de este blog. ¿Qué recursos existen para profundizar en Scala? Pues bien...ahora os contamos nuestros favoritos.

<img class="  wp-image-4188 aligncenter" src="https://scalerablog.files.wordpress.com/2016/06/yoda_meme.jpg" alt="yoda_meme" width="343" height="260" />

<strong>Libros</strong>: un buen punto de partida :)
<ul>
	<li><strong>Programming in Scala</strong>: un clásico. Escrito por el mismísimo Odersky y con la tercera edición recién sacada del horno.</li>
	<li><strong>Funcional Programming in Scala</strong> (también conocido, en un afán de originalidad y sencillez, como el libro rojo ). Un libro que abre la mente al paradigma funcional y que es recomendable no solo para gente que quiera programar en Scala, sino para gente que le interese la programación funcional.</li>
</ul>
<strong>Cursos</strong>: para dar un poco más de profundidad.
<ul>
	<li>En el tema de los cursos online, <strong>Coursera</strong> y la nueva <a href="https://www.coursera.org/specializations/scala">especialización</a> de programación  funcional en Scala tienen todo el monopolio. Consta de 4 cursos + 1 proyecto y aborda en profundidad los aspectos más importantes del lenguaje.</li>
	<li>Por otro lado, <strong><a href="https://www.scala-exercises.org/">scala-exercises</a></strong> nos permite practicar de una forma más rápida, pero no por eso menos eficaz. Totalmente recomendable.</li>
</ul>
<strong>Eventos</strong>: no solo para beber cerveza  ;)
<ul>
	<li style="text-align:justify;"><strong><a href="http://www.scaladays.org/">Scala Days</a></strong> : sin duda la convención anual más importante de Scala. Desde hace un año se realizan dos convenciones, una en América y otra en Europa. Además, publican los vídeos de todas sus charlas :)</li>
	<li style="text-align:justify;"><strong><a href="https://scala.world/">Scala World</a></strong>: convención en UK con una gran acogida y en la que puedes escuchar y ver a algunos de los mayores gurús de Scala.</li>
	<li style="text-align:justify;"><strong><a href="https://skillsmatter.com/conferences/7432-scala-exchange-2016">Scala eXchange</a></strong><a href="https://skillsmatter.com/conferences/7432-scala-exchange-2016"></a>: otra de las convenciones más conocidas. Se realiza en Londres en el mes de Diciembre.</li>
</ul>

<hr />

Estos son los recursos que conocemos y que nos han parecido interesante. Sin duda hay muchos más que nos dejamos en el tintero. Si echas en falta alguno en esta lista, cualquier aportación será bienvenida :)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4169</wp:post_id>
  <wp:post_date>2016-06-22 17:00:18</wp:post_date>
  <wp:post_date_gmt>2016-06-22 15:00:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>aprendiendo-scala</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="blogs"><![CDATA[blogs]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="resources"><![CDATA[resources]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[24084594586]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/745633311213522952";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>120</wp:comment_id>
    <wp:comment_author><![CDATA[scalera_user]]></wp:comment_author>
    <wp:comment_author_email>sciutomaxi@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>200.0.230.235</wp:comment_author_IP>
    <wp:comment_date>2016-06-22 19:21:43</wp:comment_date>
    <wp:comment_date_gmt>2016-06-22 17:21:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Algun libro en español??]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1466616103.924746036529541015625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>24109062081</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1466620508.7046411037445068359375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1466671464</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1466671464</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1466671464.706407070159912109375;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-06-22 17:21:43</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>121</wp:comment_id>
    <wp:comment_author><![CDATA[dvallejonava]]></wp:comment_author>
    <wp:comment_author_email>d.vallejo.nava@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.82.197.162</wp:comment_author_IP>
    <wp:comment_date>2016-06-23 10:45:42</wp:comment_date>
    <wp:comment_date_gmt>2016-06-23 08:45:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[No conozco ninguno. La verdad es que los recursos sobre Scala en español son bastante escasos.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>120</wp:comment_parent>
    <wp:comment_user_id>81583895</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1466671545</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>24109089978</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1466671543</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1466671544.4990890026092529296875;s:5:"event";s:9:"check-ham";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-06-23 08:45:42</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>122</wp:comment_id>
    <wp:comment_author><![CDATA[pych3m4]]></wp:comment_author>
    <wp:comment_author_email>chemacortes@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>81.36.65.171</wp:comment_author_IP>
    <wp:comment_date>2016-06-25 01:30:44</wp:comment_date>
    <wp:comment_date_gmt>2016-06-24 23:30:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Una plataforma que cuenta con scala para varios de sus cursos de bigdata es http://bigdatauniversity.com, plataforma mantenida por IBM.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>20709638</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1466811045.740067005157470703125;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"pych3m4";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>24230543818</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1466815966.6242311000823974609375;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"pych3m4";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1467017482</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1467017483</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1467017483.5550940036773681640625;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-06-24 23:30:44</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>123</wp:comment_id>
    <wp:comment_author><![CDATA[dvallejonava]]></wp:comment_author>
    <wp:comment_author_email>d.vallejo.nava@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.82.197.162</wp:comment_author_IP>
    <wp:comment_date>2016-06-27 10:54:31</wp:comment_date>
    <wp:comment_date_gmt>2016-06-27 08:54:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Muchas gracias por el aporte!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>122</wp:comment_parent>
    <wp:comment_user_id>81583895</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1467017673</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1467017673.90645694732666015625;s:5:"event";s:9:"check-ham";s:4:"user";s:12:"dvallejonava";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>24230615467</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1467017674</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2016-06-27 08:54:31</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Scala, Scala and nothing more</title>
  <link>https://scalerablog.wordpress.com/2016/06/27/scala-scala-and-nothing-more/</link>
  <pubDate>Mon, 27 Jun 2016 10:00:56 +0000</pubDate>
  <dc:creator>dvallejonava</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=4219</guid>
  <description/>
  <content:encoded><![CDATA[After so many posts on Scala, many snippets of code, and many weird concepts, there comes a post that had been pending since almost the beginning of this blog. What resources exist to learn Scala? Well ... now we show our favorites.

<img class="  wp-image-4188 aligncenter" src="https://scalerablog.files.wordpress.com/2016/06/yoda_meme.jpg" alt="yoda_meme" width="343" height="260" />

<strong>Books</strong>: a good starting point :)
<ul>
	<li><strong>Programming in Scala</strong>: a classic. Written by the very Odersky and with the third edition hot off the press.</li>
	<li><strong>Funcional Programming in Scala</strong> (also known, in an effort of originality and simplicity, as the red book). A book that opens the mind to the functional paradigm and it is advisable not only for people who want to program in Scala, but for people who are interested in functional programming.</li>
</ul>
<strong>Courses</strong>: to deepen a bit more.
<ul>
	<li>On the online courses, <strong>Coursera</strong> and the new <a href="https://www.coursera.org/specializations/scala">specialization</a> of functional programming in Scala they have all the monopoly. It consists of 4 courses + 1 project and discusses in depth the most important aspects of Scala.</li>
	<li>Furthermore, <strong><a href="https://www.scala-exercises.org/">scala-exercises</a></strong> allows us to practice in a faster way, but no less effective. Fully recommended.</li>
</ul>
<strong>Events</strong>: not only to drink beer  ;)
<ul>
	<li style="text-align:justify;"><strong><a href="http://www.scaladays.org/">Scala Days</a></strong> : Undoubtedly the most important annual convention about Scala. Since a year, there are two conventions at year: one in America and one in Europe. In addition, all the videos of the talks are published :)</li>
	<li style="text-align:justify;"><strong><a href="https://scala.world/">Scala World</a></strong>: UK convention with a warm welcome and where you can hear and see some of the biggest Scala gurus.</li>
	<li style="text-align:justify;"><strong><a href="https://skillsmatter.com/conferences/7432-scala-exchange-2016">Scala eXchange</a></strong>: another of the best known conventions. It takes place on December in London.</li>
</ul>

<hr />

These are the resources that we know and that we found interesting. Without doubt, there are many more that we left unsaid. If you missing some resource on this list, any contribution is welcome :)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4219</wp:post_id>
  <wp:post_date>2016-06-27 12:00:56</wp:post_date>
  <wp:post_date_gmt>2016-06-27 10:00:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scala-scala-and-nothing-more</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="resources"><![CDATA[resources]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[24232228511]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/747369902638432257";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Cerrado por vacaciones</title>
  <link>https://scalerablog.wordpress.com/2016/06/29/cerrado-por-vacaciones/</link>
  <pubDate>Wed, 29 Jun 2016 15:00:00 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=4244</guid>
  <description/>
  <content:encoded><![CDATA[Cómo viene siendo costumbre, y dado lo prolífico que se está volviendo la producción de posts de Scala, creemos que nos merecemos un pequeño descanso.

<a href="https://scalerablog.files.wordpress.com/2016/06/friends-tv-show-bad-lessons-8.gif"><img src="https://scalerablog.files.wordpress.com/2016/06/friends-tv-show-bad-lessons-8.gif" alt="friends-tv-show-bad-lessons-8" width="500" height="320" class="aligncenter size-full wp-image-4245" /></a>

Es por eso que colgamos el teclado durante unas semanas para reponer fuerzas y volver con las pilas cargadas para seguir con la labor.
Nos vemos a la vuelta del verano :-)

<a href="https://scalerablog.files.wordpress.com/2016/06/giphy1.gif"><img src="https://scalerablog.files.wordpress.com/2016/06/giphy1.gif" alt="giphy" width="400" height="227" class="aligncenter size-full wp-image-4246" /></a>

¡Agur de limón!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4244</wp:post_id>
  <wp:post_date>2016-06-29 17:00:00</wp:post_date>
  <wp:post_date_gmt>2016-06-29 15:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cerrado-por-vacaciones</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_format" nicename="post-format-aside"><![CDATA[Minientrada]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[24308168550]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/748169176502571008";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Closed for vacations</title>
  <link>https://scalerablog.wordpress.com/2016/07/04/closed-for-vacations/</link>
  <pubDate>Mon, 04 Jul 2016 10:00:41 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=4249</guid>
  <description/>
  <content:encoded><![CDATA[As we're getting used to it and, given how much prolific we are becoming when writting Scala posts, we think we deserve some rest.

<a href="https://scalerablog.files.wordpress.com/2016/06/friends-tv-show-bad-lessons-8.gif"><img src="https://scalerablog.files.wordpress.com/2016/06/friends-tv-show-bad-lessons-8.gif" alt="friends-tv-show-bad-lessons-8" width="500" height="320" class="aligncenter size-full wp-image-4245" /></a>

That's why we will be off for some weeks, to recharge our batteries and get back full of energy for going on our labor :-)

<a href="https://scalerablog.files.wordpress.com/2016/06/giphy1.gif"><img src="https://scalerablog.files.wordpress.com/2016/06/giphy1.gif" alt="giphy" width="400" height="227" class="aligncenter size-full wp-image-4246" /></a>

Peace out!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4249</wp:post_id>
  <wp:post_date>2016-07-04 12:00:41</wp:post_date>
  <wp:post_date_gmt>2016-07-04 10:00:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>closed-for-vacations</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/749905986635173888";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[24455566323]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Tipos de datos algebraicos en Scala</title>
  <link>https://scalerablog.wordpress.com/2016/09/28/tipos-de-datos-algebraicos-en-scala/</link>
  <pubDate>Wed, 28 Sep 2016 10:00:27 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=4257</guid>
  <description/>
  <content:encoded><![CDATA[Qué mejor que volver de vacaciones con las pilas cargadas y con algún que otro tornillo suelto que nos empuje a escribir sobre temas que solo se te ocurren bajo el influjo de <del>los puerros</del> la luna.

<h2>¿TDA?</h2>

Un Tipo de Datos Algebraico(TDA en adelante para que no nos cobre Wordpress por palabra) no es sino expresar un tipo de datos (Gato, Coche, Prevaricación) en base a un álgebra. Y cuando decimos álgebra nos referimos a sumas y productos de tipos (de Enteros, Gatos, Coches, Prevaricaciones, ...). Por ejemplo:

[code]
Train = Locomotive + Wagon * Train
[/code]

¿Esto como se lee? Un tren puede ser: una locomotora <strong>O</strong> un vagón <strong>Y</strong> otro tren (que a su vez puede ser otro vagón y otro tren, que a su vez ...).
Fijaos en la disyunción y la conjunción: la suma suele representar un OR y el producto un AND (como en el álgebra de Boole).

Es interesante también darse cuenta que, de esta definición de tipos, se puede inferir un patrón recursivo. En el caso del tren, el caso base es la locomotora y en el caso recursivo tenemos un vagón y otro tren. Como veremos más adelante, este patrón se repite y facilita la definición de tipos.

<h2>¿Y cómo se representa la suma y el producto en Scala?</h2>

La forma más sencilla de representar la suma (también llamada <strong>coproducto</strong>) de tipos, en un paradigma que soporte polimorfismo (en general) y en Scala (en particular), no es sino la herencia. Si tenemos el siguiente caso:

[code language="scala"]
sealed trait Animal
case object Cat extends Animal
case object Dog extends Animal
[/code]

estamos formulando un coproducto de tipos:

[code]
Animal = Cat + Dog
[/code]

es decir, un <code>Animal</code> solamente puede ser, o un <code>Cat</code>, o un <code>Dog</code>.

En cuanto al producto, podríamos definirlo como el conjunto de atributos que componen una instancia de un cierto tipo. Por ejemplo,

[code language="scala"]
case class Student(name: String, age: Int)
[/code]

expresado como suma de productos, es como sigue:

[code]
Student = String * Int
[/code]

Es decir, para construir el tipo <code>Student</code> hace falta un <code>String</code> y un <code>Int</code>.

Si ahora tratamos de bajar a tierra el modelo de tren antes propuesto (con algún aditivo) tendremos que 

[code]
Wagon = String * Int
Train = Locomotive + Wagon * Train
[/code]

se traduce en Scala a

[code language="scala"]
sealed trait Train
case object Locomotive extends Train
case class Wagon(model: String, passengers: Int)
case class Nexus(wagon: Wagon, next: Train)
[/code]

<h2>¿Y esto para qué?</h2>

Si piensas, amigo, que esto son cosas que nadie usa, es porque no te paraste a pensar en qué estructuras de <code>scala.predef</code> se definen de esta forma. Las listas (<code>List</code>) por ejemplo se definen como:

[code language="scala"]
trait List[+T]
case object Nil extends List[Nothing]
case class ::[T](head: T, tail: List[T]) extends List[T]
[/code]

Es decir, una lista puede ser, o lista vacía, o un elemento seguido de otra lista.
Si lo expresamos en función de productos y coproductos:

[code]
List[T] = EmptyList[T] + NonEmptyList[T]
NonEmptyList[T] = T * List[T]
[/code]

Fijaos que el caso de la lista vacía (<code>Nil</code>) tiene una implementación muy bonita en Scala. 

Si tenemos que definir una lista vacía para tooooodos los tipos existentes, tendríamos que instanciar un <code>Nil[Cat]</code>, <code>Nil[Dog]</code>, ...
Para evitar eso, y tener un único <code>Nil</code>, hacemos que este extienda de <code>List[Nothing]</code> que, como recordareis de otros posts, <code>Nothing</code> extiende de tooooodos los tipos (tanto primitivos como definidos por el programador). Si a esto le sumamos que <code>List[T]</code> es covariante en <code>T</code>, tenemos un único objeto <code>Nil</code> que representa las listas vacías de tooooodos los tipos. Alucinante, ¿no?

<a href="https://scalerablog.files.wordpress.com/2015/07/odtudee.gif"><img src="https://scalerablog.files.wordpress.com/2015/07/odtudee.gif" alt="odtUdEE" width="450" height="260" class="aligncenter size-full wp-image-590" /></a>

<h2>Ejemplo: Números pares </h2>

Para afianzar esta <del>novedosa</del> forma de pensar, pongámonos en la siguiente tesitura, ¿cómo podríamos representar los números pares en Scala?

<h3>Requirements</h3>

Si somos poco delicados y confiamos más en las aserciones en tiempo de runtime, podríamos decir que los números pares son:

[code language="scala"]
case class Even(value: Int) { 
  require(value%2==0, &quot;it's not even&quot;)
}
[/code]

Si intentamos crear un <code>Even</code> con un número impar nos dirá que nope:

[code language="scala"]
Even(1)
java.lang.IllegalArgumentException: requirement failed: it's not even
	at scala.Predef$.require(Predef.scala:233)
	at Even.&lt;init&gt;(&lt;console&gt;:7)
[/code]

Sin embargo esta comprobación no se realiza hasta el momento de ejecución, que es cuando se comprueba el <code>require</code>. Por lo que nuestro código podría estar compilando pero no ser correcto...
Podemos hacerlo mejor...

<h3>Next(Next(...))</h3>

Otra opción es asumir (y no vamos a discutir sobre ello) que el número 0 es par, que tenemos memoria infinita en nuestra máquina, que no existe el overflow, ...

<a href="https://scalerablog.files.wordpress.com/2016/09/907958.png"><img src="https://scalerablog.files.wordpress.com/2016/09/907958.png" alt="907958" width="552" height="392" class="aligncenter size-full wp-image-4265" /></a>

En ese caso, para nada alejado de la realidad (...) podríamos definir los números enteros pares como:

[code language="scala"]
sealed abstract class Even(val value: Int)
case object Zero extends Even(0)
case class Next(previousEven: Even) 
  extends Even(2 + previousEven.value)
[/code]

De manera que si tenemos un método que genera una reserva para el barco del amor que requiere de un número par de participantes, podemos usar nuestro recién definido tipo <code>Even</code>:

[code language="scala"]
def loveBoatReservation(
  peopleAmount: Even): Reservation = ???
[/code]

Dado que no hay forma de construir un <code>Even</code> a partir de un entero que no sea par, evitamos situaciones en runtime en las que el número de personas que se montan en el barco sean impares. Sino siempre habría alguien ...

<a href="https://scalerablog.files.wordpress.com/2016/09/forever-alone-400x400.png"><img src="https://scalerablog.files.wordpress.com/2016/09/forever-alone-400x400.png" alt="forever-alone-400x400" width="400" height="400" class="aligncenter size-full wp-image-4266" /></a>

<h3>Mecánica de métodos sobre TDAs recursivos</h3>

Una vez definido el tipo de datos, supongamos que queremos implementar la suma de números pares:

[code language="scala"]
def sum(e1: Even, e2: Even): Even = ???
[/code]

Tenemos varias alternativas. Una de ellas puede ser la quick-and-dirty:

[code language="scala"]
def sum(e1: Even, e2: Even): Event = 
  new Even(e1.value + e2.value){}
[/code]

Pero fijaos que estamos pasando un kilo de los constructores que hemos definido. Si queremos hacer pattern matching ahora sobre el resultado:

[code language="scala"]
val four = new Even(4){}
sum(Zero, four) match {
  case Zero =&gt; 
    //it never gets inside this case!
  case Next(Next(Zero)) =&gt; 
    //OMG! IT DOESN'T FIT HERE EITHER!
}
scala.MatchError: $anon$1@649f2009 (of class $anon$1)
[/code]

<a href="https://scalerablog.files.wordpress.com/2016/09/51067781.jpg"><img src="https://scalerablog.files.wordpress.com/2016/09/51067781.jpg" alt="51067781" width="450" height="334" class="aligncenter size-full wp-image-4268" /></a>

La otra técnica (algo más fina por otra parte) consiste en lanzar un método recursivo que, en cada llamada, vaya disminuyendo el segundo número par mientras que aumenta el primero. Para ello hacemos uso del constructor y extractor <code>Next</code>:

[code language="scala"]
def sum(e1: Even, e2: Even): Even = {
  @tailrec
  def rSum(ev1: Even, ev2: Even): (Even, Even) = {
    ev2 match {
      case Zero =&gt; (ev1, Zero)
      case Next(e) =&gt; rSum(Next(ev1), e)
    }
  }
  val (result, _) = rSum(e1, e2)
  result
}
[/code]

Innegablemente bello :-)

<h2>Conclusiones</h2>

Pues a parte de que los posts de vuelta de vacaciones suelen ser para volverse majara, saquemos varias conclusiones principales:

<ul>
<li>Como siempre decimos, que toda comprobación que nos podamos llevar de runtime a tiempo de compilación es un ahorro de quebraderos de cabeza cazando fallos con software en producción (lo cual es caro y es más fácil que haga rodar cabezas).</li>
<li>Que los constructores son la clave. Si definimos un TDA sobre los números pares, podemos controlar que los valores generados son correctos definiendo los constructores adecuados: el <code>Zero</code> y el <code>Next</code>. En ambos casos, tenemos la certeza de que se cumplen las leyes de los números enteros.</li>
<li>Que los métodos que operan sobre tipos de datos recursivos suelen ser, a menudo, recursivos también. Y no solo eso, sino que para poder generar valores del tipo en cuestión (<code>Even </code> en nuestro caso) solo deberían hacer uso de los constructores ya existentes.</li>
</ul>

En otro post hablaremos sobre la relación del álgebra de tipos y la definición de gramáticas formales...o no.

¡Agur de limón!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4257</wp:post_id>
  <wp:post_date>2016-09-28 12:00:27</wp:post_date>
  <wp:post_date_gmt>2016-09-28 10:00:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tipos-de-datos-algebraicos-en-scala</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="adt"><![CDATA[ADT]]></category>
  <category domain="post_tag" nicename="algebra"><![CDATA[algebra]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="cathegory"><![CDATA[cathegory]]></category>
  <category domain="post_tag" nicename="functional"><![CDATA[functional]]></category>
  <category domain="post_tag" nicename="product"><![CDATA[product]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="sum"><![CDATA[sum]]></category>
  <category domain="post_tag" nicename="tda"><![CDATA[TDA]]></category>
  <category domain="post_tag" nicename="theory"><![CDATA[theory]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>draftfeedback_requests</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:13:"57e2a85049dd2";a:3:{s:3:"key";s:13:"57e2a85049dd2";s:4:"time";s:10:"1474472016";s:7:"user_id";s:8:"59615419";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[27292645564]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/781071080274272257";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Algrebraic Data Types in Scala</title>
  <link>https://scalerablog.wordpress.com/2016/10/03/algrebraic-data-types-in-scala/</link>
  <pubDate>Mon, 03 Oct 2016 10:00:25 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=4276</guid>
  <description/>
  <content:encoded><![CDATA[What a delightful idea to come back from vacation with batteries fully charged and with some wacky ideas around our minds to write about. Best of these came from the very influence of <del>joints</del> the moon.

<h2>ADT?</h2>

An Algebraic Data Type (TDA from now so we can save money for each word in WordPress) is just a way to express a data type (Cat, Dog, Prevarication) based on an algebra. And when we say 'algebra', we mean type sums and products (of Integers, Cats, Cars, Prevarications, ...). For example:

[code]
Train = Locomotive + Wagon * Train
[/code]

How do one read that? A train may be: a locomotive <strong>OR</strong> a wagon <strong>AND</strong> another train (that may be as well a wagon and another train, that may be as well a ...).
Take a look at both disjunction and conjunction: the sum represents an OR, and the product represents an AND (like Boole algebra).

It's also worthy to notice that, from this type definition you can infer a recursive pattern. With the Train type, the base case is definitively the Locomotive and, at the recursive case, we have a wagon and another train. As we'll see later, this pattern is very frequent and makes easier the type definition.

<h2>And how are sum and product represented in Scala?</h2>

The easier way to represent the type sum (also called <strong>co-product</strong>), in a paradigm with polimorphism support (in general) and in Scala (in particular), is just the inheritance feature. If we have the following case:

[code language="scala"]
sealed trait Animal
case object Cat extends Animal
case object Dog extends Animal
[/code]

we're indeed expressing a type co-product:

[code]
Animal = Cat + Dog
[/code]

that is, an <code>Animal</code> can only be, a <code>Cat</code>, or a <code>Dog</code>.

Regarding the product, we could define it as the attribute set that compounds a certain type instance. For example,

[code language="scala"]
case class Student(name: String, age: Int)
[/code]

expressed as a product sum, would be as follows:

[code]
Student = String * Int
[/code]

So, for building a <code>Student</code> instance, you need a <code>String</code> and an <code>Int</code>.

If we try now to materialize the previously exposed train model (with some additives) we'll notice that

[code]
Wagon = String * Int
Train = Locomotive + Wagon * Train
[/code]

is translated into Scala as

[code language="scala"]
sealed trait Train
case object Locomotive extends Train
case class Wagon(model: String, passengers: Int)
case class Nexus(wagon: Wagon, next: Train)
[/code]

<h2>So what is it good for?</h2>

<a href="https://scalerablog.files.wordpress.com/2016/10/hqdefault.jpg"><img src="https://scalerablog.files.wordpress.com/2016/10/hqdefault.jpg" alt="hqdefault" width="480" height="360" class="aligncenter size-full wp-image-4282" /></a>

<del>...absolutely nothing, listen to me♩♪♫♬</del>. 
If you think, my fellow, that this is stuff that nobody uses, you haven't thought about which <code>scala.Prefef</code> structures are defined this way. <code>List</code>s, for example, as defined as:

[code language="scala"]
trait List[+T]
case object Nil extends List[Nothing]
case class ::[T](head: T, tail: List[T]) extends List[T]
[/code]

That is, a List can be, an empty one, or an element followed by another list.
If we express that idea in terms of products and co-products:

[code]
List[T] = EmptyList[T] + NonEmptyList[T]
NonEmptyList[T] = T * List[T]
[/code]

Please, notice that, the case of the empt list (<code>Nil</code>) has a bizarre but beautiful implementation in Scala. 

If we try to define an empty list for eeeeeeeeeevery single existing type, we would have to instantiate a <code>Nil[Cat]</code>, a <code>Nil[Dog]</code>, ...
In order to avoid this, and having an only <code>Nil</code>, we make it extend from <code>List[Nothing]</code> that, as you'll probably remember from other posts, <code>Nothing</code> extends from eeeeeeeeevery single existing type (both primitive and programmer defined). If we add the fact of <code>List[T]</code> being covariant at <code>T</code>, we'll have an only object <code>Nil</code> that represents the empty lists for all types. Awesome, right?

<a href="https://scalerablog.files.wordpress.com/2015/07/odtudee.gif"><img src="https://scalerablog.files.wordpress.com/2015/07/odtudee.gif" alt="odtUdEE" width="450" height="260" class="aligncenter size-full wp-image-590" /></a>

<h2>Example: Even numbers </h2>

In order to harden to this <del>new</del> way of thinking, let's suppose the following challenge: how could we represent even numbers in Scala?

<h3>Requirements</h3>

If we're not sophisticated enough and we trust a lil' bit in runtime assertions, we could say that even numbers are defined as:

[code language="scala"]
case class Even(value: Int) { 
  require(value%2==0, &quot;it's not even&quot;)
}
[/code]

But, if we try to create an <code>Even</code> with an odd integer number we'll get a giant NOPE:

[code language="scala"]
Even(1)
java.lang.IllegalArgumentException: requirement failed: it's not even
	at scala.Predef$.require(Predef.scala:233)
	at Even.&lt;init&gt;(&lt;console&gt;:7)
[/code]

However this assertion won't be verified until run-time, the moment when <code>require</code> is executed. Thus, our code could be compiled without being correct...
We can do it much better...

<h3>Next(Next(...))</h3>

Another option is to assume (and we won't discuss about it) that zero is an even number, that we have infinite memory installed in our machine, that the overflow error doesn't exist...

<a href="https://scalerablog.files.wordpress.com/2016/09/907958.png"><img src="https://scalerablog.files.wordpress.com/2016/09/907958.png" alt="907958" width="552" height="392" class="aligncenter size-full wp-image-4265" /></a>

In that, not so far, case (...), we could define even numbers as:

[code language="scala"]
sealed abstract class Even(val value: Int)
case object Zero extends Even(0)
case class Next(previousEven: Even) 
  extends Even(2 + previousEven.value)
[/code]

So, if we have a method that generate reservations for the Boat Love, that requires an even number of participants, we can use our brand new defined <code>Even</code> type:

[code language="scala"]
def loveBoatReservation(
  peopleAmount: Even): Reservation = ???
[/code]

Given there's no way to build an <code>Even</code> from an integer that is not even, we avoid uncomfortable situations at runtime, where the amount of people that get on the Love Boat are odd. Otherwise, someone could be...

<a href="https://scalerablog.files.wordpress.com/2016/09/forever-alone-400x400.png"><img src="https://scalerablog.files.wordpress.com/2016/09/forever-alone-400x400.png" alt="forever-alone-400x400" width="400" height="400" class="aligncenter size-full wp-image-4266" /></a>

<h3>Recursive ADTs and its techniques</h3>

Once the data type is defined, let's suppose we want to implement the sum of even numbers:

[code language="scala"]
def sum(e1: Even, e2: Even): Even = ???
[/code]

We handle several alternatives. One of them could be the quick-and-dirty one:

[code language="scala"]
def sum(e1: Even, e2: Even): Event = 
  new Even(e1.value + e2.value){}
[/code]

But take a closer look at the fact that we're totally ignoring the constructors we've defined. If we want to use pattern matching over the result:

[code language="scala"]
val four = new Even(4){}
sum(Zero, four) match {
  case Zero =&gt; 
    //it never gets inside this case!
  case Next(Next(Zero)) =&gt; 
    //OMG! IT DOESN'T FIT HERE EITHER!
}
scala.MatchError: $anon$1@649f2009 (of class $anon$1)
[/code]

<a href="https://scalerablog.files.wordpress.com/2016/09/51067781.jpg"><img src="https://scalerablog.files.wordpress.com/2016/09/51067781.jpg" alt="51067781" width="450" height="334" class="aligncenter size-full wp-image-4268" /></a>

The other technique (much more sophisticated by the way) consists on invoking a recursive method that, for each call, it decreases the second even number, while it increases the first one. For doing so, we make use of <code>Next</code> apply(constructor) and unapply(extractor) methods:

[code language="scala"]
def sum(e1: Even, e2: Even): Even = {
  @tailrec
  def rSum(ev1: Even, ev2: Even): (Even, Even) = {
    ev2 match {
      case Zero =&gt; (ev1, Zero)
      case Next(e) =&gt; rSum(Next(ev1), e)
    }
  }
  val (result, _) = rSum(e1, e2)
  result
}
[/code]

Undeniably beautiful :-)

<h2>Conclusions</h2>

Apart from becoming a lil' bit crazier when reading back-from-vacation posts, we can extract several main conclusions from what we've read:

<ul>
<li>As we always say, every possible assertion that we can check at compile time instead of runtime, it's saving time and headaches hunting bugs of software in production (which is more expensive and more keen to make heads roll).</li>
<li>Constructors are THE key. If we define an ADT, we can control that generated values of that type are correct by defining the proper constructors: <code>Zero</code> and <code>Next</code>. In both cases, we are certainly sure that even number rules are satisfied.</li>
<li>Methods that operate over recursive data types use to be recursive as well. And, apart from that, for generating values of the mentioned type (<code>Even </code> in our example) they should only use the existing constructor methods.</li>
</ul>

In a future post, we'll talk about the relation between data types algebra and definition of formal grammars...or not.

Peace out!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4276</wp:post_id>
  <wp:post_date>2016-10-03 12:00:25</wp:post_date>
  <wp:post_date_gmt>2016-10-03 10:00:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>algrebraic-data-types-in-scala</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="adt"><![CDATA[ADT]]></category>
  <category domain="post_tag" nicename="algebra"><![CDATA[algebra]]></category>
  <category domain="post_tag" nicename="cathegory"><![CDATA[cathegory]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="functional"><![CDATA[functional]]></category>
  <category domain="post_tag" nicename="product"><![CDATA[product]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="sum"><![CDATA[sum]]></category>
  <category domain="post_tag" nicename="tda"><![CDATA[TDA]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[27454284231]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/782883920144543745";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Valores perezosos</title>
  <link>https://scalerablog.wordpress.com/2016/10/26/valores-perezosos/</link>
  <pubDate>Wed, 26 Oct 2016 10:00:50 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=4288</guid>
  <description/>
  <content:encoded><![CDATA[Por si hubieras estado en un agujero durante los últimos 10 años y no lo supieras, Scala permite gestionar valores de evaluación perezosa. 

<a href="https://scalerablog.files.wordpress.com/2016/10/image.png"><img src="https://scalerablog.files.wordpress.com/2016/10/image.png?w=300" alt="image" width="300" height="213" class="aligncenter size-medium wp-image-4293" /></a>

En Scala, podemos definir un valor que no será evaluado hasta que se le llame de manera explícita. Por ejemplo:

[code language="scala"]
lazy val myLazyInt: Int = { println(&quot;hi&quot;); 2 }
[/code]

Como podéis ver, usando la notación <code>lazy</code> hemos definido de manera perezosa un entero que vale 2 y que imprime un 'hola' cuando se evalúa.
Aparte de haber violado la gran ley de la programación funcional (transparencia referencial) debido al infame <code>println</code>, side effects, muerte, destrucción, blah blah ...

<a href="https://scalerablog.files.wordpress.com/2016/10/anigif_enhanced-1822-1407333641-6.gif"><img src="https://scalerablog.files.wordpress.com/2016/10/anigif_enhanced-1822-1407333641-6.gif" alt="anigif_enhanced-1822-1407333641-6" width="500" height="263" class="aligncenter size-full wp-image-4292" /></a>

fijaros que si ejecutamos el fragmento de código, dicho println no se ejecuta.
No es sino hasta que otra expresión hace uso de nuestro entero perezoso, que no se ejecuta el bloque:

[code language="scala"]
val result = myLazyInt + 3
//woa! somebody printed 'hi' and I have a brand new 5 inside 'result'
[/code]

Una vez calculado <code>myLazyInt</code>, su valor no volverá a calcularse independientemente de cuantas veces se invoque. Es decir, ya no volverá a aparecer una misteriosa impresión que nos saluda:

[code language="scala"]
lazy val myLazyInt: Int = { println(&quot;hi&quot;); 2 }
myLazyInt
//&quot;hi&quot;
myLazyInt //nothing special happened now ...
myLazyInt //no matter how many times you invoke it...
myLazyInt //seriously, let it go...
[/code]

Curioso. La cuestión es, si yo defino un valor perezoso y lo paso a un método como argumento, ¿qué ocurre? ¿Se evalúa en el momento en que se invoca la función?¿Quizás dentro del cuerpo de la función? Eso dependerá de cómo definas los argumentos de tu método.

<h2>Call by name vs. call by value</h2>

Al definir un método, por lo general, definimos sus argumentos <strong>'by-value'</strong>, es decir, esperamos que el argumento ya se encuentre evaluado al pasarse al método:

[code language="scala"]
def myMethod(someInteger: Int): Int = {
  println(&quot;begin&quot;)
  val result = someInteger + 2
  println(&quot;end&quot;)
  result
}
[/code]

Si invocamos nuestro método con un número entero cualquiera:

[code language="scala"]
val n = 3
val result = myMethod(n)
//&quot;begin&quot;
//&quot;end&quot;
require(result == 5)
[/code]

Imprimimos nuestras dos trazas y ya está. Hasta aquí nada nuevo. 
¿Qué ocurre ahora si le pasamos nuestro valor perezoso?¿En qué momento imprimirá "hi"?¿Antes o después de las trazas del método? 
Probemos:

[code language="scala"]
myMethod(myLazyInt)
//&quot;hi&quot;
//&quot;begin&quot;
//&quot;end&quot;
[/code]

Lo imprimió antes, es decir, nuestro valor perezoso se evaluó antes de invocarse el método. ¿Esto por qué ocurre? Porque Scala, para poder ejecutar <code>myMethod</code>, necesita saber el valor de <code>someInteger</code>.
Es un fastidio si queremos mantener la evaluación de <code>myLazyInt</code> perezosa hasta el final. ¿Cómo lo solucionamos? Pasando el argumento <strong>'by-name'</strong>, es decir, indicando cómo se resolverá en el futuro el valor, pero sin pasar el valor de manera explícita:

[code language="scala"]
def myMethod(someInteger: =&gt; Int): Int = {
  println(&quot;begin&quot;)
  val result = someInteger + 2
  println(&quot;end&quot;)
  result
}
[/code]

De esta forma (<code>someInteger: =&gt; Int</code>) indicamos que le vamos a nuestro método como argumento una expresión que devolverá un entero (que no un entero). Si ahora ejecutamos el método pasándole nuestro valor perezoso no-evaluado:

[code language="scala"]
myMethod(myLazyInt)
//&quot;begin&quot;
//&quot;hi&quot;
//&quot;end&quot;
[/code]

<em>Voilà</em>! No es hasta el último momento en que se requiere el valor dentro del método, que no se evalúa nuestro entero perezoso. 

<h2>Otras formas de expresar laziness</h2>

Otra forma que nos puede resultar muy útil para denotar que una expresión se evalúa de manera perezosa, es el tipo <code>Function0</code>:

[code language="scala"]
trait Function0[+R]{
  def apply(): R
}
[/code]

Se trata de una función que recibe 0 argumentos y devuelve un tipo de salida. Normalmente se suele notar como sigue:

[code language="scala"]
val f: () =&gt; Int =
  () =&gt; 2
f.apply() //2
[/code]

No hay mucho más misterio...Una vez comprendido a grandes rasgos el funcionamiento de la evaluación perezosa en Scala, pasemos a cuestiones más interesantes...¿Un <code>Lazy</code> es algo con estado? 
La respuesta (o más preguntas) en el próximo post.

¡Agur de limón!


]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4288</wp:post_id>
  <wp:post_date>2016-10-26 12:00:50</wp:post_date>
  <wp:post_date_gmt>2016-10-26 10:00:50</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>valores-perezosos</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="by-name"><![CDATA[by-name]]></category>
  <category domain="post_tag" nicename="by-value"><![CDATA[by-value]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="laziness"><![CDATA[laziness]]></category>
  <category domain="post_tag" nicename="lazy"><![CDATA[lazy]]></category>
  <category domain="post_tag" nicename="state"><![CDATA[state]]></category>
  <category domain="post_tag" nicename="stateful"><![CDATA[stateful]]></category>
  <category domain="post_tag" nicename="val"><![CDATA[val]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>draftfeedback_requests</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:13:"58051c002956f";a:3:{s:3:"key";s:13:"58051c002956f";s:4:"time";s:10:"1476729856";s:7:"user_id";s:8:"59615419";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>draft_feedback</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:13:"58051c002956f";a:1:{i:0;a:2:{s:4:"time";s:10:"1476774359";s:7:"content";s:316:"Remarcaría que la violación de la RT se debe al println y no al hecho de ser lazy.

Añadiría un warning en plan: "cuidadín el paso de valor por nombre porque la evaluación se da tantas veces como referencias al valor se hagan dentro de la función y esto puede salir caro .. o algo"


Again, cool as it gets.

";}}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[28247559172]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/791218825475657728";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>136</wp:comment_id>
    <wp:comment_author><![CDATA[Más lazy&#8217;s, la mónada State y otras cosas con estado | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2016/11/16/mas-lazys-la-monada-state-y-otras-cosas-con-estado/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.100.156</wp:comment_author_IP>
    <wp:comment_date>2016-11-16 12:02:55</wp:comment_date>
    <wp:comment_date_gmt>2016-11-16 10:02:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] el anterior post hablábamos sobre la evaluación perezosa en Scala. Al final de dicho post, planteábamos una [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1479290606.4850299358367919921875;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1479290605</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1479290576.3811080455780029296875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Más lazy's, la mónada State y otras cosas con estado</title>
  <link>https://scalerablog.wordpress.com/2016/11/16/mas-lazys-la-monada-state-y-otras-cosas-con-estado/</link>
  <pubDate>Wed, 16 Nov 2016 10:00:53 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=4308</guid>
  <description/>
  <content:encoded><![CDATA[En el <a href="https://scalerablog.wordpress.com/2016/10/26/valores-perezosos/" target="_blank">anterior post</a> hablábamos sobre la evaluación perezosa en Scala. Al final de dicho post, planteábamos una pregunta: ¿Un <code>Lazy</code> tiene estado?

<a href="https://scalerablog.files.wordpress.com/2016/10/24195622.jpg"><img src="https://scalerablog.files.wordpress.com/2016/10/24195622.jpg?w=300" alt="24195622" width="300" height="300" class="aligncenter size-medium wp-image-4313" /></a>

Para responder a dicha pregunta, vamos a intentar definir un tipo que represente un valor Lazy como sigue:

[code language="scala"]
trait Lazy[T] {

  val evalF : () =&gt; T

  val value: Option[T] = None

}
object Lazy{
  def apply[T](f: =&gt; T): Lazy[T] =
    new Lazy[T]{ val evalF = () =&gt; f }
}
[/code]

Como se puede observar, nuestro tipo <code>Lazy</code> está parametrizado por un tipo <code>T</code> que representa el tipo del valor en cuestión(<code>Lazy[Int]</code> sería la representación de un entero perezoso).
Además, podemos ver que se compone de dos elementos principales que caracterizan a un Lazy:

<ul>
<li><strong>evalF</strong> : Función de cero argumentos que, al invocar su método apply, evalúa la expresión de T contenida.</li>
<li><strong>value</strong> : El valor resultante de la interpretación de la función <code>evalF</code>. Esta parte es la que denota el estado en el tipo <code>Lazy</code>, y solo admite dos posibles valores: <code>None</code> (no evaluado) o <code>Some(t)</code> (si ya ha sido evaluado y el resultado obtenido).</li>
</ul>

También hemos añadido un objeto companion que define el constructor de instancias Lazy que recibe un argumento <strong>by-name</strong> que se devuelve como resultado de la función <code>evalF</code>.

<a href="https://scalerablog.files.wordpress.com/2016/10/e9a2295b3db9b45c8f5484a09033c1c71cf88e3375bb7ff60456bc81c29a4e04.jpg"><img src="https://scalerablog.files.wordpress.com/2016/10/e9a2295b3db9b45c8f5484a09033c1c71cf88e3375bb7ff60456bc81c29a4e04.jpg?w=103" alt="e9a2295b3db9b45c8f5484a09033c1c71cf88e3375bb7ff60456bc81c29a4e04" width="103" height="150" class="aligncenter size-thumbnail wp-image-4303" /></a>

La cuestión ahora es: ¿Cómo unimos la función de evaluación con el valor que devuelve para hacer que <code>Lazy</code> mantenga un estado? Definiendo la función eval:

[code language="scala"]
trait Lazy[T] { lzy =&gt;

  val evalF : () =&gt; T

  val value: Option[T] = None

  def eval: (T, Lazy[T]) = {
    val evaluated = evalF.apply()
    evaluated -&gt; new Lazy[T]{ mutated =&gt;
      val evalF = lzy.evalF
      override val value = Some(evaluated)
      override def eval: (T, Lazy[T]) = 
        evaluated -&gt; mutated
    }
  } 

}
[/code]

La función eval devuelve una tupla de dos elementos:
<ul>
<li>el valor resultante de la evaluación de la expresión que representa el valor perezoso.</li>
<li>una nueva versión del valor <code>Lazy</code> que contiene el nuevo estado: el resultado de la evaluación.</li>
</ul>
Si os fijáis, lo que hace el método en primer lugar, es invocar a la función <strong>evalF</strong> para obtener el valor de tipo T que aún estaba sin evaluar.
Una vez hecho esto, lo devolvemos así como la nueva versión del elemento Lazy. Esta nueva versión (llamémosla <code>mutated</code>) tendrá en su atributo value el resultado de haber invocado a <code>evalF</code>. Del mismo modo, modificamos su método <code>eval</code>, para que en sucesivas invocaciones se devuelva a sí mismo y no genere nueva instancias que en realidad no varían su estado.

La cuestión interesante viene ahora: ¿es este un caso único? ¿Existen más 'cosas' que mantienen un estado? Hagamos un ejercicio de abstracción.

<h2>Buscando la genericidad: cosas-con-estado</h2>

Pensemos en el caso de una pila:

[code language="scala"]
sealed trait Stack[+T]
case object Empty extends Stack[Nothing]
case class NonEmpty[T](head: T, tail: Stack[T]) extends Stack
[/code]

La implementación sale casi sola. Pero centrémonos en el trait <code>Stack</code> y en un hipotético método <code>pop</code> que desapila un elemento que se devuelve junto al resto de la pila:

[code language="scala"]
sealed trait Stack[+T]{
  def pop(): (Option[T], Stack[T])
}
[/code]

¿Os suena de algo? ¿No se parece misteriosamente a 

[code language="scala"]
trait Lazy[T]{
  def eval: (T, Lazy[T])
}
[/code]

...?

Si intentamos sacar factor común entre <code>Lazy</code> y <code>Stack</code> podríamos definir un tipo mucho más abstracto llamado <code>State</code>:

[code language="scala"]
trait State[S,T] {
  def apply(s: S): (T, S)
}
[/code]

Simple pero bello: el trait <code>State</code> está parametrizado por dos tipos: S (tipo de estado) y T (información o elemento adicional que devuelve cada vez que mutamos el estado). Aquí donde lo veis, se trata de un patrón muy recurrente al diseñar sistemas en Scala. Siempre hay algo que mantiene un estado. Y todo lo que tiene estado muta. Y si ese algo muta de manera segura y elegante...oh man.
 
<h2>Esto ya existe ...</h2>

<a href="https://scalerablog.files.wordpress.com/2016/10/21495586.jpg"><img src="https://scalerablog.files.wordpress.com/2016/10/21495586.jpg?w=150" alt="21495586" width="150" height="150" class="aligncenter size-thumbnail wp-image-4296" /></a>

Toda esta historia que parece sacada de un ensayo post-moderno, resulta que ya ha sido objeto de estudio de personas que estudian cosas. Sin entrar en mucho detalle, en la librería <a href="https://github.com/scalaz/scalaz#scalaz" target="_blank">ScalaZ</a> podéis encontrar la mónada <code>State</code> que, además de lo descrito anteriormente, trae de serie un full-equipped de componibilidad y todo lo que conlleva ser Mónada (semigrupo, monoide, etc).

Si definimos nuestro tipo Lazy con la mónada State tenemos algo como:

[code language="scala"]
import scalaz.State

type Lazy[T] = (() =&gt; T, Option[T])

def Lazy[T](f: =&gt; T) = (() =&gt; f, None)

def eval[T] = State[Lazy[T], T]{
  case ((f, None)) =&gt; {
    val evaluated = f.apply()
    ((f, Some(evaluated)), evaluated)
  }
  case s@((_, Some(evaluated))) =&gt; (s, evaluated) 
}
[/code]

Al descomponer el jeroglífico egipcio arriba expuesto, dada la mónada <code>State[S,T]</code>, nuestro estado S va a ser una tupla de lo que representa en el fondo a una evaluación perezosa:

[code language="scala"]
type Lazy[T] = (() =&gt; T, Option[T])
[/code]

y que más arriba hemos descrito: 
<ul>
<li>Una Function0 que representa la evaluación demorada de T</li>
<li>El valor T que puede haberse evaluado o no</li>
</ul>
Para construir un valor Lazy, generamos una tupla con una función que recoge la expresión indicada por un argumento by-name del método <code>Lazy</code> y el valor None (porque aún no ha sido evaluado el Lazy):

[code language="scala"]
def Lazy[T](f: =&gt; T) = (() =&gt; f, None)
[/code]

Por último (y esta es la parte importante) definimos la única transición posible de estado que podemos concebir cuando hablamos de valores perezosos: la evaluación. Esta es la clave cuando diseñamos cualquier constructor de tipos que extiende de State: lo importante es modelar qué es nuestro tipo S y las transiciones de estado posibles.

Para el tipo Lazy, tenemos dos posibles casos: que la expresión aún no haya sido evaluada (en cuyo caso la evaluamos y devolvemos la misma función y el resultado) ó que la expresión ya haya sido evaluada (en cuyo caso dejamos el estado como está y devolvemos además el resultado de la evaluación):

[code language="scala"]
def eval[T] = State[Lazy[T], T]{
  case ((f, None)) =&gt; {
    val evaluated = f.apply()
    ((f, Some(evaluated)), evaluated)
  }
  case s@((_, Some(evaluated))) =&gt; (s, evaluated) 
}
[/code]

<a href="https://scalerablog.files.wordpress.com/2015/12/izcunxh.gif"><img src="https://scalerablog.files.wordpress.com/2015/12/izcunxh.gif?w=300" alt="iZcUNxH" width="300" height="168" class="aligncenter size-medium wp-image-944" /></a>

Para comprobar que seguimos contando con las mismas características iniciales para las que definimos el tipo Lazy (solo se evalúa una vez, solo se evalúa cuando es necesario, ...) lanzamos las siguiente aserciones:

[code language="scala"]
var sideEffectDetector: Int = 0

val two = Lazy {
  sideEffectDetector += 1
  2
}

require(sideEffectDetector==0)

val (_, (evaluated, evaluated2)) = (for {
  evaluated &lt;- eval[Int]
  evaluated2 &lt;- eval[Int]
} yield (evaluated, evaluated2)).apply(two)

require(sideEffectDetector == 1)
require(evaluated == 2)
require(evaluated2 == 2)
[/code]

Si os fijáis, como antes comentábamos, lo que se define en la for-comprehension son las transiciones o pasos que va a enfrentar el estado que nosotros queramos. Es decir, definimos las mutaciones que sufrirá un estado S cualquiera. Una vez definida la 'receta', la aplicamos al estado inicial que nosotros queramos.
En este caso, definimos como estado inicial un perezoso número entero dos. Para comprobar el número de veces que se evalúa nuestro Lazy, añadimos un var muy dummy que funcionará a modo de contador. Luego definimos en nuestra 'receta' que el estado debe mutar dos veces mediante la operación <code>eval</code>. Posteriormente comprobamos que solo se ha ejecutado una vez la expresión del bloque Lazy y que el valor resultante de la expresión es el esperado.

Os deseo la mejor de las sales de frutas para digerir todo esto :-)
Sentíos libres de añadir comentarios/amenazas en el post o en <a href="https://gitter.im/Scalera/general" target="_blank">nuestro canal de gitter</a>.

Hasta el próximo post.
¡Agur de limón!
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4308</wp:post_id>
  <wp:post_date>2016-11-16 12:00:53</wp:post_date>
  <wp:post_date_gmt>2016-11-16 10:00:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>mas-lazys-la-monada-state-y-otras-cosas-con-estado</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="eval"><![CDATA[eval]]></category>
  <category domain="post_tag" nicename="function0"><![CDATA[function0]]></category>
  <category domain="post_tag" nicename="lazy"><![CDATA[lazy]]></category>
  <category domain="post_tag" nicename="monad"><![CDATA[monad]]></category>
  <category domain="post_tag" nicename="pattern"><![CDATA[pattern]]></category>
  <category domain="post_tag" nicename="scalaz"><![CDATA[scalaz]]></category>
  <category domain="post_tag" nicename="side-effect"><![CDATA[side effect]]></category>
  <category domain="post_tag" nicename="stack"><![CDATA[stack]]></category>
  <category domain="post_tag" nicename="state"><![CDATA[state]]></category>
  <category domain="post_tag" nicename="stateful"><![CDATA[stateful]]></category>
  <category domain="post_tag" nicename="statet"><![CDATA[statet]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>draftfeedback_requests</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:13:"58051c3dbf3f3";a:3:{s:3:"key";s:13:"58051c3dbf3f3";s:4:"time";s:10:"1476729917";s:7:"user_id";s:8:"59615419";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>draft_feedback</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:13:"58051c3dbf3f3";a:1:{i:0;a:2:{s:4:"time";s:10:"1476773928";s:7:"content";s:337:"Técnica de Runar: Para explicar algo, te lo haces tu mismo +10 Cool

No quedaría algo más limpio si quitas los override de `value` y `eval`?

La implementación del estado me recuerda a http://learnyouahaskell.com/for-a-few-monads-more#state

Claro coño, Scalaz imita a Haskell en todo lo que puede XD

Veredicto: As cool as it gets.";}}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/798828681372127233";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[28969913399]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Lazy values</title>
  <link>https://scalerablog.wordpress.com/2016/10/31/lazy-values/</link>
  <pubDate>Mon, 31 Oct 2016 10:00:42 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=4322</guid>
  <description/>
  <content:encoded><![CDATA[Just in case you lived in a hole for the last ten years and you didn't know: Scala allows managing lazy values. 

<a href="https://scalerablog.files.wordpress.com/2016/10/image.png"><img src="https://scalerablog.files.wordpress.com/2016/10/image.png?w=300" alt="image" width="300" height="213" class="aligncenter size-medium wp-image-4293" /></a>

In Scala, we can define a value that won't be evaluated until it is explicitly invoked. For example:

[code language="scala"]
lazy val myLazyInt: Int = { println(&quot;hi&quot;); 2 }
[/code]

As you can see, using <code>lazy</code> notation, we've defined lazily an integer that stands for the literal 2 and also prints a 'hi' when it's evaluated.
Apart from violating the biggest functional programming law (referential transparency) due to the insidious <code>println</code>, side effects, dead, destruction, blah blah ...

<a href="https://scalerablog.files.wordpress.com/2016/10/anigif_enhanced-1822-1407333641-6.gif"><img src="https://scalerablog.files.wordpress.com/2016/10/anigif_enhanced-1822-1407333641-6.gif" alt="anigif_enhanced-1822-1407333641-6" width="500" height="263" class="aligncenter size-full wp-image-4292" /></a>

notice that, if we execute the code block, the previously mentioned 'println' is not executed. The block is not evaluated until any other expression makes use of our lazy integer value:

[code language="scala"]
val result = myLazyInt + 3
//woa! somebody printed 'hi' and I have a brand new 5 inside 'result'
[/code]

Once <code>myLazyInt</code> is evaluated, its value won't be calculated again, no matter how many times it's invoked. Therefore, the mysterious impression won't salute us anymore:

[code language="scala"]
lazy val myLazyInt: Int = { println(&quot;hi&quot;); 2 }
myLazyInt
//&quot;hi&quot;
myLazyInt //nothing special happened now ...
myLazyInt //no matter how many times you invoke it...
myLazyInt //seriously, let it go...
[/code]

Curious. The question that could come up is, if I define a lazy value and I pass it as a method parameter, what happens? Is it evaluated at the very same moment that the method is invoked? Maybe inside the method? That'll depend on the way you define your method's parameters.

<h2>Call by name vs. call by value</h2>

When defining a method, people usually define its parameter <strong>'by-value'</strong>, that means, that we expect the parameter to be already evaluated when it is passed to the method:

[code language="scala"]
def myMethod(someInteger: Int): Int = {
  println(&quot;begin&quot;)
  val result = someInteger + 2
  println(&quot;end&quot;)
  result
}
[/code]

If we invoke our method with any integer:

[code language="scala"]
val n = 3
val result = myMethod(n)
//&quot;begin&quot;
//&quot;end&quot;
require(result == 5)
[/code]

We just print both traces and it's not big deal. Nothing new so far.
What happens if we now pass to the method our lazy value? In which exact moment will it print the salutation? Before or after the method traces?
Let's try:

[code language="scala"]
myMethod(myLazyInt)
//&quot;hi&quot;
//&quot;begin&quot;
//&quot;end&quot;
[/code]

It printed it out before the method traces, which means that our lazy value was evaluated just before the method was invoked. Why does this happen? Because the way that Scala usually works needs the exact value of <code>someInteger</code> in order to be able to execute <code>myMethod</code>
It's a pity if we want to keep <code>myLazyInt</code> lazy until the very last moment. How do we fix that? We'll pass the argument <strong>'by-name'</strong>, that is, indicating the way the value has to be resolved instead of explicitly passing the value:

[code language="scala"]
def myMethod(someInteger: =&gt; Int): Int = {
  println(&quot;begin&quot;)
  val result = someInteger + 2
  println(&quot;end&quot;)
  result
}
[/code]

This way (<code>someInteger: =&gt; Int</code>) we indicate that our method requires as parameter an expression that, in the end, returns an integer and not an integer itself. If we now execute the method passing our non-yet evaluated lazy value:

[code language="scala"]
myMethod(myLazyInt)
//&quot;begin&quot;
//&quot;hi&quot;
//&quot;end&quot;
[/code]

<em>Voilà</em>! We made it. The 'hi' trace is not printed until the exact value of our lazy guy is required inside the method. 

<h2>Some other ways to express laziness</h2>

Another way to express a lazy evaluation, which could be extremely useful, is the <code>Function0</code> type:

[code language="scala"]
trait Function0[+R]{
  def apply(): R
}
[/code]

It's just a function that requires zero parameters and return an only output type. It's expressed as follows:

[code language="scala"]
val f: () =&gt; Int =
  () =&gt; 2
f.apply() //2
[/code]

And that's pretty much everything...Once understood in rough outlines how laziness works in Scala, let's move on to more interesting questions. A <code>Lazy</code> value, does it represent something stateful? 
The answer (or more extra questions) will be available in the following post.

Peace out!


]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4322</wp:post_id>
  <wp:post_date>2016-10-31 12:00:42</wp:post_date>
  <wp:post_date_gmt>2016-10-31 10:00:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>lazy-values</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="by-name"><![CDATA[by-name]]></category>
  <category domain="post_tag" nicename="by-value"><![CDATA[by-value]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="laziness"><![CDATA[laziness]]></category>
  <category domain="post_tag" nicename="state"><![CDATA[state]]></category>
  <category domain="post_tag" nicename="stateful"><![CDATA[stateful]]></category>
  <category domain="post_tag" nicename="val"><![CDATA[val]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[28411632827]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/793030710739075072";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1477908230]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>137</wp:comment_id>
    <wp:comment_author><![CDATA[More lazy values, the State monad and other stateful stuff | Scalera]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://scalerablog.wordpress.com/2016/11/21/more-lazy-values-the-state-monad-and-other-stateful-stuff/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.99.202</wp:comment_author_IP>
    <wp:comment_date>2016-11-21 12:02:17</wp:comment_date>
    <wp:comment_date_gmt>2016-11-21 10:02:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] the previous post, we talked about lazy evaluation in Scala. At the end of that post, we asked an interesting [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1479722537.910809993743896484375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1479722560</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1479722561.1973750591278076171875;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>More lazy values, the State monad and other stateful stuff</title>
  <link>https://scalerablog.wordpress.com/2016/11/21/more-lazy-values-the-state-monad-and-other-stateful-stuff/</link>
  <pubDate>Mon, 21 Nov 2016 10:00:25 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=4324</guid>
  <description/>
  <content:encoded><![CDATA[In the <a href="https://scalerablog.wordpress.com/2016/10/31/lazy-values/" target="_blank">previous post</a>, we talked about lazy evaluation in Scala. At the end of that post, we asked an interesting question: Does a <code>Lazy</code> value hold an state?

<a href="https://scalerablog.files.wordpress.com/2016/10/24195622.jpg"><img src="https://scalerablog.files.wordpress.com/2016/10/24195622.jpg?w=300" alt="24195622" width="300" height="300" class="aligncenter size-medium wp-image-4313" /></a>

In order to answer that question, we'll try to define a type that could represent the Lazy values:

[code language="scala"]
trait Lazy[T] {

  val evalF : () =&gt; T

  val value: Option[T] = None

}
object Lazy{
  def apply[T](f: =&gt; T): Lazy[T] =
    new Lazy[T]{ val evalF = () =&gt; f }
}
[/code]

As you can see, our <code>Lazy</code> type is parameterized by some <code>T</code> type that represents the actual value type(<code>Lazy[Int]</code> would be the representation for a lazy integer).
Besides that, we can see that it's composed of the two main Lazy type features:

<ul>
<li><strong>evalF</strong> : Zero-parameter function that, when its 'apply' method is invoked, it evaluates the contained T expression.</li>
<li><strong>value</strong> : The result value of the interpretation of the <code>evalF</code> function. This concrete part denotes the state in the <code>Lazy</code> type, and it only admit two possible values: <code>None</code> (not evaluated) or <code>Some(t)</code> (if it has been already evaluated and the result itself).</li>
</ul>

We've also added a companion object that defines the Lazy instance constructor that receives a <strong>by-name</strong> parameter that is returned as result of the <code>evalF</code> function.

<a href="https://scalerablog.files.wordpress.com/2016/10/e9a2295b3db9b45c8f5484a09033c1c71cf88e3375bb7ff60456bc81c29a4e04.jpg"><img src="https://scalerablog.files.wordpress.com/2016/10/e9a2295b3db9b45c8f5484a09033c1c71cf88e3375bb7ff60456bc81c29a4e04.jpg?w=103" alt="e9a2295b3db9b45c8f5484a09033c1c71cf88e3375bb7ff60456bc81c29a4e04" width="103" height="150" class="aligncenter size-thumbnail wp-image-4303" /></a>

Now the question is, how do we join both the evaluation function and the value that it returns so we can make <code>Lazy</code> an stateful type? We define the 'eval' function this way:

[code language="scala"]
trait Lazy[T] { lzy =&gt;

  val evalF : () =&gt; T

  val value: Option[T] = None

  def eval: (T, Lazy[T]) = {
    val evaluated = evalF.apply()
    evaluated -&gt; new Lazy[T]{ mutated =&gt;
      val evalF = lzy.evalF
      override val value = Some(evaluated)
      override def eval: (T, Lazy[T]) = 
        evaluated -&gt; mutated
    }
  } 

}
[/code]

The 'eval' function returns a two-element tuple:
<ul>
<li>The value result of evaluating the expression that stands for the lazy value.</li>
<li>a new <code>Lazy</code> value version that contains the new state: the T evaluation result.</li>
</ul>
If you take a closer look, what 'eval' method does in first place is to invoke the <strong>evalF</strong> function so it can retrieved the T value that remained until that point not-evaluated.
Once done, we return it as well as the new Lazy value version. This new version (let's call it <code>mutated</code> version) will have in its 'value' attribute the result of having invoked the <code>evalF</code> function. In the same way, we change its <code>eval</code> method, so in future invocations the Lazy instance itself is returned instead of creating new instances (because it actually won't change its state, like Scala's lazy definitions work).

The interesting question that comes next is: is this an isolated case? Could anything else be defined as stateful? Let's perform an abstraction exercise.

<h2>Looking for generics: stateful stuff</h2>

Let's think about a simple stack:

[code language="scala"]
sealed trait Stack[+T]
case object Empty extends Stack[Nothing]
case class NonEmpty[T](head: T, tail: Stack[T]) extends Stack
[/code]

The implementation is really simple. But let's focus in the <code>Stack</code> trait and in a hypothetical <code>pop</code> method that pops an element from the stack so it is returned as well as the rest of the stack:

[code language="scala"]
sealed trait Stack[+T]{
  def pop(): (Option[T], Stack[T])
}
[/code]

Does it sound familiar to you? It is mysteriously similar to

[code language="scala"]
trait Lazy[T]{
  def eval: (T, Lazy[T])
}
[/code]

isn't it?

If we try to re-factor for getting a common trait between <code>Lazy</code> and <code>Stack</code>, we could define a much more abstract type called <code>State</code>:

[code language="scala"]
trait State[S,T] {
  def apply(s: S): (T, S)
}
[/code]

Simple but pretty: the <code>State</code> trait is parameterized by two types: S (state type) and T (info or additional element that is returned in the specified state mutation). Though it's simple, it's also a ver common pattern when designing Scala systems. There's always something that holds certain state. And everything that has an state, it mutates. And if something mutates in a fancy and smart way...oh man.
 
<h2>That already exists...</h2>

<a href="https://scalerablog.files.wordpress.com/2016/11/24314442.jpg"><img src="https://scalerablog.files.wordpress.com/2016/11/24314442.jpg?w=150" alt="24314442" width="150" height="150" class="aligncenter size-thumbnail wp-image-4332" /></a>

All this story that seems to be created from a post-modern essay, has already been subject of study for people...that study stuff. Without going into greater detail, in <a href="https://github.com/scalaz/scalaz#scalaz" target="_blank">ScalaZ</a> library you can find  the <code>State</code> monad that, apart from what was previously pointed, is fully-equipped with composability and everything that being a monad means (semigroup, monoid, ...).

If we define our Lazy type with the State monad, we'll get something similar to:

[code language="scala"]
import scalaz.State

type Lazy[T] = (() =&gt; T, Option[T])

def Lazy[T](f: =&gt; T) = (() =&gt; f, None)

def eval[T] = State[Lazy[T], T]{
  case ((f, None)) =&gt; {
    val evaluated = f.apply()
    ((f, Some(evaluated)), evaluated)
  }
  case s@((_, Some(evaluated))) =&gt; (s, evaluated) 
}
[/code]

When decrypting the egyptian hieroglyph, given the <code>State[S,T]</code> monad, we have that our S state will be a tuple composed of what exactly represents a lazy expression (that we also previously described):

[code language="scala"]
type Lazy[T] = (() =&gt; T, Option[T])
[/code]

<ul>
<li>A Function0 that represents the lazy evaluation of T</li>
<li>The T value that might have been evaluated or not</li>
</ul>
For building a Lazy value, we generate a tuple with a function that stands for the expression pointed with the by-name parameter of the <code>Lazy</code> method; and the None value (because the Lazy guy hasn't been evaluated yet):

[code language="scala"]
def Lazy[T](f: =&gt; T) = (() =&gt; f, None)
[/code]

Last, but not least (it's actually the most important part), we define the only state transition that is possible in this type: the evaluation. This is the key when designing any State type builder: how to model what out S type stands for and the possible state transitions that we might consider.

In the case of the Lazy type, we have two possible situations: the expression hasn't been evaluated yet (in that case, we'll evaluate it and we'll return the same function and the result) or the expression has been already evaluated (in that case we won't change the state at all and we'll return the evaluation result):

[code language="scala"]
def eval[T] = State[Lazy[T], T]{
  case ((f, None)) =&gt; {
    val evaluated = f.apply()
    ((f, Some(evaluated)), evaluated)
  }
  case s@((_, Some(evaluated))) =&gt; (s, evaluated) 
}
[/code]

<a href="https://scalerablog.files.wordpress.com/2015/12/izcunxh.gif"><img src="https://scalerablog.files.wordpress.com/2015/12/izcunxh.gif?w=300" alt="iZcUNxH" width="300" height="168" class="aligncenter size-medium wp-image-944" /></a>

In order to check that we can still count on the initial features we described for the Lazy type (it can only be evaluated once, only when necessary, ...) we check the following assertions:

[code language="scala"]
var sideEffectDetector: Int = 0

val two = Lazy {
  sideEffectDetector += 1
  2
}

require(sideEffectDetector==0)

val (_, (evaluated, evaluated2)) = (for {
  evaluated &lt;- eval[Int]
  evaluated2 &lt;- eval[Int]
} yield (evaluated, evaluated2)).apply(two)

require(sideEffectDetector == 1)
require(evaluated == 2)
require(evaluated2 == 2)
[/code]

Please, do notice that, as we mentioned before, what is defined inside the for-comprehension are the same transitions or steps that the state we decide will face. That means that we define the mutations that any S state will suffer. Once the recipe is defined, we apply it to the initial state we want.
In this particular case, we define as initial state a lazy integer that will hold the 2 value. For checking the amount of times that our Lazy guy is evaluated, we just add a very dummy var that will be used as a counter. After that, we define inside our recipe that the state must mutate twice by ussing the <code>eval</code> operation. Afterwards we'll check that the expression of the Lazy block has only been evaluated once and that the returning value is the expected one.

I wish you the best tea for digesting all this crazy story :-)
Please, feel free to add comments/menaces at the end of this post or even at our <a href="https://gitter.im/Scalera/general" target="_blank">gitter channel</a>.

See you on next post.
Peace out!
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4324</wp:post_id>
  <wp:post_date>2016-11-21 12:00:25</wp:post_date>
  <wp:post_date_gmt>2016-11-21 10:00:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>more-lazy-values-the-state-monad-and-other-stateful-stuff</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="eval"><![CDATA[eval]]></category>
  <category domain="post_tag" nicename="function0"><![CDATA[function0]]></category>
  <category domain="post_tag" nicename="lazy"><![CDATA[lazy]]></category>
  <category domain="post_tag" nicename="monad"><![CDATA[monad]]></category>
  <category domain="post_tag" nicename="pattern"><![CDATA[pattern]]></category>
  <category domain="post_tag" nicename="scalaz"><![CDATA[scalaz]]></category>
  <category domain="post_tag" nicename="side-effect"><![CDATA[side effect]]></category>
  <category domain="post_tag" nicename="stack"><![CDATA[stack]]></category>
  <category domain="post_tag" nicename="state"><![CDATA[state]]></category>
  <category domain="post_tag" nicename="stateful"><![CDATA[stateful]]></category>
  <category domain="post_tag" nicename="statet"><![CDATA[statet]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/800640460515672064";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[29141719803]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>139</wp:comment_id>
    <wp:comment_author><![CDATA[Chris]]></wp:comment_author>
    <wp:comment_author_email>logger@posteo.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>145.130.57.78</wp:comment_author_IP>
    <wp:comment_date>2016-11-27 14:34:39</wp:comment_date>
    <wp:comment_date_gmt>2016-11-27 12:34:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[hi,
I played around with your examples but could only get them to run with 
((f, Some(evaluated)), evaluated) instead of (Some(f, Some(evaluated)), evaluated) in the eval method.
I'm using scalaz 7.2.7]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1480250079.7654459476470947265625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1480266750</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1480255191.3639509677886962890625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1480266751</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1480266751.6941440105438232421875;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>140</wp:comment_id>
    <wp:comment_author><![CDATA[jpaniego]]></wp:comment_author>
    <wp:comment_author_email>javiersantospaniego@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>37.134.145.36</wp:comment_author_IP>
    <wp:comment_date>2016-11-27 19:19:21</wp:comment_date>
    <wp:comment_date_gmt>2016-11-27 17:19:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Chris, 
you're totally right. It was a typo: sorry about that.
Thanks for being aware of it :-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>139</wp:comment_parent>
    <wp:comment_user_id>59615419</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1480267162</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1480267163.4720070362091064453125;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1480267164</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>141</wp:comment_id>
    <wp:comment_author><![CDATA[Eugene Platonov]]></wp:comment_author>
    <wp:comment_author_email>jozicq@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/+EugenePlatonov</wp:comment_author_url>
    <wp:comment_author_IP>66.192.207.22</wp:comment_author_IP>
    <wp:comment_date>2016-12-01 00:27:47</wp:comment_date>
    <wp:comment_date_gmt>2016-11-30 22:27:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Should line 17 be
require(evaluated2 == 2)
?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1480544868.969645023345947265625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value>googleplus</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value>https://lh4.googleusercontent.com/-yw9D0McB_OA/AAAAAAAAAAI/AAAAAAAAD1I/2HOJ6NYKu_Y/photo.jpg?sz=50</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value>106536012517091978014</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1480575676</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1480549708.6013190746307373046875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1480575676</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1480575676.219192028045654296875;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>142</wp:comment_id>
    <wp:comment_author><![CDATA[jpaniego]]></wp:comment_author>
    <wp:comment_author_email>javiersantospaniego@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>87.221.183.116</wp:comment_author_IP>
    <wp:comment_date>2016-12-01 09:03:39</wp:comment_date>
    <wp:comment_date_gmt>2016-12-01 07:03:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You're totally right! Being in a rush is never a good option for publishing posts :-p

Thanks]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>141</wp:comment_parent>
    <wp:comment_user_id>59615419</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1480575819</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1480575819.8339960575103759765625;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1480575819</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Scalera tip: Mantén estado en tu actor sin usar un solo VAR</title>
  <link>https://scalerablog.wordpress.com/2017/03/15/scalera-tip-manten-estado-en-tu-actor-sin-usar-un-solo-var/</link>
  <pubDate>Wed, 15 Mar 2017 08:00:42 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=4342</guid>
  <description/>
  <content:encoded><![CDATA[Es de todos sabido que usar VARs es algo que, aparte de mal visto, está mal, es el infierno en vida, hace que mueran gatitos y muchas otras perlitas que probablemente ya habréis oído antes y que por poco os ha causado una muerte lenta y dolorosa en el cadalso.

<a href="https://scalerablog.files.wordpress.com/2017/03/8a9.gif"><img src="https://scalerablog.files.wordpress.com/2017/03/8a9.gif" alt="" width="245" height="192" class="aligncenter size-full wp-image-4343" /></a>

La esencia en programación funcional es, por tanto, la inmutabilidad: cada vez que muto un elemento, genero uno nuevo.

<h3>What about Akka actors?</h3>

Cuando hablamos de actores, podemos definirlos como unidades con estado que procesan de manera secuencial una cola de mensajes, asociando (o no) a cada uno de estos mensajes una cierta lógica computacional.

Siempre se ha dicho que para mantener dicho estado dentro de la lógica de un actor, no pasaba nada si usabas un var:

<blockquote>
Es imposible que hayan problemas de concurrencia: solo el propio actor tiene acceso a dicho VAR y procesará un solo mensaje al mismo tiempo.
</blockquote>

Pero quizás podamos renunciar a esta premisa si buscamos una manera de redefinir el comportamiento del actor en base a un nuevo estado.

<h2>Mortal approach</h2>

Siguiendo la filosofía antes descrita, la primera (y más directa) aproximación para mantener el estado en un actor se parecería bastante a lo siguiente:

[code lang="scala"]
class Foo extends Actor{
  var state: Int = 0
  override def receive = {
    case Increase =&gt; state += 1
  }
}
[/code]

Cada vez que llega un mensaje <code>Increase</code>, modificamos el valor de state, sumando 1.
Hasta aquí nada complicado, ¿no?

<a href="https://scalerablog.files.wordpress.com/2017/03/giphy.gif"><img src="https://scalerablog.files.wordpress.com/2017/03/giphy.gif?w=300" alt="" width="300" height="226" class="aligncenter size-medium wp-image-4344" /></a>
<h2>Immutable approach</h2>

Sin embargo, podríamos definir una función receive que estuviera parametrizada por un cierto estado, de manera que cuando llegue un mensaje, el estado a tener en cuenta sea este parámetro.

Si se diera la circunstancia de tener que actualizar el valor de dicho estado, bastaría con invocar al método <code>become</code> que modifica el comportamiento del actor. En nuestro caso, dicha modificación del comportamiento consistiría en cambiar el valor del estado.

Si usamos el mismo ejemplo que antes:

[code lang="scala"]
class Foo extends Actor{
  def receive(state: Int): Receive = {
    case Increase =&gt;
      context.become(
        receive(state + 1),
        discardOld = true)
  }
  override def receive = receive(0)
}
[/code]

vemos que la función que define el <code>receive</code> en base al estado recibe un parámetro denominado <code>state</code>. Cuando llega un mensaje de tipo <code>Increase</code>, lo que hacemos es invocar a <code>become</code> para modificar el comportamiento del actor, pasando como argumento el nuevo estado a tener en cuenta.

Si queremos mejorar un poco la legibilidad, podríamos incluso abstraer todo actor con estado actualizable:

[code language="scala"]
trait SActor[State] extends Actor {
  val initialState: State
  def receive(state: State): Receive
  def update(state: State): Receive =
    context.become(
      receive(state),
      discardold = true)
  override def receive =
    receive(initialState)
}
[/code]

de manera que se especifique el estado inicial del actor, una nueva función de <code>receive</code> que queda parametrizada por el nuevo estado a gestionar, y una nueva función de update que se encarga de realizar la llamada a <code>become</code> como antes explicábamos.
Con todo ello nos queda un nuevo actor <code>Foo</code> mucho más curioso:

[code language="scala"]
class Foo extends SActor[Int] {
  val initialState = 0
  def receive(state: Int): Receive = {
    case Increase =&gt; update(state +1)
  }
}
[/code]

<h2>Potential hazardous issues</h2>

Nótese que en el ejemplo de antes hemos pasado un segundo argumento: <code>discardOld = true</code>. Este argumento indica si el comportamiento nuevo debe apilarse sobre el anterior o si por el contrario debe sustituirlo por completo.

Supongamos que usáramos un <code>discardOld = false</code>. Si cada vez que llegase un mensaje de incremento, apilásemos un nuevo comportamiento, podríamos llegar a tener un problema de desbordamiento.

<a href="https://scalerablog.files.wordpress.com/2017/03/giphy-1.gif"><img src="https://scalerablog.files.wordpress.com/2017/03/giphy-1.gif" alt="" width="480" height="366" class="aligncenter size-full wp-image-4345" /></a>

Hasta el próximo briconsejo.

Agur de limón :-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4342</wp:post_id>
  <wp:post_date>2017-03-15 10:00:42</wp:post_date>
  <wp:post_date_gmt>2017-03-15 08:00:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scalera-tip-manten-estado-en-tu-actor-sin-usar-un-solo-var</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="actor"><![CDATA[actor]]></category>
  <category domain="post_tag" nicename="akka"><![CDATA[akka]]></category>
  <category domain="post_tag" nicename="become"><![CDATA[become]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="discard"><![CDATA[discard]]></category>
  <category domain="post_tag" nicename="immutable"><![CDATA[immutable]]></category>
  <category domain="post_tag" nicename="mutable"><![CDATA[mutable]]></category>
  <category domain="post_tag" nicename="receive"><![CDATA[receive]]></category>
  <category domain="post_tag" nicename="state"><![CDATA[state]]></category>
  <category domain="post_tag" nicename="var"><![CDATA[var]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>draftfeedback_requests</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:13:"58c19c7871c4c";a:3:{s:3:"key";s:13:"58c19c7871c4c";s:4:"time";s:10:"1489083512";s:7:"user_id";s:8:"59615419";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4343]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[2883315589]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/841922668282695681";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>154</wp:comment_id>
    <wp:comment_author><![CDATA[Alejo Jara]]></wp:comment_author>
    <wp:comment_author_email>jara226@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>181.128.41.205</wp:comment_author_IP>
    <wp:comment_date>2017-03-15 11:16:29</wp:comment_date>
    <wp:comment_date_gmt>2017-03-15 09:16:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Wwwwooowww que información más útil. Muchas gracias por compartir este conocimiento. Clap clap.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1489569391.163980007171630859375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1489571563.3664638996124267578125;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1489571562</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1489571562</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>155</wp:comment_id>
    <wp:comment_author><![CDATA[Alejo Jara]]></wp:comment_author>
    <wp:comment_author_email>jara226@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>181.128.41.205</wp:comment_author_IP>
    <wp:comment_date>2017-03-15 14:49:55</wp:comment_date>
    <wp:comment_date_gmt>2017-03-15 12:49:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Cual seria la manera de obtener ese estado?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1489582197</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1489582196</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1489582197.56245899200439453125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>156</wp:comment_id>
    <wp:comment_author><![CDATA[jpaniego]]></wp:comment_author>
    <wp:comment_author_email>javiersantospaniego@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2.137.252.126</wp:comment_author_IP>
    <wp:comment_date>2017-03-15 14:58:39</wp:comment_date>
    <wp:comment_date_gmt>2017-03-15 12:58:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hola Alejo,

si te refieres a obtener dicho estado desde fuera del actor, dado que la única manera de interactuar con un actor es vía mensaje, podrías definir un tipo de mensaje GetState. Algo del siguiente estilo:

[code lang="scala"]
class Foo extends SActor[Int] {
  val initialState = 0
  def receive(state: Int): Receive = {
    case Increase =&amp;gt; update(state +1)
    case GetState =&amp;gt; sender ! state
  }
}
[/code]

Date cuenta que haces referencia al parámetro de la función receive, que en el momento de recepción del mensaje constituye el estado de tu actor :-)

Gracias por tus comentarios.

Un saludo]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>155</wp:comment_parent>
    <wp:comment_user_id>59615419</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1489582720</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1489582720.8105208873748779296875;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>2891273937</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1489582721</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>157</wp:comment_id>
    <wp:comment_author><![CDATA[Alejo Jara]]></wp:comment_author>
    <wp:comment_author_email>jara226@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>181.128.41.205</wp:comment_author_IP>
    <wp:comment_date>2017-03-15 15:33:48</wp:comment_date>
    <wp:comment_date_gmt>2017-03-15 13:33:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Genial, muchas gracias!!!!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>156</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1489584829</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1489584830.3257019519805908203125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>2892363173</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1489584831</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Scalera tip: Keep your actor's state with no VAR at all!</title>
  <link>https://scalerablog.wordpress.com/2017/03/20/scalera-tip-keep-your-actors-state-with-no-var-at-all/</link>
  <pubDate>Mon, 20 Mar 2017 08:00:43 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=4354</guid>
  <description/>
  <content:encoded><![CDATA[It's pretty well known that using VARs is, apart from unethical, the evil itself, some kind of hell, it make kitties die and many other stuff you might probably heard before and that could eventually be the cause of a painfull slowly dead.

<a href="https://scalerablog.files.wordpress.com/2017/03/8a9.gif"><img src="https://scalerablog.files.wordpress.com/2017/03/8a9.gif" alt="" width="245" height="192" class="aligncenter size-full wp-image-4343" /></a>

The essence of functional programming is therefore the immutability: every time I mutate an element, I actually generate a new one.

<h3>What about Akka actors?</h3>

When we talk about actors, we can define them as stateful computation units that sequentially process a message queue by reacting(or not) to each of these messages.

It's always been said that, in order to keep state within some actor's logic, it was ok to use VARs:

<blockquote>
It's impossible that concurrency problems happen: it's the actor itself and nobody else who access that var and will only process one message at a time.
</blockquote>

But maybe, we could renounce to this premise if we look for some way to redefine the actor's behavior based on a new state.

<h2>Mortal approach</h2>

If we follow the previously described philosophy, the very first (and more straight forward) approach for keeping some actor's state would be pretty similar to the following:

[code lang="scala"]
class Foo extends Actor{
  var state: Int = 0
  override def receive = {
    case Increase =&gt; state += 1
  }
}
[/code]

Every time an <code>Increase</code> arrives, we modify the state value by adding 1.
So easy so far, right?

<a href="https://scalerablog.files.wordpress.com/2017/03/giphy.gif"><img src="https://scalerablog.files.wordpress.com/2017/03/giphy.gif?w=300" alt="" width="300" height="226" class="aligncenter size-medium wp-image-4344" /></a>
<h2>Immutable approach</h2>

Nevertheless, we could define a <code>receive</code> function parameterized by certain state, so when a message arrives, this parameter is the state to take into account.

If the circumstances to mutate the state took place, we would just invoke the <code>become</code> method that would modify the actor's behavior. In our case, that behavior mutation would consist on changing the state value.

If we use the previously defined example:

[code lang="scala"]
class Foo extends Actor{
  def receive(state: Int): Receive = {
    case Increase =&gt;
      context.become(
        receive(state + 1),
        discardOld = true)
  }
  override def receive = receive(0)
}
[/code]

we can notice that the function defined by <code>receive</code> is parameterized by some <code>state</code> argument. When some <code>Increase</code> message arrives, what we perform is an invocation to <code>become</code> for modifying the actor's behavior, passing as an argument the new state to handle.

If we wanted some extra legibility, we could even get abstract from every updatabe-state actor:

[code language="scala"]
trait SActor[State] extends Actor {
  val initialState: State
  def receive(state: State): Receive
  def update(state: State): Receive =
    context.become(
      receive(state),
      discardold = true)
  override def receive =
    receive(initialState)
}
[/code]

this way, we just have to define the initial state of some actor, a new parameterized <code>receive</code> function and a new update function that takes care of performing the proper <code>become</code> call as explained before.
With all these in mind, we now have some cuter brand new <code>Foo</code> actor:

[code language="scala"]
class Foo extends SActor[Int] {
  val initialState = 0
  def receive(state: Int): Receive = {
    case Increase =&gt; update(state +1)
  }
}
[/code]

<h2>Potential hazardous issues</h2>

Please, do notice that in the featuring example, we've used a second argument for <code>become</code>: <code>discardOld = true</code>. This argument settles whether the new behavior should be stashed on the top of the older one, or 'au contraire' it should completely substitute the previous behavior.

Let's suppose we used <code>discardOld = false</code>. If every single time a new <code>Increase</code> message arrived we had to stash a new behavior, we could obtain a wonderful overflow issue.

<a href="https://scalerablog.files.wordpress.com/2017/03/giphy-1.gif"><img src="https://scalerablog.files.wordpress.com/2017/03/giphy-1.gif" alt="" width="480" height="366" class="aligncenter size-full wp-image-4345" /></a>

See you in the next tip.

Peace out :-)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4354</wp:post_id>
  <wp:post_date>2017-03-20 10:00:43</wp:post_date>
  <wp:post_date_gmt>2017-03-20 08:00:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scalera-tip-keep-your-actors-state-with-no-var-at-all</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="akka"><![CDATA[akka]]></category>
  <category domain="post_tag" nicename="become"><![CDATA[become]]></category>
  <category domain="post_tag" nicename="discard"><![CDATA[discard]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="immutable"><![CDATA[immutable]]></category>
  <category domain="post_tag" nicename="mutable"><![CDATA[mutable]]></category>
  <category domain="post_tag" nicename="receive"><![CDATA[receive]]></category>
  <category domain="post_tag" nicename="state"><![CDATA[state]]></category>
  <category domain="post_tag" nicename="var"><![CDATA[var]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/843734757099868160";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[3060878856]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Scalera tip: contextos implícitos pegajosos</title>
  <link>https://scalerablog.wordpress.com/2017/04/10/scalera-tip-contextos-implicitos-pegajosos/</link>
  <pubDate>Mon, 10 Apr 2017 08:30:56 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=4361</guid>
  <description/>
  <content:encoded><![CDATA[El otro día (para la gente normal: hace cosa de 1 mes) vi que el gran Viktor Klang twiteaba acerca de como quitar las molestas evidencias implícitas en definiciones de métodos. Y me pareció tan elegantes algunas de las cosas que leí, que me vi en la obligación de compartir algunas ideas al hilo de dichos consejos con aquellos de vosotros que no le sigáis aun en Twitter (<a href="https://twitter.com/viktorklang" target="_blank">@viktorklang</a>).

<a href="https://scalerablog.files.wordpress.com/2017/04/giphy.gif"><img src="https://scalerablog.files.wordpress.com/2017/04/giphy.gif" alt="" width="400" height="225" class="aligncenter size-full wp-image-4362" /></a>

<h2>La situación</h2>

Imaginad el típico método polimórfico en el cual necesitamos un execution context para ejecutar un futuro:

[code language="scala"]
import scala.concurrent.{ExecutionContext, Future}

def myMethod[T]
  (element: T)
  (implicit ev: ExecutionContext): Future[Boolean] = ???
[/code]

Es tan típico como feo, el tener que repetir la coletilla de <code>(implicit ev: ExecutionContext)</code> en 10 métodos seguidos...

<h2>Jugando con type alias</h2>

La idea feliz que se propone es definir un type alias del siguiente tipo:

[code language="scala"]
type EC[_] = ExecutionContext
[/code]

De esta forma, re-definiríamos la cabecera de nuestro método como sigue:

[code language="scala"]
def myMethod[T:EC](element: T): Future[Boolean] = ???
myMethod(&quot;hi&quot;)
[/code]

¿Bello o no?

<a href="https://scalerablog.files.wordpress.com/2017/04/giphy-1.gif"><img src="https://scalerablog.files.wordpress.com/2017/04/giphy-1.gif" alt="" width="320" height="240" class="aligncenter size-full wp-image-4365" /></a>

<h2>Otras posibilidades</h2>

<h3>Métodos no polifórmicos</h3>

En el caso en que nuestro método no esté parametrizado, tendríamos que añadir algo de boilerplate (añadiendo un wildcard para el tipo que parametriza el método), pero en esencia debería seguir funcionando el mismo principio:

[code language="scala"]
def myMethod[_:EC](element: Int): Future[Boolean] = ???
myMethod(2)
[/code]

<h3>Múltiples contextos implícitos</h3>

En el no-tan-descabellado caso en el que necesitáramos varios parámetros implícitos de distintos tipos, necesitaríamos definir tantos type alias como tipos distintos de parámetros requiriésemos:

[code language="scala"]
type EC[_] = ExecutionContext
type MongoDB[_] = MongoDBDatabase

def myMethod[_:EC:MongoDB](element: Int): Future[Boolean] = ???
[/code]

<h2>Pero, ¿y si...?</h2>

<h3>Múltiples parámetros implícitos del mismo tipo</h3>

En el caso de que tengamos múltiples parámetros implícitos del mismo tipo, 

[code language="scala"]
def myMethod
  (element: Int)
  (implicit ev1: ExecutionContext, ev2: ExecutionContext): Future[Boolean] = ???
[/code]

ocurriría que ...

<a href="https://scalerablog.files.wordpress.com/2017/04/giphy-2.gif"><img src="https://scalerablog.files.wordpress.com/2017/04/giphy-2.gif" alt="" width="485" height="273" class="aligncenter size-full wp-image-4366" /></a>

Bueno, por definición eso es imposible ya que incurriría en un problema de ambigüedad a la hora de resolver implícitos. Es cierto que Scala nos permite este tipo de signaturas, pero sólo podríamos invocar al método haciendo explícitos los argumentos del segundo grupo de parámetros:

[code language="scala"]
myMethod(2)(ec1,ec2)
[/code]

Lo cual es un tanto...

<a href="https://scalerablog.files.wordpress.com/2017/04/giphy-3.gif"><img src="https://scalerablog.files.wordpress.com/2017/04/giphy-3.gif" alt="" width="460" height="259" class="aligncenter size-full wp-image-4367" /></a>

<h3>Contextos implícitos que son constructores de tipos</h3>

Cuando tenemos parámetros implícitos que son constructores de tipos como <code>List[T], Future[T], Option[T]</code> ...

En realidad depende.

<h4>Caso1</h4>

Si el tipo que parametriza el método y el que parametriza la evidencia no están relacionados, no hay mucho problema: definimos otro type alias y a correr:

[code language="scala"]
type EC[_] = ExecutionContext
type MongoDB[_] = MongoDBDatabase
type IntOpt[_] = Option[Int]
type StrList[_] = List[String]

def myMethod[_:EC:MongoDB:IntOpt:StrList](
  element: Int): Future[Boolean] = ???
[/code]

Lo cual sería el equivalente a:

[code language="scala"]
def myMethod(
  element: Int)(
  implicit ev1: ExecutionContext,
  ev2: MongoDBDatabase,
  ev3: Option[Int],
  ev4: List[String]): Future[Boolean] = ???
[/code]

<h4>Caso 2</h4>

Si el tipo que parametriza el método y el que parametriza la evidencia tienen que concordar ...

<a href="https://scalerablog.files.wordpress.com/2017/04/giphy-4.gif"><img src="https://scalerablog.files.wordpress.com/2017/04/giphy-4.gif" alt="" width="200" height="150" class="aligncenter size-full wp-image-4368" /></a>

Bueno no es posible. El syntax sugar implica que el tipo que parametriza el método vaya en concordancia con el tipo que parametriza nuestra evidencia. Quizás era todo demasiado bonito :-)

Hasta el próximo post. ¡Agur de limón!
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4361</wp:post_id>
  <wp:post_date>2017-04-10 10:30:56</wp:post_date>
  <wp:post_date_gmt>2017-04-10 08:30:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scalera-tip-contextos-implicitos-pegajosos</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="alias"><![CDATA[alias]]></category>
  <category domain="category" nicename="castellano"><![CDATA[Castellano]]></category>
  <category domain="post_tag" nicename="context"><![CDATA[context]]></category>
  <category domain="post_tag" nicename="implicit"><![CDATA[implicit]]></category>
  <category domain="post_tag" nicename="klang"><![CDATA[klang]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="scalera"><![CDATA[scalera]]></category>
  <category domain="post_tag" nicename="tip"><![CDATA[tip]]></category>
  <category domain="post_tag" nicename="type"><![CDATA[type]]></category>
  <category domain="post_tag" nicename="viktor"><![CDATA[viktor]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>draftfeedback_requests</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:13:"58e6691242b3c";a:3:{s:3:"key";s:13:"58e6691242b3c";s:4:"time";s:10:"1491495186";s:7:"user_id";s:8:"59615419";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>draft_feedback</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:13:"58e6691242b3c";a:1:{i:0;a:2:{s:4:"time";s:10:"1491497814";s:7:"content";s:78:"Increiblemente hackish.... pero ...

Fucking awesome! Pienso usarlo desde ya! ";}}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105992117962932841165/posts/eQ87Dtt5NJd]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[3829484277]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/851352104899883008";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_17164161</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_16940087</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Scalera tip: Handling sticky implicit contexts</title>
  <link>https://scalerablog.wordpress.com/2017/04/18/scalera-tip-handling-sticky-implicit-contexts/</link>
  <pubDate>Tue, 18 Apr 2017 08:30:39 +0000</pubDate>
  <dc:creator>jpaniego</dc:creator>
  <guid isPermaLink="false">https://scalerablog.wordpress.com/?p=4369</guid>
  <description/>
  <content:encoded><![CDATA[A couple of days ago (translation for the masses: like a month ago) I noticed Viktor Klang was tweeting about removing the annoying implicit evidences from methods. And some things I read seemed so elegant to me that I was forced to share some related ideas with all of you that don't follow him at Twitter (<a href="https://twitter.com/viktorklang" target="_blank">@viktorklang</a>).

<a href="https://scalerablog.files.wordpress.com/2017/04/giphy.gif"><img src="https://scalerablog.files.wordpress.com/2017/04/giphy.gif" alt="" width="400" height="225" class="aligncenter size-full wp-image-4362" /></a>

<h2>Setting some context</h2>

Imagine the typical polymorphic method where we need an execution context for evaluating some Future:

[code language="scala"]
import scala.concurrent.{ExecutionContext, Future}

def myMethod[T]
  (element: T)
  (implicit ev: ExecutionContext): Future[Boolean] = ???
[/code]
You could say it's as typical as disgusting, having to repeat the same exact words in the following 10 method definitions: <code>(implicit ev: ExecutionContext)</code>.

<h2>Playing with type alias</h2>

The happy idea that is being proposed is to define a type alias like the following one:

[code language="scala"]
type EC[_] = ExecutionContext
[/code]

This way, by adding some syntax sugar, we would re-define the method signature:

[code language="scala"]
def myMethod[T:EC](element: T): Future[Boolean] = ???
myMethod(&quot;hi&quot;)
[/code]

Beautiful, isn't it?

<a href="https://scalerablog.files.wordpress.com/2017/04/giphy-1.gif"><img src="https://scalerablog.files.wordpress.com/2017/04/giphy-1.gif" alt="" width="320" height="240" class="aligncenter size-full wp-image-4365" /></a>

<h2>Some other possibilities</h2>

<h3>Non-polymorphic methods</h3>

In case our method isn't parameterized, we would have to add some boilerplate (by adding a wildcard for the type that parameterizes the method). In essence, it should be working the same principle:

[code language="scala"]
def myMethod[_:EC](element: Int): Future[Boolean] = ???
myMethod(2)
[/code]

<h3>Multiple implicit contexts</h3>

The not-so-crazy case in which we needed several implicit parameters of different natures, we would have to define as many type alias as different type parameters we required:

[code language="scala"]
type EC[_] = ExecutionContext
type MongoDB[_] = MongoDBDatabase

def myMethod[_:EC:MongoDB](element: Int): Future[Boolean] = ???
[/code]

<h2>But what if ...?</h2>

<h3>Multiple implicit parameters with same type</h3>

In case we have several implicit parameters that share the same type, 

[code language="scala"]
def myMethod
  (element: Int)
  (implicit ev1: ExecutionContext, ev2: ExecutionContext): Future[Boolean] = ???
[/code]

it turns out that ...

<a href="https://scalerablog.files.wordpress.com/2017/04/giphy-2.gif"><img src="https://scalerablog.files.wordpress.com/2017/04/giphy-2.gif" alt="" width="485" height="273" class="aligncenter size-full wp-image-4366" /></a>

Well, by definition that's impossible given that it would incur in some ambiguity issue when resolving implicits. It's true that Scala allows having these kind of signatures, but we could only invoke them by making explicit the arguments contained in the second parameter group.:

[code language="scala"]
myMethod(2)(ec1,ec2)
[/code]

which is kind of...

<a href="https://scalerablog.files.wordpress.com/2017/04/giphy-3.gif"><img src="https://scalerablog.files.wordpress.com/2017/04/giphy-3.gif" alt="" width="460" height="259" class="aligncenter size-full wp-image-4367" /></a>

<h3>Type-constructor implicit contexts</h3>

When we have implicit parameters that are also type constructors like <code>List[T], Future[T], Option[T]</code> ...

...well, it actually depends.

<h4>Case 1</h4>

If the type that parameterizes the method and the one that parameterizes the evidence are not related, there's no big deal: we define another type alias and move on:

[code language="scala"]
type EC[_] = ExecutionContext
type MongoDB[_] = MongoDBDatabase
type IntOpt[_] = Option[Int]
type StrList[_] = List[String]

def myMethod[_:EC:MongoDB:IntOpt:StrList](
  element: Int): Future[Boolean] = ???
[/code]

Which would be equivalent to:

[code language="scala"]
def myMethod(
  element: Int)(
  implicit ev1: ExecutionContext,
  ev2: MongoDBDatabase,
  ev3: Option[Int],
  ev4: List[String]): Future[Boolean] = ???
[/code]

<h4>Case 2</h4>

If the type that parameterizes the method and the one that parameterizes the evidence have to match ...

<a href="https://scalerablog.files.wordpress.com/2017/04/giphy-4.gif"><img src="https://scalerablog.files.wordpress.com/2017/04/giphy-4.gif" alt="" width="200" height="150" class="aligncenter size-full wp-image-4368" /></a>

Well, it's not possible. The syntax sugar we're using here implies that both types have to match. Maybe it was too pretty for our bodies :-)

See you in the next post. Peace out!
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4369</wp:post_id>
  <wp:post_date>2017-04-18 10:30:39</wp:post_date>
  <wp:post_date_gmt>2017-04-18 08:30:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>scalera-tip-handling-sticky-implicit-contexts</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="alis"><![CDATA[alis]]></category>
  <category domain="post_tag" nicename="context"><![CDATA[context]]></category>
  <category domain="category" nicename="english"><![CDATA[English]]></category>
  <category domain="post_tag" nicename="implicit"><![CDATA[implicit]]></category>
  <category domain="post_tag" nicename="klang"><![CDATA[klang]]></category>
  <category domain="post_tag" nicename="scala"><![CDATA[scala]]></category>
  <category domain="post_tag" nicename="scalera"><![CDATA[scalera]]></category>
  <category domain="post_tag" nicename="tip"><![CDATA[tip]]></category>
  <category domain="post_tag" nicename="type"><![CDATA[type]]></category>
  <category domain="post_tag" nicename="viktor"><![CDATA[viktor]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[59615419]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:10515941;s:57:"https://twitter.com/ScaleraBlog/status/854250858481152000";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105992117962932841165/posts/Y33BsvNSg2g]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[4115062867]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_10471757</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_10515941</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[ScaleraBlog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_17164161</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_16940087</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>161</wp:comment_id>
    <wp:comment_author><![CDATA[Krzysztof Ciesielski]]></wp:comment_author>
    <wp:comment_author_email>krzysztof.ciesielski@softwaremill.pl</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/116149226775062046406</wp:comment_author_url>
    <wp:comment_author_IP>89.66.105.65</wp:comment_author_IP>
    <wp:comment_date>2017-04-20 11:12:21</wp:comment_date>
    <wp:comment_date_gmt>2017-04-20 09:12:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[One way to deal with (implicit ev1: ExecutionContext, ev2: ExecutionContext) is type tagging. It's also a nice idea even if you have a single ExecutionContext, just to avoid passing wrong implicit EC by mistake. Tagging is available as a feature of Shapeless. There's also a micro-library for this: https://github.com/softwaremill/scala-common#tagging]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1492679542.204965114593505859375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1492680651</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1492680651</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1492680652.4671840667724609375;s:5:"event";s:15:"status-approved";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value>googleplus</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value>https://lh3.googleusercontent.com/-Mpc6t8qsxeg/AAAAAAAAAAI/AAAAAAAADpA/WpQ5OikHxHQ/photo.jpg?sz=50</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value>116149226775062046406</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>162</wp:comment_id>
    <wp:comment_author><![CDATA[jpaniego]]></wp:comment_author>
    <wp:comment_author_email>javiersantospaniego@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2.136.145.40</wp:comment_author_IP>
    <wp:comment_date>2017-04-20 11:31:06</wp:comment_date>
    <wp:comment_date_gmt>2017-04-20 09:31:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nice feature!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>161</wp:comment_parent>
    <wp:comment_user_id>59615419</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1492680668</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1492680667</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1492680668.0626809597015380859375;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jpaniego";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
  </channel>
</rss>
